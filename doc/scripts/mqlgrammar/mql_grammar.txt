statement = statement_by_itself "GO" ;

statement_by_itself = create_database_statement
                    | initialize_database_statement
                    | use_database_statement
                    | drop_database_statement
                    | vacuum_database_statement
                    | create_object_type_statement
                    | update_object_type_statement
                    | drop_object_type_statement
                    | insert_monads_statement
                    | delete_monads_statement
                    | get_monads_statement
                    | monad_set_calculation_statement
                    | create_enumeration_statement
                    | update_enumeration_statement
                    | drop_enumeration_statement
                    | create_segment_statement
                    | select_all_objects_statement
                    | select_objects_at_statement
                    | select_objects_having_monads_in_statement
                    | get_aggregate_features_statement
                    | get_objects_having_monads_in_statement
                    | get_set_from_feature_statement
                    | select_object_types_statement
                    | select_features_statement
                    | select_enumerations_statement
                    | select_enumeration_constants_statement
                    | select_object_types_using_enum_statement
                    | select_min_m_statement
                    | select_max_m_statement
                    | create_object_from_monads_statement
                    | create_object_from_id_ds_statement
                    | update_objects_by_monads_statement
                    | update_objects_by_id_ds_statement
                    | delete_objects_by_monads_statement
                    | delete_objects_by_id_ds_statement
                    | get_features_statement
                    | quit_statement
                    | create_indexes_statement
                    | drop_indexes_statement
                    | begin_transaction_statement
                    | commit_transaction_statement
                    | abort_transaction_statement
                    | select_monad_sets_statement
                    | get_monad_sets_statement
                    | create_monad_set_statement
                    | update_monad_set_statement
                    | drop_monad_set_statement
                    | create_objects_with_object_type_statement ; 



create_database_statement = 
    "CREATE"  "DATABASE" database_name [with_key]
    ["USING" "ENCODING" STRING] ;
    


database_name = IDENTIFIER
              | STRING; 

initialize_database_statement = 
    "INITIALIZE"  "DATABASE" database_name [with_key]; 
    


use_database_statement = "USE" ["DATABASE"] database_name [with_key]; 

with_key = "WITH" "KEY" STRING ;

drop_database_statement = "DROP" "DATABASE" database_name; 
   
vacuum_database_statement = "VACUUM" ["DATABASE"] ["ANALYZE"];
   
create_indexes_statement = "CREATE" "INDEXES" on_object_type; 
    


drop_indexes_statement = "DROP" "INDEXES" on_object_type; 
    


on_object_type = "ON" "OBJECT" ("TYPE" | "TYPES")
                 "[" 
                    (object_type_name | "ALL")
                 "]" ;
    



begin_transaction_statement = "BEGIN" "TRANSACTION"; 
    


commit_transaction_statement = "COMMIT" "TRANSACTION"; 
    


abort_transaction_statement = "ABORT" "TRANSACTION"; 
    



create_object_type_statement = "CREATE" ["OBJECT"] "TYPE"
                               [if_not_exists]
                               [range_type]
                               [monad_uniqueness_type]
                               "[" object_type_name
                                  [feature_declaration_list]
                               "]"; 

range_type = "WITH"  "MULTIPLE"  "RANGE"  "OBJECTS"
           | "WITH"  "SINGLE"    "RANGE"  "OBJECTS"
           | "WITH"  "SINGLE"    "MONAD"  "OBJECTS" ;
    

monad_uniqueness_type = "HAVING"  "UNIQUE"  "FIRST"  "MONADS"
                      | "HAVING"  "UNIQUE"
                        "FIRST"   "AND"     "LAST"   "MONADS"
                      | "WITHOUT" "UNIQUE"  "MONADS" ;
    


object_type_name = IDENTIFIER ;  

feature_declaration_list = feature_declaration { feature_declaration } ;

feature_declaration = feature_name ":" feature_type 
                      default_specification ["COMPUTED"] ";"
                    | feature_name ":" "LIST" "OF" 
                      list_feature_type ";" ; 
   


feature_type = "INTEGER" [with_index]
             | "STRING" [string_length] [from_set] [with_index]
             | "ASCII" [string_length] [from_set] [with_index]
             | "ID_D" [with_index]
             | IDENTIFIER [with_index] /* For enumerations */
             | "SET" "OF" "MONADS" /* Same as MULTIPLE RANGE SET OF MONADS */
             | "SINGLE"   "MONAD"  "SET"  "OF"  "MONADS"
             | "SINGLE"   "RANGE"  "SET"  "OF"  "MONADS"
             | "MULTIPLE" "RANGE"  "SET"  "OF"  "MONADS" ;
    



list_feature_type = "INTEGER" 
                  | "ID_D" ;
                  | IDENTIFIER /* For enumerations */ ;


with_index = "WITH"    "INDEX"
           | "WITHOUT" "INDEX"; 

if_not_exists = "IF"  "NOT"  "EXISTS" ;

from_set = "FROM"  "SET";


string_length = "(" unsigned_integer ")" ;
    
default_specification = ["DEFAULT" expression ];

update_object_type_statement = "UPDATE" ["OBJECT"] "TYPE"
                               "[" object_type_name
                                   feature_update_list
                               "]" ;
    


feature_update_list = feature_update { feature_update } ;
    


feature_update = ["ADD"] feature_declaration
               | "REMOVE" feature_name ";"  ;
    
drop_object_type_statement =
             "DROP"  ["OBJECT"] "TYPE"
             "["  object_type_name  "]" ;
    

insert_monads_statement = "INSERT" monad_specification;

delete_monads_statement = "DELETE" monad_specification;

get_monads_statement =
    "GET" "MONADS" "FROM" ("OBJECT" | "OBJECTS")        
    "WITH" id_ds_specification
    "["  object_type_name  "]" ;
    


monad_set_calculation_statement =
    "MONAD"  "SET"  "CALCULATION"
    monad_set_chain;
  

monad_set_chain = monad_set { monad_set_operator monad_set } ;

monad_set_operator = "UNION"      
                   | "DIFFERENCE"
                   | "INTERSECT";  


select_monad_sets_statement = "SELECT"  "MONAD"  "SETS" ;
    


get_monad_sets_statement = "GET"  "MONAD"  ("SET" | "SETS")
                           (monad_set_name_list | "ALL") ;


create_monad_set_statement = "CREATE"  "MONAD"  "SET"
                             monad_set_name
                             "WITH"  monad_specification;
    


update_monad_set_statement = "UPDATE"  "MONAD"  "SET"
                             monad_set_name  
                             (monad_set_operator | "REPLACE")
                             (monad_set_name | monad_set) ;

drop_monad_set_statement = "DROP"  "MONAD"  "SET"
                            monad_set_name;
    

monad_set_name = IDENTIFIER ;  

monad_set_name_list = monad_set_name { "," monad_set_name } ;


create_enumeration_statement = "CREATE" ("ENUM" | "ENUMERATION")
                               enumeration_name "=" 
                               "{" ec_declaration_list "}" ;
    
enumeration_name = IDENTIFIER ; 

ec_declaration_list = ec_declaration { "," ec_declaration } ;

ec_declaration = ["DEFAULT"]  ec_name  [ec_initialization] ;
    
ec_name = IDENTIFIER ; 

update_enumeration_statement =
          "UPDATE" ("ENUM" | "ENUMERATION")
          enumeration_name "="  
          "{" ec_update_list "}" ;
    
ec_update_list = ec_update { "," ec_update } ;


ec_update = ["ADD"] ["DEFAULT"] ec_name ec_initialization
          | "UPDATE" ["DEFAULT"] ec_name ec_initialization
          | "REMOVE" ec_name;

ec_initialization = "=" signed_integer; 

drop_enumeration_statement = "DROP" ("ENUM" | "ENUMERATION") 
                             enumeration_name;
    
create_segment_statement = 
   "CREATE" "SEGMENT"  segment_name
   "RANGE" "=" segment_range;

segment_name = IDENTIFIER ;  

segment_range = unsigned_integer "-" unsigned_integer;

select_all_objects_statement = select_clause
                  ( [in_clause] | "IN" monad_set_name )
                  with_max_range_clause
                  returning_clause
                  where_clause;

select_clause = "SELECT"
                ("FOCUS" | "ALL")
                ["OBJECTS"];

in_clause = "IN" in_specification ;
     
in_specification = monad_set
                 | "ALL" /* = all_m-1 */ ;
    
monad_set = "{" monad_set_element_list "}" ;
    


monad_set_element_list = monad_set_element { "," monad_set_element } ;

monad_set_element = unsigned_integer
                  | unsigned_integer "-" unsigned_integer
                  | unsigned_integer "-" ;
    


with_max_range_clause =  /* empty : WITH MAX RANGE MAX_M MONADS */
                      | "WITH" "MAX" "RANGE" "MAX_M" "MONADS"
                      | "WITH" "MAX" "RANGE" unsigned_integer "MONADS" 
                      | "WITH" "MAX" "RANGE" "FEATURE" feature_name
                        "FROM" "[" object_type_name "]" ;
    


returning_clause = /* empty : return full sheaf */
                 | "RETURNING"  "FULL"  "SHEAF"
                 | "RETURNING"  "FLAT"  "SHEAF"
                 | "RETURNING"  "FLAT"  "SHEAF"
                   "ON" object_type_name_list;
    

using_range_clause = /* empty : return all */
                   | "RANGE"  "ALL" 
                   | "RANGE"  "(" unsigned_integer "," unsigned_integer ")" 
                   | "RANGE"  "(" unsigned_integer ")" ;

object_type_name_list = object_type_name { "," object_type_name } ;


where_clause = "WHERE" mql_query; 

select_objects_at_statement =
               "SELECT" ["OBJECTS"] "AT" single_monad_specification
               "[" object_type_name "]" ;
   
single_monad_specification = "MONAD" "=" unsigned_integer;
    
select_objects_having_monads_in_statement =
               "SELECT" "OBJECTS"  "HAVING" "MONADS" "IN"
               monad_set
               "[" (object_type_name | "ALL") "]" ;
    
get_aggregate_features_statement =
        "GET" "AGGREGATE" "FEATURES"
        aggregate_feature_list
        "FROM" "OBJECTS"
        [in_clause] /* empty = 'all_m-1' */
        using_monad_feature
        "["
          object_type_name
          feature_constraints
        "]" ;
    

aggregate_feature_list = aggregate_feature { "," aggregate_feature } ;
    

aggregate_feature = "MIN"  "(" feature_name ")" 
                  | "MAX"  "(" feature_name ")" 
                  | "SUM"  "(" feature_name ")" 
                  | "COUNT"  "(" "*" ")" 
                  | "COUNT"  "(" aggregate_feature_comparison  ")" ;
    

aggregate_feature_comparison = feature_name
                               comparison_operator
                               value
                             | feature_name
                               comparison_operator
                               "(" list_of_identifier ")" 
                             | feature_name
                               comparison_operator
                               "(" list_of_integer ")" ;
    
get_objects_having_monads_in_statement =
        "GET" "OBJECTS" "HAVING" "MONADS" "IN"
        in_specification
        using_monad_feature
        "[" object_type_name
            ["GET" ("ALL" | feature_list)]
        "]" ;
    

using_monad_feature = /* empty: Equivalent to
                         "USING" "MONAD" "FEATURE" "MONADS" */
                    | "USING" "MONAD" "FEATURE" IDENTIFIER
                    | "USING" "MONAD" "FEATURE" "MONADS"; 


select_object_types_statement = "SELECT" ["OBJECT"] "TYPES" ;
    


select_features_statement = "SELECT" "FEATURES" 
                            "FROM" [["OBJECT"] "TYPE"]
                            "[" object_type_name "]" ;
    


get_set_from_feature_statement =
           "GET"  "SET"  "FROM" "FEATURE" feature_name
           "[" object_type_name "]" ;
    

select_enumerations_statement = "SELECT" "ENUMERATIONS" ;


select_enumeration_constants_statement =
           "SELECT" ("ENUM" | "ENUMERATION") "CONSTANTS"
           "FROM" [("ENUM" | "ENUMERATION")]
           enumeration_name;
    

select_object_types_using_enum_statement =
           "SELECT"  ["OBJECT"] "TYPES"
           "USING"   ("ENUM" | "ENUMERATION")  enumeration_name;
    


select_min_m_statement = "SELECT" "MIN_M" ;

select_max_m_statement = "SELECT" "MAX_M" ;


create_object_from_monads_statement =
     "CREATE" "OBJECT" "FROM" monad_specification
     with_id_d_specification
     object_creation_specification;
    
monad_specification = "MONADS" "=" monad_set; 

with_id_d_specification =  /* empty: The id_d is autogenerated; */
                        | "WITH" "ID_D"  "="  id_d_const ;
    

id_d_const = unsigned_integer | "NIL" ;

object_creation_specification =
     "[" object_type_name
         [ list_of_feature_assignments ]
     "]" ;
    


list_of_feature_assignments = feature_assignment { feature_assignment } ;

feature_assignment = feature_name ":=" expression ";" ;
    


feature_name = IDENTIFIER | "MONADS" ;

expression = signed_integer /* integer and id_d */
           | STRING
           | IDENTIFIER /* enumeration constant */
           | monad_set  /* set of monads */
           | "(" ")"    /* empty list */
           | "(" list_of_integer ")" 
           | "(" list_of_identifier ")" ;
    


list_of_integer = signed_integer { "," signed_integer } ;

list_of_identifier = IDENTIFIER { "," IDENTIFIER } ;

create_object_from_id_ds_statement =
     "CREATE" "OBJECT" "FROM" id_ds_specification
     with_id_d_specification
     object_creation_specification;
    
id_ds_specification = ("ID_D" | "ID_DS") "=" id_d_list;
    
id_d_list = id_d_const { "," id_d_const } ;


create_objects_with_object_type_statement = 
     "CREATE" "OBJECTS" "WITH" "OBJECT" "TYPE"
     "[" object_type_name "]"
     object_creation_list;
  
object_creation_list =
     object_creation_no_object_type
     { object_creation_no_object_type } ;


object_creation_no_object_type = 
     "CREATE" "OBJECT" "FROM" monad_specification
     with_id_d_specification
     "[" 
        [list_of_feature_assignments]
     "]" ;
  
update_objects_by_monads_statement =
     "UPDATE" ("OBJECT" | "OBJECTS") "BY" monad_specification 
     object_update_specification;
    
object_update_specification = 
     "[" object_type_name   list_of_feature_assignments  "]" ;
    

update_objects_by_id_ds_statement = 
     "UPDATE" ("OBJECT" | "OBJECTS") "BY" id_ds_specification
     object_update_specification;
    
delete_objects_by_monads_statement =
     "DELETE" ("OBJECT" | "OBJECTS") "BY" monad_specification
     object_deletion_specification;
    
object_deletion_specification = 
     "[" object_type_name_to_delete "]" ;
    
object_type_name_to_delete = object_type_name
                           | "ALL";

delete_objects_by_id_ds_statement =
     "DELETE" ("OBJECT" | "OBJECTS") "BY" id_ds_specification
     object_deletion_specification;

get_features_statement =
     "GET" ("FEATURE" | "FEATURES") feature_list
     "FROM" ("OBJECT" | "OBJECTS")
     "WITH" id_ds_specification
     "[" object_type_name "]" ;


feature_list = feature_list_member { "," feature_list_member } ;
    

feature_list_member = feature_name
                    | feature_name "(" IDENTIFIER ")" 
                    | feature_name "(" "MONADS" ")" ;
    
quit_statement = "QUIT" ;

mql_query = topograph;
    
topograph = blocks;

blocks = using_range_clause  block_string
       | using_range_clause  unordered_group ;

block_string0 = block
              | "[" block_string "]" ;
    

block_string1 = block_string0 
              | block_string0 "*" star_monad_set;
    

block_string2 = block_string1
              | block_string1  block_string2 ;
              | block_string1 "!" block_string2 ;
    

block_string = block_string2
             | block_string2 "OR" block_string ;

object_reference_declaration =
              /* empty: No object reference declaration */
            | "AS" object_reference ;

marks_declaration = [marks] ;
marks = mark { mark } ;
mark = "`" IDENTIFIER ;


object_reference = IDENTIFIER ; 

retrieval =  /* empty */    
          | "NORETRIEVE"
          | "RETRIEVE"  
          | "FOCUS";      

firstlast =  /* empty */                  
          | "FIRST"                     
          | "LAST"                      
          | "FIRST"  "AND"  "LAST";  

monad_set_relation_clause =  /* empty */ 
          | monad_set_relation_operation
            "(" monad_set_name "," universe_or_substrate ")"
          | monad_set_relation_operation  "(" universe_or_substrate ")" ;  


monad_set_relation_operation = "PART_OF" 
                             | "STARTS_IN" 
                             | "OVERLAP" ;


universe_or_substrate = "UNIVERSE"
                      | "SUBSTRATE" ;

feature_constraints = /* empty */
                    | ffeatures;     

ffeatures = fterm | ffeatures "OR" fterm; 

fterm = ffactor | fterm "AND" ffactor;  

ffactor = "NOT"  ffactor
        | "("  ffeatures  ")"
        | feature_comparison;
    
feature_comparison = feature_name  comparison_operator  value
                   | computed_feature_name  comparison_operator  value
                   | feature_name "=" "(" ")"  /* equal to empty list */
                   | feature_name "=" "(" list_of_identifier ")"
                   | feature_name "=" "(" list_of_integer ")"
                   | feature_name "IN" "(" list_of_identifier ")"
                   | feature_name "IN" "(" list_of_integer ")"
                   | computed_feature_name "IN" "(" list_of_integer ")"
                   | feature_name "IN" object_reference_usage
                   | computed_feature_name "IN" object_reference_usage;

computed_feature_name = feature_name  "("  feature_name  ")" ;

comparison_operator = "="  /* Equal to */
                    | "<"  /* Less than */
                    | ">"  /* Greater than */
                    | "<>" /* Not equal to */
                    | "<=" /* Less than or equal */
                    | ">=" /* Greater than or equal */
                    | "~"  /* Regular expression */
                    | "!~" /* Negated regular expression */
                    | "HAS"; 

value = enum_const
      | signed_integer
      | STRING
      | object_reference_usage ;
    


enum_const = IDENTIFIER ; 

object_reference_usage = object_reference "." feature_name
                       | object_reference "." computed_feature_name;

opt_blocks =  /* empty */ 
           | blocks ;


block = object_block
      | notexist_object_block
      | power
      | opt_gap_block
      | gap_block ;


unordered_group = "[" "UNORDEREDGROUP"
                  object_block_string
                  "]" ;


object_block_string = object_block { object_block } ;


star_monad_set = /* empty */  
               | monad_set ; 

opt_gap_block = "["  "GAP?"
                marks_declaration
                gap_retrieval
                opt_blocks
                "]" ;
    

gap_retrieval =  /* empty */   
              | "NORETRIEVE"
              | "RETRIEVE"  
              | "FOCUS";      


gap_block = "[" "GAP"
            marks_declaration
            gap_retrieval
            opt_blocks
            "]" ;


feature_retrieval = /* empty */
                  | "GET"  feature_list ;

object_block = "["  object_type_name
               marks_declaration
               object_reference_declaration
               retrieval
               firstlast
               monad_set_relation_clause
               feature_constraints
               feature_retrieval
               opt_blocks
               "]" ;
    

notexist_object_block =
               ("NOTEXIST" | "NOTEXISTS")
               "["  object_type_name
               marks_declaration
               object_reference_declaration
               retrieval
               firstlast
               monad_set_relation_clause
               feature_constraints
               feature_retrieval
               opt_blocks
               "]" ;
    
power = ".."
      | ".." restrictor
      | ".." "BETWEEN" limit "AND" limit;
    

restrictor = "<"  limit          
           | "<="  limit;   

limit = unsigned_integer  /* non-negative integer, may be 0. */ ;


unsigned_integer = digit { digit } ;

digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

signed_integer = unsigned_integer | "-" unsigned_integer | "NIL" ; 

     
       



