#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\begin_preamble
\usepackage{a4wide}
\usepackage{times}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics dvips
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 0
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 5
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle headings
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Relational Implementation of
\begin_inset Newline newline
\end_inset

 EMdF and MQL
\end_layout

\begin_layout Author
Ulrik Petersen
\end_layout

\begin_layout Date
April 27, 2013
\end_layout

\begin_layout Standard

\size larger
Copyright (C) 2001-2007 Ulrik Petersen
\end_layout

\begin_layout Standard
\noindent

\size larger
This document is made available under the Creative Commons Attribution-Sharealik
e license version 2.5.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent

\size larger
See
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\family typewriter
\size larger
http://creativecommons.org/licenses/by-sa/2.5/
\family default
 
\end_layout

\begin_layout Standard
\noindent

\size larger
for what that means.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 3cm
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center

\size larger
Please visit the Emdros website for the latest news and downloads:
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
\size larger
http://emdros.org
\end_layout

\begin_layout Abstract
In this report, I document some of my ideas on implementing the EMdF model
 in an RDBMS.
 The emphasis is on showing how the data domains of the EMdF model can be
 implemented in tables, using SQL2.
 It documents Emdros version 1.2.0.pre208 and above.
\end_layout

\begin_layout Abstract
In chapter 1, I give some preliminaries, including conventions used in this
 document.
 In chapter 2, I show how to implement the meta-data of the EMdF model in
 an RDBMS.
 In chapter 3, I show how to implement the objects in the EMdF model.
 In chapter 4, I show the way in which all of the commands of the full MQL
 access language translate into SQL statements.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList table

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Chapter
Preliminaries
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
In this report, it is my aim to succinctly describe most of my ideas on
 how to implement the EMdF model in a Relational Database Management System,
 using a subset of SQL2.
 
\end_layout

\begin_layout Standard
The data is split into two neatly segregated kinds of data: 
\end_layout

\begin_layout Itemize
meta-data and 
\end_layout

\begin_layout Itemize
object_dm data.
 
\end_layout

\begin_layout Standard
The meta-data maintains information about object types, enumerations, and
 sequences of ids.
 The object_dm data is made on a per-object type basis.
 The structure of this report reflects this segregation: chapter 2 deals
 with meta-data, whereas chapter 3 deals with object_dm data.
\end_layout

\begin_layout Standard
Chapter 4 details how to implement all of the MQL statements using SQL2.
\end_layout

\begin_layout Standard
In this chapter, I give some preliminaries.
\end_layout

\begin_layout Section
Assumptions on the implementation
\end_layout

\begin_layout Subsection
The three sequences of ids
\begin_inset CommandInset label
LatexCommand label
name "TWO_SEQUENCES_OF_IDS"

\end_inset


\end_layout

\begin_layout Standard
Three sequences of ids are assumed to exist in each EMdF database: One sequence
 for assigning object id_ds, one sequence for assigning type ids (object
 type ids, enumeration type ids, and feature type ids), and one for everything
 else (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "SEQUENCES"

\end_inset

).
 
\end_layout

\begin_layout Standard
When autogenerating an id from a given sequence, we read the number of the
 relevant sequence from this table, and update the tuple with this value
 plus one, ready for next time we need an autogenerated id.
\end_layout

\begin_layout Subsection
All names are stored as lower-case
\end_layout

\begin_layout Standard
The names of all object types, enumerations, and features are stored as
 all-lower-case.
 This makes it easy to search for them later.
 However, enumeration constants are case-sensitive, so they are not stored
 lower-case.
\end_layout

\begin_layout Section
Conventions used
\end_layout

\begin_layout Standard
I employ a number of conventions in this document:
\end_layout

\begin_layout Enumerate
Throughout, the shorthand 
\begin_inset Quotes eld
\end_inset

OT
\begin_inset Quotes erd
\end_inset

 is used to mean 
\begin_inset Quotes eld
\end_inset

Object Type.
\begin_inset Quotes erd
\end_inset

 This is especially important in SQL templates.
\end_layout

\begin_layout Enumerate
When referring to tables in the text, the tables are in the modern typeface,
 and are enclosed in 
\begin_inset Quotes eld
\end_inset

double quotes.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Enumerate
When referring to table attributes in the text, the attributes are in the
 typewriter typeface, and are enclosed in 
\begin_inset Quotes eld
\end_inset


\family typewriter
double quotes
\family default

\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Enumerate
In SQL code, anything enclosed in { curly braces } is meant to be replaced
 with a value described within the curly braces.
 E.g., 
\begin_inset Quotes eld
\end_inset

SET is_true = { 0 | 1 }
\begin_inset Quotes erd
\end_inset

 means that, when executing the SQL code, the value used to set 
\begin_inset Quotes eld
\end_inset


\family typewriter
is_true
\family default

\begin_inset Quotes erd
\end_inset

 must be either 
\begin_inset Quotes eld
\end_inset

0
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

1
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Throughout, examples of table data are given.
 Where ids are involved, the ids are meant to be consistent throughout this
 document, so that you should be able to follow the references to the right
 tuples.
\end_layout

\begin_layout Chapter
Meta-data
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This chapter, I detail all of the tables necessary for maintaining the meta-data
 in the EMdF database.
 For each table, I write on three subjects:
\end_layout

\begin_layout Enumerate
An SQL template for creating the table,
\end_layout

\begin_layout Enumerate
An explanation, including a rationale, and
\end_layout

\begin_layout Enumerate
An example, to show the theory in practice.
\end_layout

\begin_layout Standard
The following tables are needed for storing meta-data:
\end_layout

\begin_layout Itemize
schema_version
\end_layout

\begin_layout Itemize
database_metadata
\end_layout

\begin_layout Itemize
sequence_0
\end_layout

\begin_layout Itemize
sequence_1
\end_layout

\begin_layout Itemize
sequence_2
\end_layout

\begin_layout Itemize
enumerations
\end_layout

\begin_layout Itemize
enumeration_constants
\end_layout

\begin_layout Itemize
object_types
\end_layout

\begin_layout Itemize
features
\end_layout

\begin_layout Itemize
min_m
\end_layout

\begin_layout Itemize
max_m
\end_layout

\begin_layout Itemize
monad_sets
\end_layout

\begin_layout Itemize
OT_objects
\end_layout

\begin_layout Standard
These will be described in turn below.
\end_layout

\begin_layout Section
schema_version
\end_layout

\begin_layout Subsection
SQL template
\end_layout

\begin_layout LyX-Code
CREATE TABLE schema_version (
\end_layout

\begin_layout LyX-Code
    dummy_id INTEGER PRIMARY KEY NOT NULL,
\end_layout

\begin_layout LyX-Code
    schema_version INT NOT NULL
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Subsection
Explanation
\end_layout

\begin_layout Standard
This table contains, in numerical form, the version of the schema in use.
 The values are defined in emdf.h in the sources.
 This was added in version 1.2.0.pre59.
 The dummy_id is always 0, and there is always exactly one row in the table.
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
The table looks like this:
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dummy_id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schema_version
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
sequence_0, sequence_1, and sequence_2
\begin_inset CommandInset label
LatexCommand label
name "SEQUENCES"

\end_inset


\end_layout

\begin_layout Subsection
SQL template
\end_layout

\begin_layout LyX-Code
CREATE TABLE sequence_0 (
\end_layout

\begin_layout LyX-Code
    sequence_id INTEGER PRIMARY KEY NOT NULL,
\end_layout

\begin_layout LyX-Code
    sequence_value INT NOT NULL
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE TABLE sequence_1 (
\end_layout

\begin_layout LyX-Code
    sequence_id INTEGER PRIMARY KEY  NOT NULL,
\end_layout

\begin_layout LyX-Code
    sequence_value INT NOT NULL
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE TABLE sequence_2 (
\end_layout

\begin_layout LyX-Code
    sequence_id INTEGER PRIMARY KEY  NOT NULL,
\end_layout

\begin_layout LyX-Code
    sequence_value INT NOT NULL
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Subsection
Explanation
\end_layout

\begin_layout Standard
These tables are for maintaining information on the three sequences of ids
 that must exist in an EMdF database.
 See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "TWO_SEQUENCES_OF_IDS"

\end_inset

 for background information.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset


\family typewriter
sequence_id
\family default

\begin_inset Quotes erd
\end_inset

 attribute is meant to take on one of the following two values:
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C/C++ preprocessor #DEFINE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SEQUENCE_OBJECT_ID_DS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The sequence is for object id_ds
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SEQUENCE_TYPE_IDS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The sequence for object type ids, enumeration type ids, and feature type
 ids
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SEQUENCE_OTHER_IDS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The sequence is for all other ids
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset

The 
\begin_inset Quotes eld
\end_inset


\family typewriter
sequence_value
\family default

\begin_inset Quotes erd
\end_inset

 attribute then lists the value of the next id to be taken for that sequence.
\end_layout

\begin_layout Standard
All three must be initialized to 1.
 However, when drawing from SEQUENCE_TYPE_IDs, the actual value will be
 shift-lefted SEQUENCE_TYPE_IDS_FREE_LOWER_BITS.
 This is currently 16, meaning that the seuqence can in reality only go
 as far as 2^15 (32768) before wrapping around into negative numbers.
\end_layout

\begin_layout Standard
NOTE: This may be implemented differently for each backend.
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
The tables should look like this right after initialization of the database:
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sequence_id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sequence_value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sequence_id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sequence_value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sequence_id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sequence_value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
enumerations
\end_layout

\begin_layout Subsection
SQL template
\end_layout

\begin_layout LyX-Code
CREATE TABLE enumerations (
\end_layout

\begin_layout LyX-Code
    enum_id INTEGER PRIMARY KEY NOT NULL,
\end_layout

\begin_layout LyX-Code
    enum_name VARCHAR(255) NOT NULL
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Subsection
Explanation
\end_layout

\begin_layout Standard
This table is the master table for the data domain of enumerations.
 It lists, for each enumeration in the database, its enum_id and its human-reada
ble name.
 Another table, 
\begin_inset Quotes eld
\end_inset

enumeration_constants,
\begin_inset Quotes erd
\end_inset

 then lists all of the constants for each enumeration type.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset


\family typewriter
enum_id
\family default

\begin_inset Quotes erd
\end_inset

 attribute is taken from the 
\begin_inset Quotes eld
\end_inset

sequence_1
\begin_inset Quotes erd
\end_inset

 table, i.e., from the SEQUENCE_TYPE_IDS sequence.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset


\family typewriter
enum_name
\family default

\begin_inset Quotes erd
\end_inset

 attribute is what the user entered when creating the enumeration.
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
As an example, the following enumerations might be defined:
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
enum_id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
enum_name
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
65536
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
phrase_type_t
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
131072
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
part_of_speech_t
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
983040
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
clause_type_t
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
enumeration_constants
\end_layout

\begin_layout Subsection
SQL template
\end_layout

\begin_layout LyX-Code
CREATE TABLE enumeration_constants (
\end_layout

\begin_layout LyX-Code
    enum_id INT NOT NULL,
\end_layout

\begin_layout LyX-Code
    enum_value_name VARCHAR(255) NOT NULL,
\end_layout

\begin_layout LyX-Code
    value INT NOT NULL,
\end_layout

\begin_layout LyX-Code
    is_default CHAR(1) NOT NULL,
\end_layout

\begin_layout LyX-Code
    PRIMARY KEY (enum_id, enum_value_name)
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Subsection
Explanation
\end_layout

\begin_layout Standard
This table lists, for each enumeration specified in the table 
\begin_inset Quotes eld
\end_inset

enumerations,
\begin_inset Quotes erd
\end_inset

 data pertaining to all of the constants in the enumeration:
\end_layout

\begin_layout Itemize
The enum_id (see below).
\end_layout

\begin_layout Itemize
The human-readable name of the constant (
\begin_inset Quotes eld
\end_inset


\family typewriter
enum_value_name
\family default

\begin_inset Quotes erd
\end_inset

),
\end_layout

\begin_layout Itemize
The value itself (
\begin_inset Quotes eld
\end_inset


\family typewriter
value
\family default

\begin_inset Quotes erd
\end_inset

), and
\end_layout

\begin_layout Itemize
A boolean specifying whether this is the default or not (
\begin_inset Quotes eld
\end_inset


\family typewriter
is_default
\family default

\begin_inset Quotes erd
\end_inset

).
 The only valid values for this attribute are 'Y' and 'N'.
\end_layout

\begin_layout Standard
The enum_ids are drawn from SEQUENCE_TYPE_IDS, but of course shift-lefted
 as explained in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "SEQUENCES"

\end_inset

 which starts on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "SEQUENCES"

\end_inset

.
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
For the two enumerations defined in the previous section, the values in
 table 
\begin_inset CommandInset ref
LatexCommand ref
reference "ENUMERATION_CONSTANTS_EXAMPLE"

\end_inset

 might be defined.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement htbp
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="25" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
enum_id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
enum_value_name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
default_value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
65536
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ptNotAppliccable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'Y'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
65536
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
VP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
65536
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
65536
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NPpers
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
131072
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pspNotAppliccable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'Y'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
131072
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
psp_article
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
131072
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
psp_verb
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
131072
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
psp_noun
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
131072
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
psp_proper_noun
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
131072
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
psp_adverb
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
196608
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
prsNotAppliccable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'Y'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
196608
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
prs_singular
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
196608
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
prs_dual
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
196608
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
prs_plural
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
262144
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
gndNotAppliccable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'Y'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
262144
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
gnd_masculine
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
262144
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
gnd_feminine
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
983040
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ct_Way0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
983040
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ct_Xqtl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
enumeration_constants example
\begin_inset CommandInset label
LatexCommand label
name "ENUMERATION_CONSTANTS_EXAMPLE"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
object_types
\end_layout

\begin_layout Subsection
SQL template
\end_layout

\begin_layout LyX-Code
CREATE TABLE object_types (
\end_layout

\begin_layout LyX-Code
    object_type_id INTEGER PRIMARY KEY NOT NULL,
\end_layout

\begin_layout LyX-Code
    object_type_name VARCHAR(255) NOT NULL,
\end_layout

\begin_layout LyX-Code
    object_type_flags INT NOT NULL
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Subsection
Explanation
\end_layout

\begin_layout Standard
This table is the master table for object types.
 It stores, for each object type, its id, its human-readable name, and an
 
\begin_inset Quotes eld
\end_inset

INT
\begin_inset Quotes erd
\end_inset

-encoded set of integers of flags.
 The id is autogenerated, upon creation of the object type, from the 
\begin_inset Quotes eld
\end_inset

sequence_1
\begin_inset Quotes erd
\end_inset

 table, i.e., using the 
\begin_inset Quotes eld
\end_inset

SEQUENCES_TYPE_IDS
\begin_inset Quotes erd
\end_inset

 sequence.
 The flags are taken from Tables 
\begin_inset CommandInset ref
LatexCommand vref
reference "table:Bit-set-flags-for-object_types_table"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand vref
reference "table:flags-for-monad-uniqueness"

\end_inset

.
 Note that the flags in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "table:Bit-set-flags-for-object_types_table"

\end_inset

 are not bitfield flags, but form three-bit integer.
 The flags in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "table:flags-for-monad-uniqueness"

\end_inset

 form a four-bit integer, and the flags in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:flags-for-OT-name-is-string"

\end_inset

 form a two-bit integer.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#define
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OT_RANGE_MASK
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x00000007
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit-mask for these values
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OT_WITH_MULTIPLE_RANGE_OBJECTS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x00000000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object type has multiple-range objects
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OT_WITH_SINGLE_RANGE_OBJECTS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x00000001
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object type has single-range objects
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OT_WITH_SINGLE_MONAD_OBJECTS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x00000002
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object type has single-monad objects
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Bit-set flags for object_types table and object ranges
\begin_inset CommandInset label
LatexCommand label
name "table:Bit-set-flags-for-object_types_table"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#define
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OT_MONAD_UNIQUENESS_MASK
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x00000078
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit-mask for these values
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OT_WITHOUT_UNIQUE_MONADS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x00000000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Monads may not be unique
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OT_HAVING_UNIQUE_FIRST_MONADS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x00000008
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All first monads are unique
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OT_HAVING_UNIQUE_FIRST_AND_LAST_MONADS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x00000010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All first and last monads are unique
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Bit-set flags for object_types table and monad uniqueness
\begin_inset CommandInset label
LatexCommand label
name "table:flags-for-monad-uniqueness"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#define
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
value
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OT_NAME_IS_STRING_MASK
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x00000300
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit-mask for this property
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OT_NAME_IS_STRING
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x00000100
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This OT name is a string, and is therefore mapped to a CRC32 value
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Bit-set flags for object_types table and the property of whether the OT
 name is a string or a plain identifier
\begin_inset CommandInset label
LatexCommand label
name "tab:flags-for-OT-name-is-string"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Special mention should be made of the bit-set in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:flags-for-OT-name-is-string"

\end_inset

.
 As will be shown in Section XXX, the object type names sometimes map to
 their lower-case equivalents, and sometimes to a name derived from a CRC32-hash
 of the original name.
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "OBJECT_TYPES_EXAMPLE"

\end_inset

 shows some sample object types.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement htbp
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
type_id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
type_name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object_type_flags
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
327680
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Word
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x00000001
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
851968
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Phrase
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1048576
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clause
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
object_types example
\begin_inset CommandInset label
LatexCommand label
name "OBJECT_TYPES_EXAMPLE"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
normalized_object_type_names
\end_layout

\begin_layout Subsection
SQL template
\end_layout

\begin_layout LyX-Code
CREATE TABLE normalized_object_type_names (
\end_layout

\begin_layout LyX-Code
    object_type_id INT NOT NULL,
\end_layout

\begin_layout LyX-Code
    object_type_name VARCHAR(255) NOT NULL,
\end_layout

\begin_layout LyX-Code
    normalized_object_type_name VARCHAR(255) NOT NULL,
\end_layout

\begin_layout LyX-Code
    PRIMARY KEY (object_type_id)
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Subsection
Explanation
\end_layout

\begin_layout Standard
Whenever an object type name is a C identifier 
\begin_inset Quotes eld
\end_inset

A
\begin_inset Quotes erd
\end_inset

, the name used for the table to hold the objects of that feature is formed
 as 
\begin_inset Quotes eld
\end_inset

A'_objects
\begin_inset Quotes erd
\end_inset

, where A' is the lowercased version of A.
 However, starting with Emdros version 3.2.1.pre16, it is possible to use arbitrary
 strings as object type names.
 Since many database backends cannot use arbitrary strings in the table
 names, we need a way of mapping the 
\begin_inset Quotes eld
\end_inset

real
\begin_inset Quotes erd
\end_inset

, MQL-defined object type name to something that will be accepted by the
 database backend.
\end_layout

\begin_layout Standard
Thus the EMdF backend 
\begin_inset Quotes eld
\end_inset

normalizes
\begin_inset Quotes erd
\end_inset

 object type names before forming database table names.
 The algorithm used to determine the normalized object type name is as follows:
\end_layout

\begin_layout Enumerate
Let OT = the object type name as given in the MQL.
\end_layout

\begin_layout Enumerate
Let OTL = OT, with all ASCII capital letters lower-cased.
\end_layout

\begin_layout Enumerate
If OTL is a C identifier (i.e., starts with a letter or an underscore, and
 consists only of (in this case, lower-case) letters, underscores, and digits
 0-9), then return OTL.
 Otherwise, go on
\end_layout

\begin_layout Enumerate
Let CRC = the 8-character lower-case hexadecimal representation of the CRC32
 hash of the string (
\begin_inset Quotes eld
\end_inset

EMdF
\begin_inset Quotes erd
\end_inset

 + OTL), as defined in EMdF/crc32.cpp.
\end_layout

\begin_layout Enumerate
return 
\begin_inset Quotes eld
\end_inset

ot
\begin_inset Quotes erd
\end_inset

 + CRC.
\end_layout

\begin_layout Standard
The result of this algorithm is then used to form the table name for the
 object tables, as well as any other table names, such as sets for sets
 of strings.
 For object tables, the method is to prepend 
\begin_inset Quotes eld
\end_inset

_objects
\begin_inset Quotes erd
\end_inset

 to the normalized table name.
\end_layout

\begin_layout Standard
Before Emdros version 3.2.1.pre16, the algorithm would stop at step #3, since
 all object type names were required to be C identifiers.
\end_layout

\begin_layout Section
features
\end_layout

\begin_layout Subsection
SQL template
\end_layout

\begin_layout LyX-Code
CREATE TABLE features (
\end_layout

\begin_layout LyX-Code
    object_type_id INT NOT NULL,
\end_layout

\begin_layout LyX-Code
    feature_name VARCHAR(255) NOT NULL,
\end_layout

\begin_layout LyX-Code
    feature_type_id INT NOT NULL,
\end_layout

\begin_layout LyX-Code
    default_value VARCHAR(1000) NOT NULL,
\end_layout

\begin_layout LyX-Code
    computed CHAR(1) NOT NULL DEFAULT 'N',
\end_layout

\begin_layout LyX-Code
    PRIMARY KEY (object_type_id, feature_name)
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Subsection
Explanation
\end_layout

\begin_layout Standard
This table is analogous to the 
\begin_inset Quotes eld
\end_inset

enumeration_constants
\begin_inset Quotes erd
\end_inset

 table.
 It lists, for each feature:
\end_layout

\begin_layout Enumerate
The object type id denoting the object type with which this feature is associate
d (
\begin_inset Quotes eld
\end_inset


\family typewriter
object_type_id
\family default

\begin_inset Quotes erd
\end_inset

),
\end_layout

\begin_layout Enumerate
The feature name in human-readable form (
\begin_inset Quotes eld
\end_inset


\family typewriter
feature_name
\family default

\begin_inset Quotes erd
\end_inset

), 
\end_layout

\begin_layout Enumerate
A feature type id (
\begin_inset Quotes eld
\end_inset


\family typewriter
feature_type_id
\family default

\begin_inset Quotes erd
\end_inset

).
 More on this in a moment,
\end_layout

\begin_layout Enumerate
A string representing the default value (
\begin_inset Quotes eld
\end_inset


\family typewriter
default_value
\family default

\begin_inset Quotes erd
\end_inset

), and
\end_layout

\begin_layout Enumerate
A one-CHAR boolean indicating whether the feature is computed ('Y') or stored
 ('N') (
\begin_inset Quotes eld
\end_inset


\family typewriter
computed
\family default

\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Standard
The attribute 
\begin_inset Quotes eld
\end_inset


\family typewriter
object_type_id
\family default

\begin_inset Quotes erd
\end_inset

 references the 
\begin_inset Quotes eld
\end_inset


\family typewriter
object_type_id
\family default

\begin_inset Quotes erd
\end_inset

 attribute of the 
\begin_inset Quotes eld
\end_inset

object_types
\begin_inset Quotes erd
\end_inset

 table.
\end_layout

\begin_layout Standard
The attribute 
\begin_inset Quotes eld
\end_inset


\family typewriter
feature_type_id
\family default

\begin_inset Quotes erd
\end_inset

 can take on values from the following two sources:
\end_layout

\begin_layout Enumerate
For standard atomic types, the value will be composite: A bitwise OR of
 one of the values described in table 
\begin_inset CommandInset ref
LatexCommand ref
reference "FEATURE_TYPE_IDS_FOR_STANDARD_ATOMIC_TYPES"

\end_inset

 and possibly one of the values described in table 
\begin_inset CommandInset ref
LatexCommand ref
reference "FEATURE_TYPE_FLAGS_FOR_STANDARD_ATOMIC_TYPES"

\end_inset

.
 Note that of the standard atomic types, only INTEGER and ID_D can have
 the FEATURE_TYPE_LIST_OF bit set.
\end_layout

\begin_layout Enumerate
For enumerations, the value will be any value from the 
\begin_inset Quotes eld
\end_inset


\family typewriter
enum_id
\family default

\begin_inset Quotes erd
\end_inset

 attribute of the 
\begin_inset Quotes eld
\end_inset

enumerations
\begin_inset Quotes erd
\end_inset

 table, and with the FEATURE_TYPE_ENUM #define from table 
\begin_inset CommandInset ref
LatexCommand ref
reference "FEATURE_TYPE_IDS_FOR_STANDARD_ATOMIC_TYPES"

\end_inset

 bitwise-OR'ed in.
 Thus
\end_layout

\begin_layout Standard
Only FEATURE_TYPE_STRING and FEATURE_TYPE_ASCII can have the 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
FEATURE_TYPE_AS_SET
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
 bit set.
 If set, there is an additional table, OT_mdf_FEATURE_NAME_set (described
 in Section 
\begin_inset CommandInset ref
LatexCommand vref
reference "OT_mdf_FEATURE_NAME_set"

\end_inset

), which holds the strings as well as an id_d.
 Then this id_d is used in OT_objects in lieu of the string.
 This is more compact, and may give a speed increase.
\end_layout

\begin_layout Standard
Only the standard atomic types (not enumerations) may have the FEATURE_TYPE_WITH
_INDEX bit set.
 If set, the EMdF layer will put an index on the feature.
 The index may be dropped again with the DROP INDEXES MQL statement, or
 with the external manage_indices(1) program.
 However, this bit will not be cleared by such operations.
 It stays there and tells the EMdF layer to add the index to the feature
 if a CREATE INDEXES MQL statement is issued for the object type, or if
 manage_indices(1) is invoked to create indexes on the object type.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement htbp
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C/C++ preprocessor #DEFINE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SQL-type in object tables
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FEATURE_TYPE_INTEGER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INT
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FEATURE_TYPE_STRING
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TEXT
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FEATURE_TYPE_ASCII
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TEXT
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FEATURE_TYPE_ID_D
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INT
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FEATURE_TYPE_ENUM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INT
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FEATURE_TYPE_LIST_OF_INTEGER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TEXT
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FEATURE_TYPE_LIST_OF_ID_D
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TEXT
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FEATURE_TYPE_LIST_OF_ENUM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TEXT
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Feature type ids for standard atomic types
\begin_inset CommandInset label
LatexCommand label
name "FEATURE_TYPE_IDS_FOR_STANDARD_ATOMIC_TYPES"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C/C++ preprocessor #define
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
(0x00000100L)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FEATURE_TYPE_WITH_INDEX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set, the feature is indexed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
(0x00000200L)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
FEATURE_TYPE_FROM_SET
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set, the feature's value is drawn from a set
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Feature type flags for standard atomic types
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "FEATURE_TYPE_FLAGS_FOR_STANDARD_ATOMIC_TYPES"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
Examples of features are given in table 
\begin_inset CommandInset ref
LatexCommand ref
reference "EXAMPLES_OF_FEATURES"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement htbp
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object_type_id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
feature_name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
feature_type_id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
default_value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
computed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
327680
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
psp
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
131072
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pspNotAppliccable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
327680
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
person
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
196608
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
prsNotAppliccable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
327680
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
gender
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
262144
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
gndNotAppliccable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
327680
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
surface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
327680
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
lexeme
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
851968
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
phrase_type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
65536
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pt_NotAppliccable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1048576
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
clause_type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
983040
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ctWay0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'N'
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Examples of features
\begin_inset CommandInset label
LatexCommand label
name "EXAMPLES_OF_FEATURES"

\end_inset

.
 Note how the feature_type_id has the value of 1 for strings (see table
 
\begin_inset CommandInset ref
LatexCommand ref
reference "FEATURE_TYPE_IDS_FOR_STANDARD_ATOMIC_TYPES"

\end_inset

).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
min_m
\end_layout

\begin_layout Subsection
SQL template
\end_layout

\begin_layout LyX-Code
CREATE TABLE min_m (
\end_layout

\begin_layout LyX-Code
    dummy_id INTEGER PRIMARY KEY NOT NULL,
\end_layout

\begin_layout LyX-Code
    min_m INT NOT NULL
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Subsection
Explanation
\end_layout

\begin_layout Standard
This table stores the smallest monad in the database.
 dummy_id is always 0.
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
An example is given in table 
\begin_inset CommandInset ref
LatexCommand ref
reference "EXAMPLE_OF_MIN_M"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement htbp
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dummy_id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
min_m
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Example of min_m
\begin_inset CommandInset label
LatexCommand label
name "EXAMPLE_OF_MIN_M"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
max_m
\end_layout

\begin_layout Subsection
SQL template
\end_layout

\begin_layout LyX-Code
CREATE TABLE max_m (
\end_layout

\begin_layout LyX-Code
    dummy_id INTEGER PRIMARY KEY NOT NULL,
\end_layout

\begin_layout LyX-Code
    max_m INT NOT NULL
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Subsection
Explanation
\end_layout

\begin_layout Standard
This table stores the largest monad in the database.
 dummy_id is always 0.
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
An example is given in table 
\begin_inset CommandInset ref
LatexCommand ref
reference "EXAMPLE_OF_MAX_M"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement htbp
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dummy_id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
max_m
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
138019
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Example of min_m
\begin_inset CommandInset label
LatexCommand label
name "EXAMPLE_OF_MAX_M"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
monad sets
\end_layout

\begin_layout Subsection
SQL template
\end_layout

\begin_layout LyX-Code
CREATE TABLE monad_sets (
\end_layout

\begin_layout LyX-Code
    monad_set_id INTEGER PRIMARY KEY NOT NULL,
\end_layout

\begin_layout LyX-Code
    monad_set_name VARCHAR(255) NOT NULL
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE TABLE monad_sets_monads (
\end_layout

\begin_layout LyX-Code
    monad_set_id INT NOT NULL,
\end_layout

\begin_layout LyX-Code
    mse_first INT NOT NULL,
\end_layout

\begin_layout LyX-Code
    mse_last INT NOT NULL,
\end_layout

\begin_layout LyX-Code
    PRIMARY KEY (monad_set_id, mse_first)
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Subsection
Explanation
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset


\family typewriter
monad_sets
\family default

\begin_inset Quotes erd
\end_inset

 table is for storing monad set IDs (built from the 
\begin_inset Quotes eld
\end_inset

sequence_2
\begin_inset Quotes erd
\end_inset

 table, i.e., from the SEQUENCE_OTHER_IDS sequence) and monad set names.
 The 
\begin_inset Quotes eld
\end_inset


\family typewriter
monad_sets_monad
\family default

\begin_inset Quotes erd
\end_inset

 table is for storing the actual monad sets, mse by mse.
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
As an example, consider the following tables:
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
monad_set_id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
monad_set_name
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
131072
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pentateuch
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
196608
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
My_book_collection
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
monad_set_id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mse_first
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mse_last
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
131072
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
113226
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
196608
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
52547
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
196608
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
176800
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
212900
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
196608
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
394700
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
430154
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

Pentateuch
\begin_inset Quotes erd
\end_inset

 monad-set consists of the monads { 1-113226 }, whereas the 
\begin_inset Quotes eld
\end_inset

My_book_collection
\begin_inset Quotes erd
\end_inset

 monad-set consists of the monads { 1-52547, 176800-212900, 394700-430154
 }.
\end_layout

\begin_layout Chapter
Object_dm data
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
In this chapter, I describe the tables needed for each object type.
 
\end_layout

\begin_layout Standard
There are three basic schemas for object types.
 The first is valid when the object type has been declared WITH MULTIPLE
 RANGE OBJECTS, or hasn't been given any RANGE declaration.
 The second is valid when the object type has been declared WITH SINGLE
 RANGE OBJECTS.
 The third is valid when the object type has been delcared WITH SINGLE MONAD
 OBJECTS.
\end_layout

\begin_layout Standard
In all three cases, the only table involved is:
\end_layout

\begin_layout Itemize
OT_objects
\end_layout

\begin_layout Standard
An object type that has been declared WITH SINGLE RANGE OBJECTS can only
 hold objects that consist of a single monad span, i.e., a single monad set
 element, from A to B.
 An object type that has been declaed WITH SINGLE MONAD OBJECTS can only
 hold objects that are singleton sets (i.e., have only 1 monad in their monad
 set).
 An object that has been declared WITH MULTIPLE RANGE OBJECTS can hold arbitrary
 monad sets.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

range types
\begin_inset Quotes erd
\end_inset

 just described have a bearing on 
\emph on
which
\emph default
 fields are present.
 There is an additional distinction, namely 
\begin_inset Quotes eld
\end_inset

WITHOUT UNIQUE MONADS
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

HAVING UNIQUE FIRST MONADS
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

HAVING UNIQUE FIRST AND LAST MONADS
\begin_inset Quotes erd
\end_inset

 .
 This distinction has a bearing on what the primary key is:
\end_layout

\begin_layout Enumerate
If 
\begin_inset Quotes eld
\end_inset

WITHOUT UNIQUE MONADS
\begin_inset Quotes erd
\end_inset

 is specified (or none of these three is specified), then the primary key
 will be the object_id_d.
 This means that there is no restriction on the uniqueness of the first
 (and last) monads.
\end_layout

\begin_layout Enumerate
If 
\begin_inset Quotes eld
\end_inset

HAVING UNIQUE FIRST MONADS
\begin_inset Quotes erd
\end_inset

 is specified, then the primary key is first_monad.
 This means that the user promises never to create any two objects with
 this object type which have the same first monad.
 Objects need not be unique in their first monads across object types: It
 is only within an object type that this needs to hold.
\end_layout

\begin_layout Enumerate
If 
\begin_inset Quotes eld
\end_inset

HAVING UNIQUE FIRST AND LAST MONADS
\begin_inset Quotes erd
\end_inset

 is specified, then the primary key is (first_monad, last_monad).
 This means that the user promises never to create any two objects with
 this object type which have the same first and the same last monads, regardless
 of whether the two objects have the same monad set or not.
\end_layout

\begin_layout Standard
If a STRING or ASCII feature is declared 
\begin_inset Quotes eld
\end_inset

FROM SET
\begin_inset Quotes erd
\end_inset

, then a special table is created for that feature:
\end_layout

\begin_layout Itemize
OT_mdf_FEATURE_NAME_set
\end_layout

\begin_layout Standard
This is described in Section 
\begin_inset CommandInset ref
LatexCommand vref
reference "OT_mdf_FEATURE_NAME_set"

\end_inset

.
\end_layout

\begin_layout Section
OT_objects
\end_layout

\begin_layout Subsection
SQL template
\end_layout

\begin_layout LyX-Code
CREATE TABLE OT_objects(
\end_layout

\begin_layout LyX-Code
    object_id_d INTEGER PRIMARY KEY NOT NULL,
\end_layout

\begin_layout LyX-Code
    -- first_monad is always there
\end_layout

\begin_layout LyX-Code
    first_monad INT NOT NULL,
\end_layout

\begin_layout LyX-Code
    -- last_monad is not there for WITH SINGLE MONAD OBJECTS
\end_layout

\begin_layout LyX-Code
    last_monad INT NOT NULL, 
\end_layout

\begin_layout LyX-Code
    -- monads is not there except for WITH MULTIPLE RANGE
\end_layout

\begin_layout LyX-Code
    monads TEXT NOT NULL,  OBJECTS
\end_layout

\begin_layout LyX-Code
    [ ...
 list of stored features ...
 ]
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout Subsection
Explanation
\end_layout

\begin_layout Standard
This table is the master table for storing objects of type OT.
 For each object, the following are given:
\end_layout

\begin_layout Enumerate
The object id_d (
\begin_inset Quotes eld
\end_inset

object_id_d
\begin_inset Quotes erd
\end_inset

),
\end_layout

\begin_layout Enumerate
The first monad, for easy reference (
\begin_inset Quotes eld
\end_inset

first_monad
\begin_inset Quotes erd
\end_inset

),
\end_layout

\begin_layout Enumerate
The last monad, for easy reference (
\begin_inset Quotes eld
\end_inset

last_monad
\begin_inset Quotes erd
\end_inset

), and
\end_layout

\begin_layout Enumerate
The monad-set, encoded in a special way (see below).
\end_layout

\begin_layout Enumerate
Values for all of the stored features of the object.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

object_id_d
\begin_inset Quotes erd
\end_inset

 attribute is either auto-generated from the 
\begin_inset Quotes eld
\end_inset

sequence_0
\begin_inset Quotes erd
\end_inset

 table, i.e., using the SEQUENCE_OBJECT_ID_DS sequence, or it is explicitly
 given.
 The 
\begin_inset Quotes eld
\end_inset

object_id_d
\begin_inset Quotes erd
\end_inset

 attribute is also the source for the special, read-only feature 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Quotes erd
\end_inset

 that is on each object_dm type.
\end_layout

\begin_layout Standard
The reason why the first and last monads are here will become apparent when
 we discuss how to implement MQL queries.
\end_layout

\begin_layout Standard
The last_monad column is not present if the object type has been declared
 WITH SINGLE MONAD OBJECTS.
 The monads column is only present when the object type has been declared
 WITH SINGLE RANGE OBJECTS or WITH MULTIPLE RANGE OBJECTS.
\end_layout

\begin_layout Standard
The types of the stored features are given in Table 
\begin_inset CommandInset ref
LatexCommand vref
reference "table:EMdF-to-SQL-type-correspondence"

\end_inset

.
\end_layout

\begin_layout Standard
Note that ASCII, STRING, and lists are stored as the SQL_TEXT_TYPE, which
 varies between the backends.
 It is basically a long string.
 For lists, the value is a space-surrounded, space-delimited list of integers.
 For example, the list (1,2,3) would be represented as:
\end_layout

\begin_layout LyX-Code
' 1 2 3 '
\end_layout

\begin_layout Standard
This makes for searching with LIKE '% 1 %' and the like.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EMdF type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SQL type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Comment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INTEGER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INTEGER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32-bit integer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ID_D
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INTEGER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32-bit integer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ASCII
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SQL_TEXT_TYPE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
STRING
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SQL_TEXT_TYPE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Enumeration constants
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INTEGER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32-bit integer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List of INTEGER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SQL_TEXT_TYPE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List of ID_D
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SQL_TEXT_TYPE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List of Enumeration constants
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SQL_TEXT_TYPE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
SQL types corresponding to EMdF types
\begin_inset CommandInset label
LatexCommand label
name "table:EMdF-to-SQL-type-correspondence"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
In table 
\begin_inset CommandInset ref
LatexCommand ref
reference "EXAMPLE_OF_OT_OBJECTS"

\end_inset

, I have listed four objects of type Phrase.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement htbp
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object_id_d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
first_monad
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
last_monad
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
phrase_type
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
201
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
202
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
203
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
203
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Example of OT_Objects (Phrase_Objects) 
\begin_inset CommandInset label
LatexCommand label
name "EXAMPLE_OF_OT_OBJECTS"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Monad set encoding
\end_layout

\begin_layout Standard
The monad set encoding (in column OT_objects.monads) stores an arbitrary
 monad set efficiently, as a text-string.
 The format is as follows:
\end_layout

\begin_layout Enumerate
Each number is stored in a base-64 encoding that is described below.
\end_layout

\begin_layout Enumerate
The monad set is seen as a series of numbers.
 The current number is stored as the difference between the actual number
 and the preview number (where the previous number is defined as 0 for the
 first number).
\end_layout

\begin_layout Enumerate
The separator between monad set elements is the character 'y'.
 Thus the monad set element chain is a 'y'-separated list of monad set elements.
\end_layout

\begin_layout Enumerate
Singleton monad set elements are just stored as that single number.
\end_layout

\begin_layout Enumerate
Non-singleton monad set elements are stored as two numbers with the character
 'z' in between.
\end_layout

\begin_layout Standard
The base-64 encoding will be explained below.
 For now, let me give an example to illustrate the principles above.
\end_layout

\begin_layout Standard
The monad-set { 1-3, 5, 7-10 } would, if we were using base-10 to store
 the numbers, be stored as 
\begin_inset Quotes eld
\end_inset

1z2y2y2z3
\begin_inset Quotes erd
\end_inset

.
 Let us break this down.
 There are three monad-set elements: 
\begin_inset Quotes eld
\end_inset

1z2
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

2
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

2z3
\begin_inset Quotes erd
\end_inset

.
 The first translates to 
\begin_inset Quotes eld
\end_inset

1-3
\begin_inset Quotes erd
\end_inset

 because 1+2 = 3 (taking the previous 
\begin_inset Quotes eld
\end_inset

1
\begin_inset Quotes erd
\end_inset

 and adding 
\begin_inset Quotes eld
\end_inset

2
\begin_inset Quotes erd
\end_inset

 makes 
\begin_inset Quotes eld
\end_inset

3
\begin_inset Quotes erd
\end_inset

).
 The second translates to 
\begin_inset Quotes eld
\end_inset

5
\begin_inset Quotes erd
\end_inset

 because the previous was 3, and when we add 2, we get 5.
 The third monad set element translates to 
\begin_inset Quotes eld
\end_inset

7-10
\begin_inset Quotes erd
\end_inset

 because 
\begin_inset Quotes eld
\end_inset

5+2=7
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

7+3=10
\begin_inset Quotes erd
\end_inset

 (again taking the previous number and adding the current number).
\end_layout

\begin_layout Standard
The base-64 encoding is very straightforward: The 32-bit number is broken
 down into 5 6-bit chunks and one 2-bit chunk (the 2 most significant bits).
 Starting from the chunk that has the most significant non-null bit, each
 chunk is written as the 6-bit value plus 48 (i.e., ASCII '0').
 Thus the above set would be written as exactly 
\begin_inset Quotes eld
\end_inset

1z2y2y2z3
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Section
OT_mdf_FEATURE_NAME_set
\begin_inset CommandInset label
LatexCommand label
name "OT_mdf_FEATURE_NAME_set"

\end_inset


\end_layout

\begin_layout Subsection
SQL template
\end_layout

\begin_layout LyX-Code
-- This is optimized for finding string
\end_layout

\begin_layout LyX-Code
-- string values from id_ds (for
\end_layout

\begin_layout LyX-Code
-- querying.)
\end_layout

\begin_layout LyX-Code
CREATE TABLE OT_mdf_FEATURE_NAME_set (
\end_layout

\begin_layout LyX-Code
   id_d INTEGER PRIMARY KEY NOT NULL,
\end_layout

\begin_layout LyX-Code
   string_value TEXT NOT NULL
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
-- This is so we can also quickly
\end_layout

\begin_layout LyX-Code
-- find id_ds from string values
\end_layout

\begin_layout LyX-Code
-- (for inserting/updating)
\end_layout

\begin_layout LyX-Code
CREATE INDEX OT_mdf_FEATURE_NAME_set_i
\end_layout

\begin_layout LyX-Code
ON OT_mdf_FEATURE_NAME_set
\end_layout

\begin_layout LyX-Code
(string_value)
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsection
Explanation
\end_layout

\begin_layout Standard
If a STRING or ASCII feature of an object type is declared 
\begin_inset Quotes eld
\end_inset

FROM SET
\begin_inset Quotes erd
\end_inset

, this table will be created.
 Any strings which are assigned to this feature of an object when it is
 created or updated will be drawn from this table.
 Instead of storing the string in the feature, the id_d is stored instead.
 This gives a space savings, and often also a time savings, especially on
 MySQL and PostgreSQL.
 SQLite and SQLite3 may see no difference, or even worse performance.
 However, FROM SET should only be used with data sets which have low cardinality.
 The declaration should not be used with, e.g., 
\begin_inset Quotes eld
\end_inset

surface
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

lemma
\begin_inset Quotes erd
\end_inset

, since they are likely to have a large number of individual values.
 Better candidates would be 
\begin_inset Quotes eld
\end_inset

case
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

number
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

gender
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

part of speech
\begin_inset Quotes erd
\end_inset

, etc., since they usually have low cardinality.
 Thus FROM SET should be seen as a way of getting the same effect as an
 enumeration, but with arbitrary strings instead of C identifiers as enumeration
 constants.
\end_layout

\begin_layout Standard
When an object is created or updated, and the object type to which it belongs
 has a STRING or ASCII feature which is declared 
\begin_inset Quotes eld
\end_inset

FROM SET
\begin_inset Quotes erd
\end_inset

, then this table is consulted to see if the string exists in it already.
 If it does not, then it is added, and an id_d is assigned from the SEQUENCE_OTH
ER_ID_DS sequence.
 Then that id_d is used in the in lieu of the string in the object's feature.
 If the string does exist in this table, the id_d from that row is used.
\end_layout

\begin_layout Standard
Note that features of type ID_D, INTEGER, and ENUM cannot be declared 
\begin_inset Quotes eld
\end_inset

FROM SET
\begin_inset Quotes erd
\end_inset

.
 This is because it makes no sense: There is no space savings, and certainly
 no time savings, since in all these cases, the integer can be stored directly.
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
NOTE: the following example uses FROM SET with a 
\begin_inset Quotes eld
\end_inset

surface
\begin_inset Quotes erd
\end_inset

 feature 
\emph on
against
\emph default
 the recommendation used above.
\end_layout

\begin_layout LyX-Code
CREATE OBJECT TYPE [Word surface : STRING FROM SET;]
\end_layout

\begin_layout Standard
word_mdf_surface_set:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
id_d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string_value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
22
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
horse
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
is
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
horse.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
word_objects (
\begin_inset Quotes eld
\end_inset

A horse is a horse is a horse.
\begin_inset Quotes erd
\end_inset

):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object_id_d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
first_monad
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mdf_surface
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
22
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
22
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Chapter
Implementing the MQL commands
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
In this chapter, I treat all of the commands of the new MQL and show in
 some detail how they can be implemented using fragments of SQL.
 I follow the structure of chapter 2 of 
\begin_inset Quotes eld
\end_inset

Towards a new MQL.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Section
Database manipulation
\end_layout

\begin_layout Subsection
CREATE DATABASE
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Standard
The following needs to be done when creating a database:
\end_layout

\begin_layout Enumerate
Create the physical database in the server.
\end_layout

\begin_layout Enumerate
Create and initialize the 
\begin_inset Quotes eld
\end_inset

schema_version
\begin_inset Quotes erd
\end_inset

 table.
\end_layout

\begin_layout Enumerate
Create and initialize the 
\begin_inset Quotes eld
\end_inset

sequence_0
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

sequence_1
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

sequence_2
\begin_inset Quotes erd
\end_inset

 tables.
\end_layout

\begin_layout Enumerate
Create the 
\begin_inset Quotes eld
\end_inset

enumerations
\begin_inset Quotes erd
\end_inset

 table.
\end_layout

\begin_layout Enumerate
Create the 
\begin_inset Quotes eld
\end_inset

enumeration_constants
\begin_inset Quotes erd
\end_inset

 table.
\end_layout

\begin_layout Enumerate
Create the 
\begin_inset Quotes eld
\end_inset

object_types
\begin_inset Quotes erd
\end_inset

 table.
\end_layout

\begin_layout Enumerate
Create the 
\begin_inset Quotes eld
\end_inset

features
\begin_inset Quotes erd
\end_inset

 table.
\end_layout

\begin_layout Enumerate
Create the 
\begin_inset Quotes eld
\end_inset

monad_sets
\begin_inset Quotes erd
\end_inset

 table.
\end_layout

\begin_layout Enumerate
Create the 
\begin_inset Quotes eld
\end_inset

monad_sets_monads
\begin_inset Quotes erd
\end_inset

 table.
\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout Standard
The SQL to do the above is as follows (in one transaction):
\end_layout

\begin_layout LyX-Code
CREATE DATABASE { database_name }
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE TABLE schema_version (
\end_layout

\begin_layout LyX-Code
    dummy_id INTEGER PRIMARY KEY NOT NULL,
\end_layout

\begin_layout LyX-Code
    schema_version INT NOT NULL
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
INSERT INTO schema_version (dummy_id, schema_version)
\end_layout

\begin_layout LyX-Code
VALUES (0, { schema-version } );
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE TABLE sequence_0 (
\end_layout

\begin_layout LyX-Code
    sequence_id INTEGER PRIMARY KEY NOT NULL,
\end_layout

\begin_layout LyX-Code
    sequence_value INT NOT NULL
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE TABLE sequence_1 (
\end_layout

\begin_layout LyX-Code
    sequence_id INTEGER PRIMARY KEY NOT NULL,
\end_layout

\begin_layout LyX-Code
    sequence_value INT NOT NULL
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE TABLE sequence_2 (
\end_layout

\begin_layout LyX-Code
    sequence_id INTEGER PRIMARY KEY NOT NULL,
\end_layout

\begin_layout LyX-Code
    sequence_value INT NOT NULL
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
INSERT INTO sequence_0 (sequence_id, sequence_value)
\end_layout

\begin_layout LyX-Code
VALUES ( { SEQUENCES_OBJECT_ID_DS } , 1)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
INSERT INTO sequence_1 (sequence_id, sequence_value)
\end_layout

\begin_layout LyX-Code
VALUES ( { SEQUENCES_TYPE_IDS } , 1)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
INSERT INTO sequence_2 (sequence_id, sequence_value)
\end_layout

\begin_layout LyX-Code
VALUES ( { SEQUENCES_OTHER_IDS } , 1)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE TABLE enumerations (
\end_layout

\begin_layout LyX-Code
    enum_id INTEGER PRIMARY KEY NOT NULL,
\end_layout

\begin_layout LyX-Code
    enum_name VARCHAR(255) NOT NULL
\end_layout

\begin_layout LyX-Code
)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE TABLE enumeration_constants (
\end_layout

\begin_layout LyX-Code
    enum_id INT NOT NULL,
\end_layout

\begin_layout LyX-Code
    enum_value_name VARCHAR(255) NOT NULL,
\end_layout

\begin_layout LyX-Code
    value INT NOT NULL,
\end_layout

\begin_layout LyX-Code
    is_default CHAR(1) NOT NULL,
\end_layout

\begin_layout LyX-Code
    PRIMARY KEY (enum_id, enum_value_name)
\end_layout

\begin_layout LyX-Code
)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE TABLE object_types (
\end_layout

\begin_layout LyX-Code
    object_type_id INTEGER PRIMARY KEY  NOT NULL,
\end_layout

\begin_layout LyX-Code
    object_type_name VARCHAR(255) NOT NULL
\end_layout

\begin_layout LyX-Code
)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE TABLE features (
\end_layout

\begin_layout LyX-Code
    object_type_id INT NOT NULL,
\end_layout

\begin_layout LyX-Code
    feature_name VARCHAR(255) NOT NULL,
\end_layout

\begin_layout LyX-Code
    feature_type_id INT NOT NULL,
\end_layout

\begin_layout LyX-Code
    computed CHAR(1) NOT NULL DEFAULT 'N',
\end_layout

\begin_layout LyX-Code
    PRIMARY KEY (object_type_id, feature_name)
\end_layout

\begin_layout LyX-Code
)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE TABLE monad_sets (
\end_layout

\begin_layout LyX-Code
    monad_set_id INTEGER PRIMARY KEY  NOT NULL,
\end_layout

\begin_layout LyX-Code
    monad_set_name VARCHAR(255) NOT NULL
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE TABLE monad_sets_monads (
\end_layout

\begin_layout LyX-Code
    monad_set_id INT NOT NULL,
\end_layout

\begin_layout LyX-Code
    mse_first INT NOT NULL,
\end_layout

\begin_layout LyX-Code
    mse_last INT NOT NULL,
\end_layout

\begin_layout LyX-Code
    PRIMARY KEY (monad_set_id, mse_first)
\end_layout

\begin_layout LyX-Code
);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsection
USE DATABASE
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Standard
The symbol checker should check that the database exists.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Standard
How to do this will vary from database server to database server.
 I don't think it can always be done in SQL.
 On the contrary, PostgreSQL seems to couple connections tightly with databases,
 so it should rather be on a connection-level
\end_layout

\begin_layout Subsection
DROP DATABASE
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Standard
The symbol checker should check that the database exists.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
Drop the database.
 This is usually an easy DROP DATABASE statement.
\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout LyX-Code
DROP DATABASE { database_name }
\end_layout

\begin_layout Section
Object type manipulation
\end_layout

\begin_layout Subsection
CREATE OBJECT TYPE
\begin_inset CommandInset label
LatexCommand label
name "CREATE_OBJECT_TYPE"

\end_inset


\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Itemize
Check that the feature 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Quotes erd
\end_inset

 is not declared.
 
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
Check that the object type does not already exist.
 
\end_layout

\begin_layout Itemize
Check that the enumerations exist for the features whose types are enumerations.
\end_layout

\begin_layout Itemize
Check that, within these enumerations, any default specification which is
 an enumeration constant, does exist in that enumeration.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Itemize
Assign type-ID to each feature, based on the type-name.
 If it is one of the standard types, then assign its corresponding ID (see
 table 
\begin_inset CommandInset ref
LatexCommand ref
reference "FEATURE_TYPE_IDS_FOR_STANDARD_ATOMIC_TYPES"

\end_inset

).
 If it is an enumeration type, then assign the enum_id of the enumeration.
\end_layout

\begin_layout Itemize
Check that the type of each feature matches the type of any default specificatio
n.
 In doing so, provide, in the AST, a string representing the default value
 for any feature that does not have a default specification.
 It is an error to specify an integer if the type is an enumeration.
 It must be an enumeration constant.
 The reason is that we must have data integrity, and this is an easy way
 of ensuring that for enumerations.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
Create the object type in table 
\begin_inset Quotes eld
\end_inset

object_types
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Create all the tables associated with the object type (OT_objects, etc.)
\end_layout

\begin_layout Itemize
Create all the features
\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout Paragraph
Checking for (non-)existence of object type
\end_layout

\begin_layout LyX-Code
SELECT object_type_id
\end_layout

\begin_layout LyX-Code
FROM object_types
\end_layout

\begin_layout LyX-Code
WHERE object_type_name = '{ object_type_name }'
\end_layout

\begin_layout Paragraph
Checking for (non-)existence of enumeration
\end_layout

\begin_layout LyX-Code
SELECT enum_id
\end_layout

\begin_layout LyX-Code
FROM enumerations
\end_layout

\begin_layout LyX-Code
WHERE enum_name = '{ enumeration-name }'
\end_layout

\begin_layout Paragraph
Checking for (non-)existence of enumeration constant
\end_layout

\begin_layout LyX-Code
SELECT enum_value_name
\end_layout

\begin_layout LyX-Code
FROM enumeration_constants EC, enumerations E
\end_layout

\begin_layout LyX-Code
WHERE EC.enum_value_name = '{ enumeration-constant-name }'
\end_layout

\begin_layout LyX-Code
      AND EC.enum_id = E.enum_id 
\end_layout

\begin_layout LyX-Code
      AND E.enum_name = '{ enumeration-name }'
\end_layout

\begin_layout Paragraph
Creating the object type
\end_layout

\begin_layout LyX-Code
INSERT INTO object_types (object_type_id, object_type_name)
\end_layout

\begin_layout LyX-Code
VALUES ( { auto-generated id }, { object_type_name } )
\end_layout

\begin_layout Paragraph
Creating the tables associated with the object type
\end_layout

\begin_layout LyX-Code
CREATE TABLE OT_objects(
\end_layout

\begin_layout LyX-Code
    object_id_d INTEGER PRIMARY KEY NOT NULL,
\end_layout

\begin_layout LyX-Code
    first_monad INT NOT NULL,
\end_layout

\begin_layout LyX-Code
    last_monad INT NOT NULL,
\end_layout

\begin_layout LyX-Code
    monads TEXT NOT NULL,
\end_layout

\begin_layout LyX-Code
    [ ...
 list of stored features ...
 ]
\end_layout

\begin_layout LyX-Code
)
\end_layout

\begin_layout Paragraph
Creating all the features
\end_layout

\begin_layout Standard
For each feature:
\end_layout

\begin_layout LyX-Code
INSERT INTO features (
\end_layout

\begin_layout LyX-Code
    object_type_id,
\end_layout

\begin_layout LyX-Code
    feature_name,
\end_layout

\begin_layout LyX-Code
    feature_type_id,
\end_layout

\begin_layout LyX-Code
    default_value,
\end_layout

\begin_layout LyX-Code
    computed
\end_layout

\begin_layout LyX-Code
)
\end_layout

\begin_layout LyX-Code
VALUES (
\end_layout

\begin_layout LyX-Code
    { object_type_id : from the creation of the object type },
\end_layout

\begin_layout LyX-Code
    { feature_name : feature_name },
\end_layout

\begin_layout LyX-Code
    { feature_type_id : taken from AST },
\end_layout

\begin_layout LyX-Code
    { default_value : string from AST },
\end_layout

\begin_layout LyX-Code
    { computed : 'Y'/'N' based on the presence or
\end_layout

\begin_layout LyX-Code
                 absence of the T_KEY_COMPUTED keyword}
\end_layout

\begin_layout LyX-Code
)
\end_layout

\begin_layout Subsection
UPDATE OBJECT TYPE
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Itemize
Check that the feature 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Quotes erd
\end_inset

 is neither added nor removed.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
Check that the object type already exists.
 In doing so, store the object type_id somewhere in the AST.
\end_layout

\begin_layout Itemize
Check that all the features that are to be removed do exist.
 
\end_layout

\begin_layout Itemize
Check that all the features that are to be added do not exist.
\end_layout

\begin_layout Itemize
Check that the enumerations exist for the new features whose types are enumerati
ons.
\end_layout

\begin_layout Itemize
Check that, within these enumerations, any default specification which is
 an enumeration constant, does exist in that enumeration.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Itemize
Assign type-ID to each feature that is to be added, based on the type-name.
 If it is one of the standard types, then assign its corresponding ID (see
 table 
\begin_inset CommandInset ref
LatexCommand ref
reference "FEATURE_TYPE_IDS_FOR_STANDARD_ATOMIC_TYPES"

\end_inset

).
 If it is an enumeration type, then assign the enum_id of the enumeration.
\end_layout

\begin_layout Itemize
Check that the type of each feature matches the type of any default specificatio
n.
 In doing so, provide, in the AST, a string representing the default value,
 both for those feature additions that do and those that don't have a default
 specification.
 It is an error to specify an integer if the type is an enumeration.
 It must be an enumeration constant.
 The reason is that we must have data integrity, and this is an easy way
 of ensuring that for enumerations.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
Add the features that are to be added.
\end_layout

\begin_layout Itemize
Remove the features that are to be removed.
\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout Paragraph
Checking for (non-)existence of a feature
\end_layout

\begin_layout LyX-Code
SELECT feature_type_id, default_value, computed
\end_layout

\begin_layout LyX-Code
FROM features
\end_layout

\begin_layout LyX-Code
WHERE object_type_id = { object type_id }
\end_layout

\begin_layout LyX-Code
      AND feature_name = '{ feature-name }'
\end_layout

\begin_layout Paragraph
Adding a feature to the OT_objects table
\end_layout

\begin_layout LyX-Code
ALTER TABLE OT_objects ADD { encoded feature-name } 
\end_layout

\begin_layout LyX-Code
      { SQL-type } NOT NULL
\end_layout

\begin_layout Paragraph
Removing a feature from the OT_objects table
\end_layout

\begin_layout LyX-Code
ALTER TABLE OT_objects DROP { encoded feature-name }
\end_layout

\begin_layout Paragraph
Removing a feature from the features table
\end_layout

\begin_layout LyX-Code
DELETE FROM features
\end_layout

\begin_layout LyX-Code
WHERE object_type_id = { object type_id }
\end_layout

\begin_layout LyX-Code
      AND feature_name = '{ feature-name }'
\end_layout

\begin_layout Subsection
DROP OBJECT TYPE
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
Check that the object type exists.
 In doing so, it should store the object type id in the AST.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
Drop all the tables associated with the object type.
\end_layout

\begin_layout Itemize
Delete all features associated with the object type.
\end_layout

\begin_layout Itemize
Delete the object type from the 
\begin_inset Quotes eld
\end_inset

object_types
\begin_inset Quotes erd
\end_inset

 table.
\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout LyX-Code
DROP TABLE OT_objects
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
DELETE FROM features
\end_layout

\begin_layout LyX-Code
WHERE object_type_id = { object type_id from AST }
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
DELETE FROM object_types
\end_layout

\begin_layout LyX-Code
WHERE object_type_id = { object type_id from AST }
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section
Enumeration manipulation
\end_layout

\begin_layout Subsection
CREATE ENUMERATION
\begin_inset CommandInset label
LatexCommand label
name "CREATE_ENUMERATION"

\end_inset


\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Itemize
Check that at most one 
\begin_inset Quotes eld
\end_inset


\family typewriter
ec_declaration
\family default

\begin_inset Quotes erd
\end_inset

 has the 
\begin_inset Quotes eld
\end_inset

DEFAULT
\begin_inset Quotes erd
\end_inset

 keyword, and set a boolean for each member of the list of declarations
 saying whether it is the default or not.
 If none has the 
\begin_inset Quotes eld
\end_inset

DEFAULT
\begin_inset Quotes erd
\end_inset

 keyword, then set the boolean of the first item in the list to 
\begin_inset Quotes eld
\end_inset

true.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
Check that no other enumeration by the same name exists already.
\end_layout

\begin_layout Itemize
Check that no enumeration constant already exists by the name given in any
 of the ec-declarations.
\end_layout

\begin_layout Itemize
Assign a value in the AST to each ec-declaration, either based on its position
 in the sequence, or based on its initialization.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
Create the enumeration using an autogenerated ID.
\end_layout

\begin_layout Itemize
Add all the enumeration constants to the table.
\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout Paragraph
Creating the enumeration
\end_layout

\begin_layout LyX-Code
INSERT INTO enumerations (enum_id, enum_name)
\end_layout

\begin_layout LyX-Code
VALUES ( { auto-generated id }, { name } }
\end_layout

\begin_layout Paragraph
Add an enumeration constant
\end_layout

\begin_layout LyX-Code
INSERT INTO enumeration_constants (
\end_layout

\begin_layout LyX-Code
    enum_id,
\end_layout

\begin_layout LyX-Code
    enum_value_name,
\end_layout

\begin_layout LyX-Code
    value,
\end_layout

\begin_layout LyX-Code
    is_default
\end_layout

\begin_layout LyX-Code
)
\end_layout

\begin_layout LyX-Code
VALUES (
\end_layout

\begin_layout LyX-Code
    { enum_id : The auto-generated id used to create the enum },
\end_layout

\begin_layout LyX-Code
    { enum_value_name : ec-name },
\end_layout

\begin_layout LyX-Code
    { value : ec-value},
\end_layout

\begin_layout LyX-Code
    { is_default : 'Y'/'N' }
\end_layout

\begin_layout LyX-Code
)
\end_layout

\begin_layout Subsection
UPDATE ENUMERATION
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Itemize
Check that at most one enumeration-constant update has the 
\begin_inset Quotes eld
\end_inset

DEFAULT
\begin_inset Quotes erd
\end_inset

 keyword, and set a boolean for each member of the list of updates saying
 whether it is the default or not.
 If none has the 
\begin_inset Quotes eld
\end_inset

DEFAULT
\begin_inset Quotes erd
\end_inset

 keyword, then none of these booleans should be true.
 Either set a boolean in the top-level AST node of the MQL statement, or
 provide a function which lets one know, whether one of the additions or
 updates has the 
\begin_inset Quotes eld
\end_inset

DEFAULT
\begin_inset Quotes erd
\end_inset

 keyword.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
Check that the enumeration exists already.
\end_layout

\begin_layout Itemize
Check that for all additions, the enumeration constants added do not exist
 already.
\end_layout

\begin_layout Itemize
Check that, for all updates, the enumeration constants updated already exist.
\end_layout

\begin_layout Itemize
Check that all constants being removed do exist.
\end_layout

\begin_layout Itemize
Check whether the current default is being removed.
 If it is, then another default should be specified, either as an update
 or as an addition (use the boolean or function mentioned under 
\begin_inset Quotes eld
\end_inset

weeder
\begin_inset Quotes erd
\end_inset

 above).
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
Remove all the constants being removed.
\end_layout

\begin_layout Itemize
Add all the constants being added.
\end_layout

\begin_layout Itemize
Update all the constants being updated.
\end_layout

\begin_layout Itemize
If there was a new specification of the 
\begin_inset Quotes eld
\end_inset

DEFAULT
\begin_inset Quotes erd
\end_inset

 constant:
\end_layout

\begin_deeper
\begin_layout Itemize
Remove the 
\begin_inset Quotes eld
\end_inset


\family typewriter
is_default
\family default

\begin_inset Quotes erd
\end_inset

 status from the current default.
\end_layout

\begin_layout Itemize
Update the new default constant so that it 
\begin_inset Quotes eld
\end_inset


\family typewriter
is_default
\family default

\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_deeper
\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout Paragraph
Checking which is the default enumeration constant
\end_layout

\begin_layout LyX-Code
SELECT enum_value_name
\end_layout

\begin_layout LyX-Code
FROM enumeration_constants
\end_layout

\begin_layout LyX-Code
WHERE enum_id = { enumeration-id }
\end_layout

\begin_layout LyX-Code
      AND is_default = 'Y'
\end_layout

\begin_layout Paragraph
Checking for the (non)-existence of an enumeration
\end_layout

\begin_layout Standard
See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "CREATE_OBJECT_TYPE"

\end_inset

.
\end_layout

\begin_layout Paragraph
Checking for the (non)-existence of an enumeration constant
\end_layout

\begin_layout Standard
See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "CREATE_OBJECT_TYPE"

\end_inset

.
\end_layout

\begin_layout Paragraph
Removing a constant
\end_layout

\begin_layout LyX-Code
DELETE 
\end_layout

\begin_layout LyX-Code
FROM enumeration_constants
\end_layout

\begin_layout LyX-Code
WHERE enum_id = { enumeration-id }
\end_layout

\begin_layout LyX-Code
      AND enum_value_name = { name of constant to delete }
\end_layout

\begin_layout Paragraph
Adding a constant
\end_layout

\begin_layout Standard
See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "CREATE_ENUMERATION"

\end_inset

.
\end_layout

\begin_layout Paragraph
Updating a constant
\end_layout

\begin_layout LyX-Code
UPDATE enumeration_constants
\end_layout

\begin_layout LyX-Code
SET value = { new value }
\end_layout

\begin_layout LyX-Code
WHERE enum_id = { enumeration-id }
\end_layout

\begin_layout LyX-Code
      AND enum_value_name = { name of constant to update }
\end_layout

\begin_layout Paragraph
Removing the 
\begin_inset Quotes eld
\end_inset

is_default
\begin_inset Quotes erd
\end_inset

 status from the current default
\end_layout

\begin_layout LyX-Code
UPDATE enumeration_constants
\end_layout

\begin_layout LyX-Code
SET is_default = 'N'
\end_layout

\begin_layout LyX-Code
WHERE enum_id = { enumeration-id }
\end_layout

\begin_layout Paragraph
Set the new default
\end_layout

\begin_layout LyX-Code
UPDATE enumeration_constants
\end_layout

\begin_layout LyX-Code
SET is_default = 'Y'
\end_layout

\begin_layout LyX-Code
WHERE enum_id = { enumeration-id }
\end_layout

\begin_layout LyX-Code
      AND enum_value_name = { name of new default }
\end_layout

\begin_layout Subsection
DROP ENUMERATION
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
Check that the enumeration does exist.
 In doing so, store the 
\begin_inset Quotes eld
\end_inset

enum_id
\begin_inset Quotes erd
\end_inset

 of the enumeration in the AST.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
Remove all the enumeration constants associated with the enumeration from
 table 
\begin_inset Quotes eld
\end_inset

enumeration_constants
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Remove the enumeration itself from table 
\begin_inset Quotes eld
\end_inset

enumerations
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout Paragraph
Checking that the enumeration exists
\end_layout

\begin_layout Standard
See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "CREATE_OBJECT_TYPE"

\end_inset

.
\end_layout

\begin_layout Paragraph
Removing all enumeration constants associated with the enumeration
\end_layout

\begin_layout LyX-Code
DELETE
\end_layout

\begin_layout LyX-Code
FROM enumeration_constants
\end_layout

\begin_layout LyX-Code
WHERE enum_id = { enumeration-id }
\end_layout

\begin_layout Paragraph
Removing the enumeration itself
\end_layout

\begin_layout LyX-Code
DELETE
\end_layout

\begin_layout LyX-Code
FROM enumerations
\end_layout

\begin_layout LyX-Code
WHERE enum_id = { enumeration-id }
\end_layout

\begin_layout Section
Segment manipulation
\end_layout

\begin_layout Subsection
CREATE SEGMENT
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Itemize
Check that the range is monotonic, i.e., that the second integer is greater
 than or equal to the first integer.
\end_layout

\begin_layout Itemize
Check that the range consists of positive numbers.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
Currently, nothing.
 In the future: Add as a single-range monad set.
\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout Standard
None.
\end_layout

\begin_layout Section
Querying
\end_layout

\begin_layout Subsection
SELECT OBJECTS
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Itemize
Check everything as described in the 
\begin_inset Quotes eld
\end_inset

MQL query-subset
\begin_inset Quotes erd
\end_inset

 document.
\end_layout

\begin_layout Itemize
Check that the monad set in the AST consists of only positive, monotonic
 ranges.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
Check everything as described in the 
\begin_inset Quotes eld
\end_inset

MQL query-subset
\begin_inset Quotes erd
\end_inset

 document.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Itemize
Check everything as described in the 
\begin_inset Quotes eld
\end_inset

MQL query-subset
\begin_inset Quotes erd
\end_inset

 document.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Itemize
Build the monad set of the 
\begin_inset Quotes eld
\end_inset

IN
\begin_inset Quotes erd
\end_inset

 clause, if it is there.
 Store the monad set in the AST.
 If it isn't there, store 
\begin_inset Quotes eld
\end_inset

1..MAX_MONAD.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Standard
This should follow the retrieval functions given in the 
\begin_inset Quotes eld
\end_inset

MQL Query subset
\begin_inset Quotes erd
\end_inset

 document.
 Below I list some of the SQL fragments which are needed for implementing
 these functions.
\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout Paragraph
Getting inst(T,U)
\end_layout

\begin_layout LyX-Code
SELECT object_id_d
\end_layout

\begin_layout LyX-Code
FROM OT_objects
\end_layout

\begin_layout LyX-Code
WHERE { U.first() } <= first_monad 
\end_layout

\begin_layout LyX-Code
      AND last_monad <= { U.last() }
\end_layout

\begin_layout Paragraph
Retrieve features from an object
\end_layout

\begin_layout LyX-Code
SELECT { feature-names }
\end_layout

\begin_layout LyX-Code
FROM OT_objects
\end_layout

\begin_layout LyX-Code
WHERE object_id_d = { object id_d }
\end_layout

\begin_layout Subsection
SELECT OBJECTS AT
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Itemize
Check that the integer is positive.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
Check that the object type exists.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Standard
Just asks the SQL database.
\end_layout

\begin_layout Subsection
SELECT OBJECT TYPES
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Standard
Just asks the SQL database.
\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout Paragraph
Asking for the object types available
\end_layout

\begin_layout LyX-Code
SELECT object_type_name
\end_layout

\begin_layout LyX-Code
FROM object_types
\end_layout

\begin_layout Subsection
SELECT FEATURES
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
Check that the object type actually exists.
 In doing so, store its object type_id in the AST.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
Ask the database server for the answer.
\end_layout

\begin_layout Itemize
Translate feature type_ids to strings.
 Only for enumeration constants does this involve querying the database.
\end_layout

\begin_layout Itemize
Translate the 
\begin_inset Quotes eld
\end_inset

computed
\begin_inset Quotes erd
\end_inset

 `Y'/`N' boolean to a real boolean.
\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout Paragraph
Asking for the features of an object type
\end_layout

\begin_layout LyX-Code
SELECT feature_name, feature_type_id, default_value, computed
\end_layout

\begin_layout LyX-Code
FROM features
\end_layout

\begin_layout LyX-Code
WHERE object_type_id = { object type_id }
\end_layout

\begin_layout Paragraph
Translating feature type_ids to strings
\end_layout

\begin_layout LyX-Code
SELECT enum_name
\end_layout

\begin_layout LyX-Code
FROM enumerations
\end_layout

\begin_layout LyX-Code
WHERE enum_id = { feature type_id }
\end_layout

\begin_layout Subsection
SELECT ENUMERATIONS
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
Just ask the database server.
\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout Paragraph
Asking for the enumerations available
\end_layout

\begin_layout LyX-Code
SELECT enum_name
\end_layout

\begin_layout LyX-Code
FROM enumerations
\end_layout

\begin_layout Subsection
SELECT ENUMERATION CONSTANTS
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
Check that the enumeration actually exists.
 In doing so, store the enum_id in the AST.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
Ask the database server for the answer.
\end_layout

\begin_layout Itemize
Convert the value to an integer and the 
\begin_inset Quotes eld
\end_inset


\family typewriter
is_default
\family default

\begin_inset Quotes erd
\end_inset

 `Y'/`N' boolean to a real boolean.
\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout Paragraph
Asking for the enumeration constants of an enumeration
\end_layout

\begin_layout LyX-Code
SELECT enum_value_name, value, is_default
\end_layout

\begin_layout LyX-Code
FROM enumeration_constants
\end_layout

\begin_layout LyX-Code
WHERE enum_id = { enumeration id from AST }
\end_layout

\begin_layout Subsection
SELECT OBJECT TYPES USING ENUMERATION 
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
Check that the enumeration exists.
 In doing so, store its enum_id in the AST.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
Ask the database server for the answer
\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout LyX-Code
SELECT object_type_name
\end_layout

\begin_layout LyX-Code
FROM object_types
\end_layout

\begin_layout LyX-Code
WHERE object_type_id IN
\end_layout

\begin_layout LyX-Code
   (SELECT object_type_id
\end_layout

\begin_layout LyX-Code
    FROM features
\end_layout

\begin_layout LyX-Code
    WHERE feature_type_id = { enumeration id }
\end_layout

\begin_layout LyX-Code
   )
\end_layout

\begin_layout Section
Object manipulation
\end_layout

\begin_layout Subsection
CREATE OBJECT FROM MONADS
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Itemize
Check that 
\begin_inset Quotes eld
\end_inset


\family typewriter
object_type_name
\family default

\begin_inset Quotes erd
\end_inset

 is neither all_m, nor any_m, nor pow_m.
\end_layout

\begin_layout Itemize
Check that the feature 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Quotes erd
\end_inset

 is not assigned a value.
\end_layout

\begin_layout Itemize
Check that all the ranges of monads are positive and monotonic.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
If the user specified an id_d, check that this id_d is not in use already.
\end_layout

\begin_layout Itemize
Check that the object type exists.
 In doing so, store its object type_id in the AST.
\end_layout

\begin_layout Itemize
Check that no feture is assigned which the object type does not have.
\end_layout

\begin_layout Itemize
Make sure that all features are given a value.
 If a feature is not given a value, then use the default value.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Itemize
Assign a type to each feature-assignment.
\end_layout

\begin_layout Itemize
Check for type-compatibility.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Itemize
Build the set of monads from the monads in the AST.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
If the user did not specify an id_d, autogenerate one.
\end_layout

\begin_layout Itemize
Insert the object and monads in 
\begin_inset Quotes eld
\end_inset

OT_objects
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout Paragraph
Getting the default value of all features for an object id_d.
\end_layout

\begin_layout LyX-Code
SELECT feature_name, default_value
\end_layout

\begin_layout LyX-Code
FROM features
\end_layout

\begin_layout LyX-Code
WHERE object_type_id = { object type_id }
\end_layout

\begin_layout Paragraph
Inserting the object in 
\begin_inset Quotes eld
\end_inset

OT_objects.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
INSERT INTO OT_objects (
\end_layout

\begin_layout LyX-Code
    object_type_id, 
\end_layout

\begin_layout LyX-Code
    first_monad,
\end_layout

\begin_layout LyX-Code
    last_monad,
\end_layout

\begin_layout LyX-Code
    ...
 /* features */
\end_layout

\begin_layout LyX-Code
)
\end_layout

\begin_layout LyX-Code
VALUES (
\end_layout

\begin_layout LyX-Code
   { object_type_id },
\end_layout

\begin_layout LyX-Code
   { first monad },
\end_layout

\begin_layout LyX-Code
   { last monad },
\end_layout

\begin_layout LyX-Code
   ...
 /* features */
\end_layout

\begin_layout LyX-Code
)
\end_layout

\begin_layout Subsection
CREATE OBJECT FROM ID_DS
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Itemize
Check that 
\begin_inset Quotes eld
\end_inset


\family typewriter
object_type_name
\family default

\begin_inset Quotes erd
\end_inset

 is neither all_m, nor any_m, nor pow_m.
\end_layout

\begin_layout Itemize
Check that the feature 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Quotes erd
\end_inset

 is not assigned a value.
\end_layout

\begin_layout Itemize
Check that none of the id_ds in the list are NIL.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
If the user specified an id_d, check that this id_d is not in use already.
\end_layout

\begin_layout Itemize
Check that the object type exists.
 In doing so, store its object type_id in the AST.
\end_layout

\begin_layout Itemize
Check that no feture is assigned which the object type does not have.
\end_layout

\begin_layout Itemize
Make sure that all features are given a value.
 If a feature is not given a value, then use the default value.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Itemize
Assign a type to each feature-assignment.
\end_layout

\begin_layout Itemize
Check for type-compatibility.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Itemize
Get the set of monads from the id_ds.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
If the user did not specify an id_d, autogenerate one.
\end_layout

\begin_layout Itemize
Insert the object and monads in 
\begin_inset Quotes eld
\end_inset

OT_objects
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout Subsection
CREATE OBJECT FROM (focus | all | ) QUERY
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Itemize
Check everything that must be checked for a SELECT OBJECTS query.
\end_layout

\begin_layout Itemize
Check that the feature 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Quotes erd
\end_inset

 is not assigned a value.
\end_layout

\begin_layout Itemize
Check that 
\begin_inset Quotes eld
\end_inset


\family typewriter
object_type_name
\family default

\begin_inset Quotes erd
\end_inset

 is neither all_m, pow_m, or any_m.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
Check everything that must be checked for a SELECT OBJECTS query.
\end_layout

\begin_layout Itemize
If the user specified an id_d, check that this id_d is not in use already.
\end_layout

\begin_layout Itemize
Check that the object type exists.
 In doing so, store its object type_id in the AST.
\end_layout

\begin_layout Itemize
Check that no feture is assigned which the object type does not have.
\end_layout

\begin_layout Itemize
Make sure that all features are given a value.
 If a feature is not given a value, then use the default value.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Itemize
Check everything that must be checked for a SELECT OBJECTS query.
\end_layout

\begin_layout Itemize
Assign a type to each feature-assignment.
\end_layout

\begin_layout Itemize
Check for type-compatibility.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Itemize
Check everything that must be checked for the SELECT OBJECTS query.
\end_layout

\begin_layout Itemize
Run the query.
\end_layout

\begin_layout Itemize
Get the set of monads from the query.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
If the user did not specify an id_d, autogenerate one.
\end_layout

\begin_layout Itemize
Insert the object and monads in 
\begin_inset Quotes eld
\end_inset

OT_objects
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout Subsection
UPDATE OBJECTS BY MONADS
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Itemize
Check that the object type is neither all_m, nor any_m, nor pow_m.
\end_layout

\begin_layout Itemize
Check that self is not assigned to.
\end_layout

\begin_layout Itemize
Check that all the ranges of monads are positive and monotonic.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
Check that the object type actually exists.
 In doing so, store its object type_id in the AST.
\end_layout

\begin_layout Itemize
Check that the object type has all the features that are assigned a new
 value.
\end_layout

\begin_layout Itemize
Check that the features which are assigned are not computed features.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Itemize
Check that there is type-compatibility between the features and their values.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Itemize
Build the set of monads from the monads in the AST.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
Get the objects which are part_of the set of monads.
 This is a two-step process:
\end_layout

\begin_deeper
\begin_layout Itemize
Find all the objects which are wholly contained within the borders of the
 set of monads.
\end_layout

\begin_layout Itemize
Load each object one by one and check whether it should be included because
 it is part_of the set of monads.
\end_layout

\end_deeper
\begin_layout Itemize
Update the objects
\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout Paragraph
Updating an object
\end_layout

\begin_layout LyX-Code
UPDATE OT_objects
\end_layout

\begin_layout LyX-Code
SET { (feature = value), (feature = value), ...
 }
\end_layout

\begin_layout LyX-Code
WHERE object_id_d = { object id_d }
\end_layout

\begin_layout Subsection
UPDATE OBJECTS BY ID_DS
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Itemize
Check that the object type is neither all_m, nor any_m, nor pow_m.
\end_layout

\begin_layout Itemize
Check that self is not assigned to.
\end_layout

\begin_layout Itemize
Check that none of the id_ds in the list are NIL.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
Check that the object type actually exists.
 In doing so, store its object type_id in the AST.
\end_layout

\begin_layout Itemize
Check that the object type has all the features that are assigned a new
 value.
\end_layout

\begin_layout Itemize
Check that the features which are assigned are not computed features.
\end_layout

\begin_layout Itemize
Check that the objects with the id_ds exist.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Itemize
Check that there is type-compatibility between the features and their values.
\end_layout

\begin_layout Itemize
Check that the objects with the id_ds are of the specified type.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
Update the objects
\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout Subsection
UPDATE OBJECTS BY (focus | all | ) QUERY
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Itemize
Check that the object type is neither all_m, nor any_m, nor pow_m.
\end_layout

\begin_layout Itemize
Check that self is not assigned to.
\end_layout

\begin_layout Itemize
Check everything that must be checked for a SELECT OBJECTS query.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
Check everything that must be checked for a SELECT OBJECTS query.
\end_layout

\begin_layout Itemize
Check that the object type actually exists.
 In doing so, store its object type_id in the AST.
\end_layout

\begin_layout Itemize
Check that the object type has all the features that are assigned a new
 value.
\end_layout

\begin_layout Itemize
Check that the features which are assigned are not computed features.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Itemize
Check everything that must be checked for a SELECT OBJECTS query.
\end_layout

\begin_layout Itemize
Check that there is type-compatibility between the features and their values.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Itemize
Check everything that must be checked for the query.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
Run the query.
\end_layout

\begin_layout Itemize
Get the set of objects:
\end_layout

\begin_deeper
\begin_layout Itemize
If it is an ALL query, filter the returned set of objects by the given object
 type.
\end_layout

\begin_layout Itemize
If it is a FOCUS query, first filter by focus, then filter by object type.
\end_layout

\end_deeper
\begin_layout Itemize
Update the objects
\end_layout

\begin_layout Subsection
DELETE OBJECTS BY MONADS
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Itemize
Check that all the ranges of monads are positive and monotonic.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
Check that the object type exists.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Itemize
Build the set of monads from the monads in the AST.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
Get the object id_ds of the objects which are part_of the set of monads.
 See the section on UPDATE OBJECTS BY MONADS for how to do this.
\end_layout

\begin_layout Itemize
Delete the objects and monads from OT_objects
\end_layout

\begin_layout Subsubsection
SQL fragments
\end_layout

\begin_layout Paragraph
Deleting an object from OT_objects
\end_layout

\begin_layout LyX-Code
DELETE
\end_layout

\begin_layout LyX-Code
FROM OT_objects
\end_layout

\begin_layout LyX-Code
WHERE object_id_d = { object id_d }
\end_layout

\begin_layout Subsection
DELETE OBJECTS BY ID_DS
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Itemize
Check that none of the id_ds in the list are NIL.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
Check that the object type exists.
\end_layout

\begin_layout Itemize
Check that all the id_ds refer to objects that exist and are of the given
 type.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Standard
Nothing to do
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
Delete the objects from OT_objects
\end_layout

\begin_layout Subsection
DELETE OBJECTS BY (focus | all | ) QUERY
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Itemize
Check everything that must be checked for a SELECT OBJECTS query.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
Check everything that must be checked for a SELECT OBJECTS query.
\end_layout

\begin_layout Itemize
Check that the object type exists.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Itemize
Check everything that must be checked for a SELECT OBJECTS query.
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Itemize
Check everything that must be checked for a SELECT OBJECTS query.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
Run the query.
\end_layout

\begin_layout Itemize
Get the object id_ds from the query:
\end_layout

\begin_deeper
\begin_layout Itemize
If it is an ALL query, filter the returned set of objects by the given object
 type.
\end_layout

\begin_layout Itemize
If it is a FOCUS query, first filter by focus, then filter by object type.
\end_layout

\end_deeper
\begin_layout Itemize
Delete the objects from OT_objects
\end_layout

\begin_layout Section
Feature manipulation
\end_layout

\begin_layout Subsection
GET FEATURES
\end_layout

\begin_layout Subsubsection
Weeder
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Symbol-checker
\end_layout

\begin_layout Itemize
Check that the object type exists.
 In doing so, store its object type_id in the AST.
\end_layout

\begin_layout Itemize
Check that the objects with the given id_ds exists.
\end_layout

\begin_layout Itemize
Check that the objects all belong to the same type, namely the one given.
\end_layout

\begin_layout Itemize
Check that the features exist for the given object type.
\end_layout

\begin_layout Subsubsection
Type-checker
\end_layout

\begin_layout Standard
Nothing to do
\end_layout

\begin_layout Subsubsection
Monads-checker
\end_layout

\begin_layout Standard
Nothing to do.
\end_layout

\begin_layout Subsubsection
Interpreter
\end_layout

\begin_layout Itemize
Ask the database for the answer.
\end_layout

\begin_layout Chapter
\start_of_appendix
Copying this document
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
All Emdros documentation is provided under the Creative Commons Attribution-Shar
ealike license version 2.5.
 This license is included below, and can also be seen at:
\end_layout

\begin_layout Standard

\family typewriter
\size larger
http://creativecommons.org/licenses/by-sa/2.5/
\family default
 
\end_layout

\begin_layout Section
Creative Commons Deed (for all documentation)
\end_layout

\begin_layout Standard
\align center
Attribution-ShareAlike 2.5 
\end_layout

\begin_layout Standard
\align center
CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE LEGAL
 SERVICES.
 DISTRIBUTION OF THIS LICENSE DOES NOT CREATE AN ATTORNEY-CLIENT RELATIONSHIP.
 CREATIVE COMMONS PROVIDES THIS INFORMATION ON AN "AS-IS" BASIS.
 CREATIVE COMMONS MAKES NO WARRANTIES REGARDING THE INFORMATION PROVIDED,
 AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM ITS USE.
\end_layout

\begin_layout Standard

\shape italic
\size larger
License
\end_layout

\begin_layout Standard
THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS CREATIVE
 COMMONS PUBLIC LICENSE ("CCPL" OR "LICENSE").
 THE WORK IS PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW.
 ANY USE OF THE WORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT
 LAW IS PROHIBITED.
\end_layout

\begin_layout Standard
BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND AGREE
 TO BE BOUND BY THE TERMS OF THIS LICENSE.
 THE LICENSOR GRANTS YOU THE RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR
 ACCEPTANCE OF SUCH TERMS AND CONDITIONS.
\end_layout

\begin_layout Enumerate

\series bold
Definitions
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
"Collective Work"
\series default
 means a work, such as a periodical issue, anthology or encyclopedia, in
 which the Work in its entirety in unmodified form, along with a number
 of other contributions, constituting separate and independent works in
 themselves, are assembled into a collective whole.
 A work that constitutes a Collective Work will not be considered a Derivative
 Work (as defined below) for the purposes of this License.
 
\end_layout

\begin_layout Enumerate

\series bold
"Derivative Work"
\series default
 means a work based upon the Work or upon the Work and other pre-existing
 works, such as a translation, musical arrangement, dramatization, fictionalizat
ion, motion picture version, sound recording, art reproduction, abridgment,
 condensation, or any other form in which the Work may be recast, transformed,
 or adapted, except that a work that constitutes a Collective Work will
 not be considered a Derivative Work for the purpose of this License.
 For the avoidance of doubt, where the Work is a musical composition or
 sound recording, the synchronization of the Work in timed-relation with
 a moving image ("synching") will be considered a Derivative Work for the
 purpose of this License.
 
\end_layout

\begin_layout Enumerate

\series bold
"Licensor"
\series default
 means the individual or entity that offers the Work under the terms of
 this License.
 
\end_layout

\begin_layout Enumerate

\series bold
"Original Author"
\series default
 means the individual or entity who created the Work.
 
\end_layout

\begin_layout Enumerate

\series bold
"Work"
\series default
 means the copyrightable work of authorship offered under the terms of this
 License.
 
\end_layout

\begin_layout Enumerate

\series bold
"You"
\series default
 means an individual or entity exercising rights under this License who
 has not previously violated the terms of this License with respect to the
 Work, or who has received express permission from the Licensor to exercise
 rights under this License despite a previous violation.
 
\end_layout

\begin_layout Enumerate

\series bold
"License Elements"
\series default
 means the following high-level license attributes as selected by Licensor
 and indicated in the title of this License: Attribution, ShareAlike.
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Fair Use Rights.

\series default
 Nothing in this license is intended to reduce, limit, or restrict any rights
 arising from fair use, first sale or other limitations on the exclusive
 rights of the copyright owner under copyright law or other applicable laws.
\end_layout

\begin_layout Enumerate

\series bold
License Grant.

\series default
 Subject to the terms and conditions of this License, Licensor hereby grants
 You a worldwide, royalty-free, non-exclusive, perpetual (for the duration
 of the applicable copyright) license to exercise the rights in the Work
 as stated below:
\end_layout

\begin_deeper
\begin_layout Enumerate
to reproduce the Work, to incorporate the Work into one or more Collective
 Works, and to reproduce the Work as incorporated in the Collective Works;
 
\end_layout

\begin_layout Enumerate
to create and reproduce Derivative Works; 
\end_layout

\begin_layout Enumerate
to distribute copies or phonorecords of, display publicly, perform publicly,
 and perform publicly by means of a digital audio transmission the Work
 including as incorporated in Collective Works; 
\end_layout

\begin_layout Enumerate
to distribute copies or phonorecords of, display publicly, perform publicly,
 and perform publicly by means of a digital audio transmission Derivative
 Works.
 
\end_layout

\begin_layout Enumerate
For the avoidance of doubt, where the work is a musical composition: 
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
Performance Royalties Under Blanket Licenses.

\series default
 Licensor waives the exclusive right to collect, whether individually or
 via a performance rights society (e.g.
 ASCAP, BMI, SESAC), royalties for the public performance or public digital
 performance (e.g.
 webcast) of the Work.
 
\end_layout

\begin_layout Enumerate

\series bold
Mechanical Rights and Statutory Royalties.

\series default
 Licensor waives the exclusive right to collect, whether individually or
 via a music rights society or designated agent (e.g.
 Harry Fox Agency), royalties for any phonorecord You create from the Work
 ("cover version") and distribute, subject to the compulsory license created
 by 17 USC Section 115 of the US Copyright Act (or the equivalent in other
 jurisdictions).
 
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Webcasting Rights and Statutory Royalties.

\series default
 For the avoidance of doubt, where the Work is a sound recording, Licensor
 waives the exclusive right to collect, whether individually or via a performanc
e-rights society (e.g.
 SoundExchange), royalties for the public digital performance (e.g.
 webcast) of the Work, subject to the compulsory license created by 17 USC
 Section 114 of the US Copyright Act (or the equivalent in other jurisdictions).
\end_layout

\begin_layout Standard
The above rights may be exercised in all media and formats whether now known
 or hereafter devised.
 The above rights include the right to make such modifications as are technicall
y necessary to exercise the rights in other media and formats.
 All rights not expressly granted by Licensor are hereby reserved.
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Restrictions.

\series default
 The license granted in Section 3 above is expressly made subject to and
 limited by the following restrictions:
\end_layout

\begin_deeper
\begin_layout Enumerate
You may distribute, publicly display, publicly perform, or publicly digitally
 perform the Work only under the terms of this License, and You must include
 a copy of, or the Uniform Resource Identifier for, this License with every
 copy or phonorecord of the Work You distribute, publicly display, publicly
 perform, or publicly digitally perform.
 You may not offer or impose any terms on the Work that alter or restrict
 the terms of this License or the recipients' exercise of the rights granted
 hereunder.
 You may not sublicense the Work.
 You must keep intact all notices that refer to this License and to the
 disclaimer of warranties.
 You may not distribute, publicly display, publicly perform, or publicly
 digitally perform the Work with any technological measures that control
 access or use of the Work in a manner inconsistent with the terms of this
 License Agreement.
 The above applies to the Work as incorporated in a Collective Work, but
 this does not require the Collective Work apart from the Work itself to
 be made subject to the terms of this License.
 If You create a Collective Work, upon notice from any Licensor You must,
 to the extent practicable, remove from the Collective Work any credit as
 required by clause 4(c), as requested.
 If You create a Derivative Work, upon notice from any Licensor You must,
 to the extent practicable, remove from the Derivative Work any credit as
 required by clause 4(c), as requested.
 
\end_layout

\begin_layout Enumerate
You may distribute, publicly display, publicly perform, or publicly digitally
 perform a Derivative Work only under the terms of this License, a later
 version of this License with the same License Elements as this License,
 or a Creative Commons iCommons license that contains the same License Elements
 as this License (e.g.
 Attribution-ShareAlike 2.5 Japan).
 You must include a copy of, or the Uniform Resource Identifier for, this
 License or other license specified in the previous sentence with every
 copy or phonorecord of each Derivative Work You distribute, publicly display,
 publicly perform, or publicly digitally perform.
 You may not offer or impose any terms on the Derivative Works that alter
 or restrict the terms of this License or the recipients' exercise of the
 rights granted hereunder, and You must keep intact all notices that refer
 to this License and to the disclaimer of warranties.
 You may not distribute, publicly display, publicly perform, or publicly
 digitally perform the Derivative Work with any technological measures that
 control access or use of the Work in a manner inconsistent with the terms
 of this License Agreement.
 The above applies to the Derivative Work as incorporated in a Collective
 Work, but this does not require the Collective Work apart from the Derivative
 Work itself to be made subject to the terms of this License.
 
\end_layout

\begin_layout Enumerate
If you distribute, publicly display, publicly perform, or publicly digitally
 perform the Work or any Derivative Works or Collective Works, You must
 keep intact all copyright notices for the Work and provide, reasonable
 to the medium or means You are utilizing: (i) the name of the Original
 Author (or pseudonym, if applicable) if supplied, and/or (ii) if the Original
 Author and/or Licensor designate another party or parties (e.g.
 a sponsor institute, publishing entity, journal) for attribution in Licensor's
 copyright notice, terms of service or by other reasonable means, the name
 of such party or parties; the title of the Work if supplied; to the extent
 reasonably practicable, the Uniform Resource Identifier, if any, that Licensor
 specifies to be associated with the Work, unless such URI does not refer
 to the copyright notice or licensing information for the Work; and in the
 case of a Derivative Work, a credit identifying the use of the Work in
 the Derivative Work (e.g., "French translation of the Work by Original Author,"
 or "Screenplay based on original Work by Original Author").
 Such credit may be implemented in any reasonable manner; provided, however,
 that in the case of a Derivative Work or Collective Work, at a minimum
 such credit will appear where any other comparable authorship credit appears
 and in a manner at least as prominent as such other comparable authorship
 credit.
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Representations, Warranties and Disclaimer
\end_layout

\begin_deeper
\begin_layout Standard
UNLESS OTHERWISE AGREED TO BY THE PARTIES IN WRITING, LICENSOR OFFERS THE
 WORK AS-IS AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING
 THE MATERIALS, EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT
 LIMITATION, WARRANTIES OF TITLE, MERCHANTIBILITY, FITNESS FOR A PARTICULAR
 PURPOSE, NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY,
 OR THE PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT DISCOVERABLE.
 SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED WARRANTIES, SO
 SUCH EXCLUSION MAY NOT APPLY TO YOU.
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Limitation on Liability.
\end_layout

\begin_deeper
\begin_layout Standard
EXCEPT TO THE EXTENT REQUIRED BY APPLICABLE LAW, IN NO EVENT WILL LICENSOR
 BE LIABLE TO YOU ON ANY LEGAL THEORY FOR ANY SPECIAL, INCIDENTAL, CONSEQUENTIAL
, PUNITIVE OR EXEMPLARY DAMAGES ARISING OUT OF THIS LICENSE OR THE USE OF
 THE WORK, EVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
 DAMAGES.
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Termination
\end_layout

\begin_deeper
\begin_layout Enumerate
This License and the rights granted hereunder will terminate automatically
 upon any breach by You of the terms of this License.
 Individuals or entities who have received Derivative Works or Collective
 Works from You under this License, however, will not have their licenses
 terminated provided such individuals or entities remain in full compliance
 with those licenses.
 Sections 1, 2, 5, 6, 7, and 8 will survive any termination of this License.
 
\end_layout

\begin_layout Enumerate
Subject to the above terms and conditions, the license granted here is perpetual
 (for the duration of the applicable copyright in the Work).
 Notwithstanding the above, Licensor reserves the right to release the Work
 under different license terms or to stop distributing the Work at any time;
 provided, however that any such election will not serve to withdraw this
 License (or any other license that has been, or is required to be, granted
 under the terms of this License), and this License will continue in full
 force and effect unless terminated as stated above.
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Miscellaneous
\end_layout

\begin_deeper
\begin_layout Enumerate
Each time You distribute or publicly digitally perform the Work or a Collective
 Work, the Licensor offers to the recipient a license to the Work on the
 same terms and conditions as the license granted to You under this License.
 
\end_layout

\begin_layout Enumerate
Each time You distribute or publicly digitally perform a Derivative Work,
 Licensor offers to the recipient a license to the original Work on the
 same terms and conditions as the license granted to You under this License.
 
\end_layout

\begin_layout Enumerate
If any provision of this License is invalid or unenforceable under applicable
 law, it shall not affect the validity or enforceability of the remainder
 of the terms of this License, and without further action by the parties
 to this agreement, such provision shall be reformed to the minimum extent
 necessary to make such provision valid and enforceable.
 
\end_layout

\begin_layout Enumerate
No term or provision of this License shall be deemed waived and no breach
 consented to unless such waiver or consent shall be in writing and signed
 by the party to be charged with such waiver or consent.
 
\end_layout

\begin_layout Enumerate
This License constitutes the entire agreement between the parties with respect
 to the Work licensed here.
 There are no understandings, agreements or representations with respect
 to the Work not specified here.
 Licensor shall not be bound by any additional provisions that may appear
 in any communication from You.
 This License may not be modified without the mutual written agreement of
 the Licensor and You.
\end_layout

\end_deeper
\begin_layout Standard

\size larger
Creative Commons is not a party to this License, and makes no warranty whatsoeve
r in connection with the Work.
 Creative Commons will not be liable to You or any party on any legal theory
 for any damages whatsoever, including without limitation any general, special,
 incidental or consequential damages arising in connection to this license.
 Notwithstanding the foregoing two (2) sentences, if Creative Commons has
 expressly identified itself as the Licensor hereunder, it shall have all
 rights and obligations of Licensor.
\end_layout

\begin_layout Standard

\size larger
Except for the limited purpose of indicating to the public that the Work
 is licensed under the CCPL, neither party will use the trademark "Creative
 Commons" or any related trademark or logo of Creative Commons without the
 prior written consent of Creative Commons.
 Any permitted use will be in compliance with Creative Commons' then-current
 trademark usage guidelines, as may be published on its website or otherwise
 made available upon request from time to time.
\end_layout

\begin_layout Standard

\size larger
Creative Commons may be contacted at 
\bar under
http://creativecommons.org/
\bar default
.
 
\end_layout

\end_body
\end_document
