#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass report
\begin_preamble
\usepackage{times}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.25in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\headheight 1cm
\headsep 1cm
\footskip 1.27cm
\secnumdepth 5
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
bold}[1]{{
\backslash
bf #1}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!database engine|see
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

Emdros
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
object types!special|see{all
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m, any
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m, pow
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
feature!computed|see
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

computed feature
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
identifier!case-sensitivity of|see
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

case-sensitivity
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Title
MQL Programmer's Guide
\end_layout

\begin_layout Author
Ulrik Sandborg-Petersen
\end_layout

\begin_layout Date
June 21, 2018
\end_layout

\begin_layout Standard
\noindent

\size larger
Copyright (C) 2001-2018 Ulrik Sandborg-Petersen
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent

\size larger
This document is made available under the Creative Commons Attribution-Sharealik
e International license 4.0 (CC-BY-SA 4.0).
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent

\size larger
See
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\size larger
https://creativecommons.org/licenses/by-sa/4.0/
\end_layout

\begin_layout Standard
\noindent

\size larger
for what that means.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 3cm
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center

\size larger
Please visit the Emdros website for the latest news and downloads:
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
\size larger
https://emdros.org
\end_layout

\begin_layout Abstract
This is the MQL Programmer's Guide.
 It documents Emdros version 3.4.1.pre29 and upwards.
 If you just wish to use Emdros to query your data, then this might not
 be for you.
 Instead, you can consult the MQL Query Guide, which is available from the
 Emdros website, or with any recent distribution of Emdros.
\end_layout

\begin_layout Abstract
In Chapter 1, we discuss some preliminaries, such as the history of Emdros,
 as well as giving an overview of the formalism used to define the MQL language,
 called Backus-Naur Form (or BNF).
\end_layout

\begin_layout Abstract
In Chapter 2, we give an overview of the EMdF model, from a user's standpoint.
\end_layout

\begin_layout Abstract
In Chapter 3, we describe the bulk of the MQL language.
\end_layout

\begin_layout Abstract
In Chapter 4, we describe the query-subset of MQL.
 That is, the subset of MQL in which you can express queries that look for
 objects by object type, features, and structural relationships such as
 embedding and sequence.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Preliminaries
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Welcome to the MQL Programmer's Guide.
 MQL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
MQL
\end_layout

\end_inset

 is the query language associated with the EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

.
 MQL is a 
\begin_inset Quotes eld
\end_inset

full access language
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
full access language
\end_layout

\end_inset

,
\begin_inset Quotes erd
\end_inset

 which simply means that MQL lets you create, update, delete, and query
 most of the data domains in the EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

 â€“ databases, objects, object types, features, etc.
 MQL is your front-end to the EMdF database engine
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!database engine
\end_layout

\end_inset

.
 This guide helps you formulate MQL queries that do what you need done with
 your EMdF database
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!database
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
This guide has four chapters.
 The first is this chapter on preliminaries.
 The second is a gentle introduction to the EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

, which underlies the MQL language.
 The third chapter deals with the bulk of the MQL query language, detailing
 all the different kinds of queries for creating, updating, deleting, and
 querying an EMdF database
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!database
\end_layout

\end_inset

.
 The fourth chapter is a special chapter devoted to explaining those MQL
 queries that query for objects in the database.
 Since these queries are so rich, it was deemed necessary to devote a whole
 chapter to their treatment.
\end_layout

\begin_layout Standard
This chapter will proceed as follows.
 First, we present a short history of MdF
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
MdF
\end_layout

\end_inset

, EMdF
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF
\end_layout

\end_inset

, and MQL.
 Second, we give a gentle introduction to Backus-Naur Form
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Backus-Naur Form
\end_layout

\end_inset

, or BNF, which will be used throughout chapters 
\begin_inset CommandInset ref
LatexCommand ref
reference "chapter:MQL Query Language"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "chapter:MQL Query Subset"

\end_inset

.
 Lastly, we explain the origin of the support for something called 
\emph on
regular expressions
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
regular expressions!support
\end_layout

\end_inset


\emph default
 in MQL.
 This is done so as to comply with the license for the library used.
\end_layout

\begin_layout Standard
But first, an explanation of where EMdF and MQL come from.
\end_layout

\begin_layout Section
Origins of MdF, EMdF, and MQL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
MQL!origins
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!origins
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
MdF!origins
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Emdros!origins
\end_layout

\end_inset


\end_layout

\begin_layout Standard
EMdF and MQL are not original works.
 They are merely derivative works based on someone else's hard labors.
 Most of the ideas underlying the EMdF model and the MQL query language
 are to be found in the PhD thesis of Crist-Jan Doedens
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Doedens, Crist-Jan
\end_layout

\end_inset

, published in 1994 as 
\begin_inset CommandInset citation
LatexCommand cite
key "Doedens94"
literal "true"

\end_inset

.
 This thesis described, among other things, the MdF database model and the
 QL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
QL
\end_layout

\end_inset

 query language.
 As one might guess, EMdF stems from MdF, and MQL stems from QL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
QL
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The EMdF model takes over the MdF model in its entirety, but adds a few
 concepts which are useful when implementing the MdF model in real life.
 Thus the `E' in `EMdF' stands for 
\begin_inset Quotes eld
\end_inset

Extended
\begin_inset Quotes erd
\end_inset

, yielding the 
\begin_inset Quotes eld
\end_inset

Extended MdF model
\begin_inset Quotes erd
\end_inset

.
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!acronym
\end_layout

\end_inset

 The EMdF model is the subject of chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chapter:EMdF-model"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

MQL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
MQL!acronym
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 stands for 
\begin_inset Quotes eld
\end_inset

Mini QL.
\begin_inset Quotes erd
\end_inset

 Originally, I devised MQL as a subset of the QL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
QL
\end_layout

\end_inset

 query language developed in Dr.
 Doedens'
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Doedens, Crist-Jan
\end_layout

\end_inset

 PhD thesis, hence the 
\begin_inset Quotes eld
\end_inset

Mini
\begin_inset Quotes erd
\end_inset

 modifier.
 Since then, however, MQL has grown.
 QL
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
QL
\end_layout

\end_inset

 was not a 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
full access language
\end_layout

\end_inset

full access language, but specified only how to query an MdF database, i.e.,
 how to ask questions of it.
 MQL, by contrast, is a 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
full access language
\end_layout

\end_inset

full access language, allowing not only querying, but also creation, update,
 and deletion of the data domains of the EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

.
 The MQL query language is the subject of chapters 
\begin_inset CommandInset ref
LatexCommand ref
reference "chapter:MQL Query Language"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "chapter:MQL Query Subset"

\end_inset

.
\end_layout

\begin_layout Standard
Thus EMdF and MQL are derivatives of the MdF database model and the QL query
 language developed by Dr.
 Crist-Jan Doedens in his 1994 PhD thesis.
\end_layout

\begin_layout Section
Introduction to Backus-Naur Form
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Backus-Naur Form|textbf
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Context-Free Grammars
\end_layout

\begin_layout Standard
BNF is a way of specifying the 
\begin_inset Quotes eld
\end_inset

syntactic rules
\begin_inset Quotes erd
\end_inset

 of a language.
 English also has 
\begin_inset Quotes eld
\end_inset

syntactic rules,
\begin_inset Quotes erd
\end_inset

 and some of them can be specified using a 
\begin_inset Quotes eld
\end_inset

Context-Free Grammar.
\begin_inset Quotes erd
\end_inset

 BNF is precisely a way of specifying a context-free grammar for a formal
 language.
 Thus it is beneficial first to see what a context-free grammar is, before
 looking at the details of BNF.
\end_layout

\begin_layout Standard
In English, the basic clause-pattern is 
\begin_inset Quotes eld
\end_inset

Subject - Verb - Object
\begin_inset Quotes erd
\end_inset

.
 For example, in the clause 
\begin_inset Quotes eld
\end_inset

I eat vegetables,
\begin_inset Quotes erd
\end_inset

 the word 
\begin_inset Quotes eld
\end_inset

I
\begin_inset Quotes erd
\end_inset

 is the subject, the word 
\begin_inset Quotes eld
\end_inset

eat
\begin_inset Quotes erd
\end_inset

 is the verb, and the word 
\begin_inset Quotes eld
\end_inset

vegetables
\begin_inset Quotes erd
\end_inset

 is the object.
 A clause which exhibits exactly the same 
\begin_inset Quotes eld
\end_inset

Subject - Verb - Object
\begin_inset Quotes erd
\end_inset

 structure is 
\begin_inset Quotes eld
\end_inset

You drink coke.
\begin_inset Quotes erd
\end_inset

 Here, 
\begin_inset Quotes eld
\end_inset

You
\begin_inset Quotes erd
\end_inset

 is the subject, 
\begin_inset Quotes eld
\end_inset

drink
\begin_inset Quotes erd
\end_inset

 is the verb, and 
\begin_inset Quotes eld
\end_inset

coke
\begin_inset Quotes erd
\end_inset

 is the object.
\end_layout

\begin_layout Standard
Consider the following context-free grammar:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout LyX-Code
Sentence 
\begin_inset Formula $\rightarrow$
\end_inset

 NP
\begin_inset Formula $_{subj}$
\end_inset

 VP
\end_layout

\begin_layout LyX-Code
NP
\begin_inset Formula $_{subj}$
\end_inset

 
\begin_inset Formula $\rightarrow$
\end_inset

 
\begin_inset Quotes eld
\end_inset

I
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

You
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
VP 
\begin_inset Formula $\rightarrow$
\end_inset

 V NP
\begin_inset Formula $_{obj}$
\end_inset


\end_layout

\begin_layout LyX-Code
V 
\begin_inset Formula $\rightarrow$
\end_inset

 
\begin_inset Quotes eld
\end_inset

eat
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

drink
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
NP
\begin_inset Formula $_{obj}$
\end_inset

 
\begin_inset Formula $\rightarrow$
\end_inset

 
\begin_inset Quotes eld
\end_inset

vegetables
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

coke
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
This little context-free grammar is a toy example of a context-free grammar.
 However, despite its simplicity, it exemplifies all of the concepts involved
 in context-free grammars:
\end_layout

\begin_layout Itemize
Rule
\end_layout

\begin_layout Itemize
Non-terminal
\end_layout

\begin_layout Itemize
Terminal
\end_layout

\begin_layout Itemize
Choice
\end_layout

\begin_layout Itemize
Concatenation
\end_layout

\begin_layout Itemize
Start-symbol.
\end_layout

\begin_layout Standard
These will be described in turn below
\end_layout

\begin_layout Subsubsection
Rule
\end_layout

\begin_layout Standard
A 
\begin_inset Quotes eld
\end_inset

Rule
\begin_inset Quotes erd
\end_inset

 consists of three parts:
\end_layout

\begin_layout Enumerate
The left-hand side
\end_layout

\begin_layout Enumerate
The 
\begin_inset Quotes eld
\end_inset

production arrow
\begin_inset Quotes erd
\end_inset

 (
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $\rightarrow$
\end_inset


\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Enumerate
The right-hand side
\end_layout

\begin_layout Standard
An example of a rule in the above context-free grammar is:
\end_layout

\begin_layout LyX-Code
Sentence 
\begin_inset Formula $\rightarrow$
\end_inset

 NP
\begin_inset Formula $_{subj}$
\end_inset

 VP
\end_layout

\begin_layout Standard
It specifies that the left-hand side (
\begin_inset Quotes eld
\end_inset

Sentence
\begin_inset Quotes erd
\end_inset

) can be 
\emph on
replaced with
\emph default
 the right-hand side, which in this case is two symbols, 
\begin_inset Quotes eld
\end_inset

NP
\begin_inset Formula $_{subj}$
\end_inset


\begin_inset Quotes erd
\end_inset

 followed by 
\begin_inset Quotes eld
\end_inset

VP
\begin_inset Quotes erd
\end_inset

.
 Sometimes, we also say that a left-hand side is 
\emph on
expanded to
\emph default
 the right-hand side.
\end_layout

\begin_layout Subsubsection
Non-terminal
\end_layout

\begin_layout Standard
There are only two kinds of symbols in a context-free grammar: Non-terminals
 and Terminals.
 They are a contrasting pair.
 In this section, we describe what a non-terminal is, and in the next section,
 what a terminal is.
\end_layout

\begin_layout Standard
A 
\begin_inset Quotes eld
\end_inset

Non-terminal
\begin_inset Quotes erd
\end_inset

 is a symbol in a rule which can be expanded to other symbols.
 Thus the symbols 
\begin_inset Quotes eld
\end_inset

Sentence
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

NP
\begin_inset Formula $_{subj}$
\end_inset


\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

VP
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

V
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

NP
\begin_inset Formula $_{obj}$
\end_inset


\begin_inset Quotes erd
\end_inset

 constitute all of the non-terminals of the above context-free grammar.
 
\end_layout

\begin_layout Standard
Only non-terminals can stand on the left-hand side of a rule.
 A non-terminal is defined as a symbol which can be expanded to or replaced
 with other symbols, and hence they can stand on the left-hand side of a
 rule.
 But as you will notice in the above context-free grammar, a non-terminal
 can also stand on the right-hand-side of a rule.
 For example, the non-terminal 
\begin_inset Quotes eld
\end_inset

V
\begin_inset Quotes erd
\end_inset

 is present both in the rule for how to expand the non-terminal 
\begin_inset Quotes eld
\end_inset

VP
\begin_inset Quotes erd
\end_inset

, and in the rule for how to expand itself.
 Thus, in order to expand 
\begin_inset Quotes eld
\end_inset

VP
\begin_inset Quotes erd
\end_inset

 fully, you must first expand to the right-hand-side 
\begin_inset Quotes eld
\end_inset

V NP
\begin_inset Formula $_{obj}$
\end_inset


\begin_inset Quotes erd
\end_inset

, and then expand both 
\begin_inset Quotes eld
\end_inset

V
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

NP
\begin_inset Formula $_{obj}$
\end_inset


\begin_inset Quotes erd
\end_inset

, using the rules for these two.
\end_layout

\begin_layout Subsubsection
Terminal
\end_layout

\begin_layout Standard
A 
\begin_inset Quotes eld
\end_inset

Terminal
\begin_inset Quotes erd
\end_inset

 is a symbol in a rule which cannot be expanded to other symbols.
 Hence, it is 
\begin_inset Quotes eld
\end_inset

terminal
\begin_inset Quotes erd
\end_inset

 in the sense that the expansion cannot proceed further from this symbol.
 In the above context-free grammar, the terminals are: 
\begin_inset Quotes eld
\end_inset

I
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

You
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

eat
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

drink
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

vegetables
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

coke
\begin_inset Quotes erd
\end_inset

.
 These are symbols which cannot be expanded further.
 
\end_layout

\begin_layout Standard
Terminals can only stand on the right-hand side of a rule.
 If they were to stand on the left-hand-side of the rule, that would mean
 that they could be expanded to or replaced with other symbols.
 But that would make them non-terminals.
\end_layout

\begin_layout Subsubsection
Choice
\end_layout

\begin_layout Standard
In the rule for 
\begin_inset Quotes eld
\end_inset

V
\begin_inset Quotes erd
\end_inset

 in the above grammar, we see an example of choice.
 The choice is indicated by the 
\begin_inset Quotes eld
\end_inset

|
\begin_inset Quotes erd
\end_inset

 symbol, which is read as 
\begin_inset Quotes eld
\end_inset

or
\begin_inset Quotes erd
\end_inset

.
 Thus, this example:
\end_layout

\begin_layout LyX-Code
V 
\begin_inset Formula $\rightarrow$
\end_inset

 
\begin_inset Quotes eld
\end_inset

eat
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

drink
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
is read as `V expands to 
\begin_inset Quotes eld
\end_inset

eat
\begin_inset Quotes erd
\end_inset

 
\emph on
or
\emph default
 
\begin_inset Quotes eld
\end_inset

drink
\begin_inset Quotes erd
\end_inset

'.
\end_layout

\begin_layout Subsubsection
Concatenation
\end_layout

\begin_layout Standard
We have already seen an example of concatenation, namely in the rule for
 
\begin_inset Quotes eld
\end_inset

Sentence
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
Sentence 
\begin_inset Formula $\rightarrow$
\end_inset

 NP
\begin_inset Formula $_{subj}$
\end_inset

 VP
\end_layout

\begin_layout Standard
Here, the symbols 
\begin_inset Quotes eld
\end_inset

NP
\begin_inset Formula $_{subj}$
\end_inset


\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

VP
\begin_inset Quotes erd
\end_inset

 are 
\emph on
concatenated
\emph default
, or placed in sequence.
 Thus 
\begin_inset Quotes eld
\end_inset

VP
\begin_inset Quotes erd
\end_inset

 comes immediately after 
\begin_inset Quotes eld
\end_inset

NP
\begin_inset Formula $_{subj}$
\end_inset


\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Concatenated
\begin_inset Quotes erd
\end_inset

 is simply a fanciful name for 
\begin_inset Quotes eld
\end_inset

being in sequence
\begin_inset Quotes erd
\end_inset

, but although it is a basic idea, we included it for completeness.
\end_layout

\begin_layout Subsubsection
Start-symbol
\end_layout

\begin_layout Standard
The start-symbol is merely the left-hand side non-terminal of the first
 rule in the grammar.
 Thus, in the above grammar, 
\begin_inset Quotes eld
\end_inset

Sentence
\begin_inset Quotes erd
\end_inset

 is the start-symbol.
\end_layout

\begin_layout Subsection
Context-free grammars: Putting it all together
\end_layout

\begin_layout Standard
It is time to see how all of this theory works in practice.
 The above grammar can produce 8 sentences, some of which do not make sense:
\end_layout

\begin_layout Enumerate
I eat vegetables
\end_layout

\begin_layout Enumerate
I eat coke
\end_layout

\begin_layout Enumerate
I drink vegetables
\end_layout

\begin_layout Enumerate
I drink coke
\end_layout

\begin_layout Enumerate
You eat vegetables
\end_layout

\begin_layout Enumerate
You eat coke
\end_layout

\begin_layout Enumerate
You drink vegetables
\end_layout

\begin_layout Enumerate
You drink coke
\end_layout

\begin_layout Standard
Let us pick one of these sentences and see how it was produced from the
 above grammar.
 We will pick number 8, 
\begin_inset Quotes eld
\end_inset

You drink coke
\begin_inset Quotes erd
\end_inset

, and trace all the steps.
 We start with the start-symbol, 
\begin_inset Quotes eld
\end_inset

Sentence
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Enumerate
Sentence
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
This is expanded using the rule for 
\begin_inset Quotes eld
\end_inset

Sentence
\begin_inset Quotes erd
\end_inset

:
\end_layout

\end_deeper
\begin_layout Enumerate
NP
\begin_inset Formula $_{subj}$
\end_inset

 VP
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

NP
\begin_inset Formula $_{subj}$
\end_inset


\begin_inset Quotes erd
\end_inset

 non-terminal is then expanded to 
\begin_inset Quotes eld
\end_inset

You
\begin_inset Quotes erd
\end_inset

 using one of the choices in the rule for NP
\begin_inset Formula $_{subj}$
\end_inset

:
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

You
\begin_inset Quotes erd
\end_inset

 VP
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

VP
\begin_inset Quotes erd
\end_inset

 is then expanded using the rule for 
\begin_inset Quotes eld
\end_inset

VP
\begin_inset Quotes erd
\end_inset

:
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

You
\begin_inset Quotes erd
\end_inset

 V NP
\begin_inset Formula $_{obj}$
\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

V
\begin_inset Quotes erd
\end_inset

 non-terminal is then expanded to the terminal 
\begin_inset Quotes eld
\end_inset

drink
\begin_inset Quotes erd
\end_inset

:
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

You
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

drink
\begin_inset Quotes erd
\end_inset

 NP
\begin_inset Formula $_{obj}$
\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

NP
\begin_inset Formula $_{obj}$
\end_inset


\begin_inset Quotes erd
\end_inset

 non-terminal is then expanded to the terminal 
\begin_inset Quotes eld
\end_inset

coke
\begin_inset Quotes erd
\end_inset

:
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

You
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

drink
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

coke
\begin_inset Quotes erd
\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Which yields the final sentence, 
\begin_inset Quotes eld
\end_inset

You drink coke
\begin_inset Quotes erd
\end_inset

.
 This sentence has no non-terminals, only terminals, and therefore it cannot
 be expanded further.
 We are finished.
\end_layout

\end_deeper
\begin_layout Standard
If you would like to, try to trace the production of one of the other sentences
 using pencil and paper, tracing each step as in the above example.
 When you have done so once or twice, you should understand all there is
 to understand about context-free grammars.
\end_layout

\begin_layout Standard
And BNF is simply a way of specifying a context-free grammar.
 So let us start looking at the details of BNF.
\end_layout

\begin_layout Subsection
BNF
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Backus-Naur Form
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Introduction
\end_layout

\begin_layout Standard
BNF comes in various variants, and almost everyone defines their usage of
 BNF a little differently from everyone else.
 In this document, we shall also deviate slightly from 
\begin_inset Quotes eld
\end_inset

standard BNF
\begin_inset Quotes erd
\end_inset

, but these deviations will only be very slight.
\end_layout

\begin_layout Standard
This treatment of BNF will be made from an example of a context-free grammar
 in 
\begin_inset Quotes eld
\end_inset

MQL BNF.
\begin_inset Quotes erd
\end_inset

 This example covers every formalism used in 
\begin_inset Quotes eld
\end_inset

MQL BNF,
\begin_inset Quotes erd
\end_inset

 and is a real-life example of the syntax of an actual MQL statement:
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
create_enumeration_statement : 
\begin_inset Quotes eld
\end_inset

CREATE
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
            (
\begin_inset Quotes eld
\end_inset

ENUMERATION
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

ENUM
\begin_inset Quotes erd
\end_inset

) 
\end_layout

\begin_layout LyX-Code
            enumeration_name 
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
            
\begin_inset Quotes eld
\end_inset

{
\begin_inset Quotes erd
\end_inset

 ec_declaration_list 
\begin_inset Quotes eld
\end_inset

}
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
enumeration_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
   /* The T_IDENTIFIER is a terminal 
\end_layout

\begin_layout LyX-Code
      denoting an identifier.
 */
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
ec_declaration_list : ec_declaration { 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

 ec_declaration }
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
ec_declaration : [ 
\begin_inset Quotes eld
\end_inset

DEFAULT
\begin_inset Quotes erd
\end_inset

 ]
\end_layout

\begin_layout LyX-Code
              ec_name [ ec_initialization ]
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
ec_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
ec_initialization : 
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

 T_INTEGER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

INTEGER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Elements of 
\begin_inset Quotes eld
\end_inset

MQL BNF
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
All of the elements of 
\begin_inset Quotes eld
\end_inset

MQL BNF
\begin_inset Quotes erd
\end_inset

 can be listed as follows:
\end_layout

\begin_layout Enumerate
Rule
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
This is just the same as in the context-free grammars above, except that
 the 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $\rightarrow$
\end_inset


\begin_inset Quotes erd
\end_inset

 production arrow is replaced by a 
\begin_inset Quotes eld
\end_inset

:
\begin_inset Quotes eld
\end_inset

 colon.
 Also, a rule ends with a 
\begin_inset Quotes eld
\end_inset

;
\begin_inset Quotes erd
\end_inset

 semicolon.
\end_layout

\end_deeper
\begin_layout Enumerate
Non-terminal
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Non-terminals always start with a lower-case letter, e.g., 
\begin_inset Quotes eld
\end_inset

ec_declaration.
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Terminal
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Terminals are either strings in 
\begin_inset Quotes eld
\end_inset

double quotes
\begin_inset Quotes erd
\end_inset

 or strings that start with 
\begin_inset Quotes eld
\end_inset

T_
\begin_inset Quotes erd
\end_inset

, e.g., 
\begin_inset Quotes eld
\end_inset

T_IDENTIFIER
\begin_inset Quotes erd
\end_inset

.
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Choice
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
This is the same as in the context-free grammars.
 The symbol 
\begin_inset Quotes eld
\end_inset

|
\begin_inset Quotes erd
\end_inset

 is used.
\end_layout

\end_deeper
\begin_layout Enumerate
Concatenation
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
This is the same as in the context-free grammars.
 A space between two symbols is used.
\end_layout

\end_deeper
\begin_layout Enumerate
Start-symbol
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
This is the same as in the context-free grammars.
 The left-hand side non-terminal of the first rule is the start-symbol.
\end_layout

\end_deeper
\begin_layout Enumerate
Comment
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
A comment is enclosed in /* slashes and stars */.
 The comments are not part of the grammar, but serve to explain a part of
 the grammar to the human reader.
\end_layout

\end_deeper
\begin_layout Enumerate
Optional specification
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
A symbol or sequence of symbols enclosed in [square brackets] is considered
 optional.
 For example, the 
\family typewriter
ec_initialization
\family default
 non-terminal is optional in the 
\family typewriter
ec_declaration
\family default
 rule.
 Both terminals and non-terminals can be optional.
 Here, the choice is between 
\begin_inset Quotes eld
\end_inset

ENUM
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

ENUMERATION
\begin_inset Quotes erd
\end_inset

, rather than, say, 
\begin_inset Quotes eld
\end_inset

CREATE ENUMERATION
\begin_inset Quotes erd
\end_inset

 and the rest of the rule.
\end_layout

\end_deeper
\begin_layout Enumerate
Bracketing
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Sometimes, we do not go to the trouble of spelling out a choice with a rule
 by itself.
 Instead, (brackets) are used.
 For example, in the above grammar, there is a choice between 
\begin_inset Quotes eld
\end_inset

ENUMERATION
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

ENUM
\begin_inset Quotes erd
\end_inset

.
 Only one must be chosen when writing the CREATE ENUMERATION statement.
 The brackets serve to let you know the scope of the choice, i.e., between
 exactly which elements the choice stands.
\end_layout

\end_deeper
\begin_layout Enumerate
Bracing (repetition)
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The { braces } are used to indicate that the enclosed part can be repeated
 zero or more times.
 For example, in the rule whose left hand side is 
\family typewriter
ec_declaration_list
\family default
, the first 
\family typewriter
ec_declaration
\family default
 can be followed by zero or more occurrences of first a 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

 comma and then an 
\family typewriter
ec_declaration
\family default
.
 This effectively means that the 
\family typewriter
ec_declaration_list
\family default
 is a comma-separated list of 
\family typewriter
ec_declaration
\family default
s, with one or more 
\family typewriter
ec_declaration
\family default
s.
 
\end_layout

\begin_layout Standard
There is no comma after the last 
\family typewriter
ec_declaration
\family default
.
 To see why, notice that the part that is repeated starts with a comma and
 ends with an 
\family typewriter
ec_declaration
\family default
.
 Thus, no matter how many times you repeat this sequence, the 
\family typewriter
ec_declaration
\family default
 will always be last, and the comma will never be last.
 
\end_layout

\begin_layout Standard
That it can be repeated 
\emph on
zero
\emph default
 or more times simply means that it is optional.
 In the rule whose left hand side is 
\family typewriter
ec_declaration_list
\family default
, the first 
\family typewriter
ec_declaration
\family default
 can stand alone.
\end_layout

\begin_layout Standard
Notice also that, in the rule for 
\family typewriter
create_enumeration_statement
\family default
, there are braces as well.
 These braces, however, are enclosed in 
\begin_inset Quotes eld
\end_inset

double quotes
\begin_inset Quotes erd
\end_inset

 and are therefore terminals.
 Thus they do not have the meaning of repetition, but are to be written
 in the statement when writing a CREATE ENUMERATION statement.
 The braces without double quotes are repetition-braces and must not be
 written.
\end_layout

\end_deeper
\begin_layout Section
Acknowledgements
\end_layout

\begin_layout Subsection
Persons
\end_layout

\begin_layout Standard
Thanks to Crist-Jan Doedens for inventing the MdF model and the QL query
 language, on which Emdros rests.
 Thanks also to Henk Harmsen for inventing the forerunner to MQL.
 Thanks to Constantijn Sikkel, Hendrik Jan Bosman, and Kirk E.
 Lowery for much support and encouragement through the years.
 Thanks to Claus TÃ¸ndering, Kirk E.
 Lowery, Christ Wilson, and Martin KorshÃ¸j Petersen for code contributions.
\end_layout

\begin_layout Subsection
Regular expression support
\begin_inset CommandInset label
LatexCommand label
name "PCRE"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
PCRE!library|bold
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
regular expressions!support
\end_layout

\end_inset


\end_layout

\begin_layout Standard
MQL has support for regular expressions in queries.
 Regular expression support is provided by the PCRE library package, which
 is open source software, written by Philip Hazel
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Hazel, Philip
\end_layout

\end_inset

, and copyright by the University of Cambridge, England.
 The PCRE library can be downloaded from:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\family typewriter
ftp.csx.cam.ac.uk/pub/software/programming/pcre/
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
The PCRE included with Emdros is a modified copy.
\end_layout

\begin_layout Standard
We'll get back to regular expressions in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:Regular-expressions"

\end_inset

 and in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:PCRE-license"

\end_inset

.
 See also the index.
\end_layout

\begin_layout Chapter
The EMdF model
\begin_inset CommandInset label
LatexCommand label
name "chapter:EMdF-model"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model|bold
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This chapter is a gentle introduction to the 
\begin_inset Quotes eld
\end_inset

EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 The EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

 is a 
\begin_inset Quotes eld
\end_inset

database model.
\begin_inset Quotes erd
\end_inset

 As such, it provides a solid theoretical foundation for the EMdF database
 engine and the MQL query language.
 However, its importance goes beyond being a theoretical foundation.
 The EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

 defines the very way we talk about text in an EMdF database
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!database
\end_layout

\end_inset

, and as such, it provides the 
\begin_inset Quotes eld
\end_inset

vocabulary
\begin_inset Quotes erd
\end_inset

 of the language by which you, the user, communicate with the EMdF database
 engine
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!database engine
\end_layout

\end_inset

.
 Put another way, the EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

 defines the concepts which you use to talk about text when communicating
 with the EMdF database engine
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!database engine
\end_layout

\end_inset

.
 Thus it is very important that you understand all of the concepts involved
 in the EMdF model.
 However, these concepts are neither many nor difficult to understand.
 This chapter is designed to help you understand them, whatever your background.
\end_layout

\begin_layout Standard
This chapter is built around the concepts in the EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

: monads, objects, object types, features, and a few other concepts.
 These four concepts: monads, objects, object types, and features, form
 the backbone of the EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

.
 Once you have understood these, the rest are mere extensions which follow
 fairly easily.
\end_layout

\begin_layout Standard
And so, with no further ado, let us jump into the first of the four major
 concepts, monads.
\end_layout

\begin_layout Section
Monads
\end_layout

\begin_layout Subsection
Monads and textual sequence
\end_layout

\begin_layout Standard
Language is linear in nature.
 We produce language in real-time, with sequences of sounds forming sequences
 of words.
 Text, being language, is also linear in nature.
 In the EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

, this linearity is captured by the monads.
\end_layout

\begin_layout Standard
A monad is simply an integer â€“ no more, no less.
 The sequence of integers (1,2,3,4,\SpecialChar ldots
) forms the backbone to which the flow
 of the text is tied.
 Thus, because a monad is an integer, and because we can order the integers
 in an unambiguous way, we use the sequence of monads to keep track of the
 sequence of textual information.
\end_layout

\begin_layout Standard
The sequence of monads begins at 1 and extends upwards to some large number,
 depending on the size of the database.
\end_layout

\begin_layout Subsection
Granularity
\end_layout

\begin_layout Standard
What unit of text does a monad correspond to? For example, does a monad
 correspond to a morpheme, a word, a sentence, or a paragraph?
\end_layout

\begin_layout Standard
The answer is that you, the database user, decide the granularity of the
 EMdF database
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!database
\end_layout

\end_inset

.
 You do this before any text is put into the database.
 If you want each monad to correspond to a morpheme, you simply decide that
 this is so.
 A more common choice is for each monad to correspond to a word.
 However, there is nothing implicit or explicit in the EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

 that prevents the user from deciding that another unit of text should correspon
d to a monad.
 Be aware, however, that once the choice has been made, and the database
 has been populated with text, it is not easy to revoke the decision, and
 go from, say, a word-level granularity to a morpheme-granularity.
\end_layout

\begin_layout Subsection
Text flow
\end_layout

\begin_layout Standard
What is the reading-order of an EMdF database
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!database
\end_layout

\end_inset

? Is it left-to-right, right-to-left, top-to-bottom, or something else?
\end_layout

\begin_layout Standard
The answer is that the EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

 is agnostic with respect to reading-order.
 In the EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

, what matters is the textual sequence, as embodied by the monads.
 How the text is displayed on the screen is not specified in the EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The MQL query language provides for both 7-bit (ASCII) and 8-bit encodings
 of strings, which means that the database implementor can implement any
 character-set that can be encoded in an 8-bit encoding, including Unicode
 UTF-8.
\end_layout

\begin_layout Subsection
Conclusion
\end_layout

\begin_layout Standard
A monad is an integer.
 The sequence of integers (1,2,3,4,\SpecialChar ldots
) dictates the textual sequence.
 The granularity of an EMdF database
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!database
\end_layout

\end_inset

 is decided by the database-implementor.
 The EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

 is agnostic with respect to reading-order (right-to-left, left-to-right,
 etc.).
\end_layout

\begin_layout Section
Objects
\end_layout

\begin_layout Subsection
What is an object?
\end_layout

\begin_layout Standard
An object is a set of monads.
 Thus, for example, an object might consist of the monads {1,2,4}.
 This object could, for example, be a phrase-object consisting of three
 words (assuming the monad-granularity is 
\begin_inset Quotes eld
\end_inset

one monad, one word
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Standard
The EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

 does not impose any restrictions on the set of monads making up an object.
 For example, objects can be discontiguous, as in the above example.
 In addition, objects can have exactly the same monads as other objects,
 and objects may share monads.
\end_layout

\begin_layout Standard
We need the last two concepts, object types and features, before we can
 understand exactly how an object can encode, say, a word or a phrase.
\end_layout

\begin_layout Section
Object types
\end_layout

\begin_layout Subsection
Objects are grouped in types
\end_layout

\begin_layout Standard
In any populated EMdF database
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!database
\end_layout

\end_inset

, there will be at least one object type.
 Otherwise, no objects can be created, and thus the database cannot store
 textual information.
\end_layout

\begin_layout Standard
Objects are grouped in types, such as 
\begin_inset Quotes eld
\end_inset

word
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

phrase
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

clause
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

sentence
\begin_inset Quotes erd
\end_inset

, but also 
\begin_inset Quotes eld
\end_inset

chapter
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

part
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

page
\begin_inset Quotes erd
\end_inset

, etc.
 Each of these are potential object types that the user can create.
 Once an object type has been created, objects of that type can also be
 created.
\end_layout

\begin_layout Standard
Any object is of exactly one object type.
 Object types are what gives objects their interpretation.
 For example, an object of type 
\begin_inset Quotes eld
\end_inset

phrase
\begin_inset Quotes erd
\end_inset

 is, by itself, just a set of monads, such as {1,2,4}.
 But seen in conjunction with its object type, it becomes possible to interpret
 those monads as a number of words that make up a phrase.
\end_layout

\begin_layout Standard
An object type is also what determines what 
\emph on
features
\emph default
 an object has.
 And thus we turn to the last major concept in the EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

, namely features.
\end_layout

\begin_layout Section
Features
\end_layout

\begin_layout Subsection
What is a feature?
\end_layout

\begin_layout Standard
A feature is a way of assigning data to an object.
 For example, say we have an object of type 
\begin_inset Quotes eld
\end_inset

word
\begin_inset Quotes erd
\end_inset

.
 Let us call this object 
\begin_inset Quotes eld
\end_inset

O
\begin_inset Quotes erd
\end_inset

, and let us say that it consists of the singleton monad set {1}.
 Assume, furthermore, that the object type 
\begin_inset Quotes eld
\end_inset

word
\begin_inset Quotes erd
\end_inset

 has a feature called 
\begin_inset Quotes eld
\end_inset

surface_text
\begin_inset Quotes erd
\end_inset

.
 Then this feature, taken on the object O, might be the string 
\begin_inset Quotes eld
\end_inset

In
\begin_inset Quotes erd
\end_inset

.
 This is denoted as 
\begin_inset Quotes eld
\end_inset

O.surface_text
\begin_inset Quotes erd
\end_inset

.
 If we have another object, O
\begin_inset Formula $_{2}$
\end_inset

, which consists of the singleton monad set {2}, the value O
\begin_inset Formula $_{2}$
\end_inset

.surface_text might be 
\begin_inset Quotes eld
\end_inset

the
\begin_inset Quotes erd
\end_inset

.
 Thus we know that the first text in this EMdF database
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!database
\end_layout

\end_inset

 starts with the words 
\begin_inset Quotes eld
\end_inset

In the
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
Object types have features
\end_layout

\begin_layout Standard
An object type has a fixed number of features defined by the database implemento
r.
 For example, it might be necessary for a particular application to have
 these features on the object type 
\begin_inset Quotes eld
\end_inset

word
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Itemize
surface_text
\end_layout

\begin_layout Itemize
lexical_form
\end_layout

\begin_layout Itemize
part_of_speech
\end_layout

\begin_layout Itemize
preceding_punctuation
\end_layout

\begin_layout Itemize
trailing_punctuation
\end_layout

\begin_layout Itemize
ancestor
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

ancestor
\begin_inset Quotes erd
\end_inset

 feature would be a pointer to another object, allowing the user to create
 an immediate constituency hierarchy.
\end_layout

\begin_layout Standard
The object type 
\begin_inset Quotes eld
\end_inset

phrase
\begin_inset Quotes erd
\end_inset

 might have the following list of features:
\end_layout

\begin_layout Itemize
phrase_type
\end_layout

\begin_layout Itemize
ancestor
\end_layout

\begin_layout Subsection
Features have types
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
types
\end_layout

\end_inset


\end_layout

\begin_layout Standard
An object type has a number of features.
 Each feature, in turn, has one type.
 In the current implementation of the EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

, a feature can have one of the following types:
\end_layout

\begin_layout Itemize
integer
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
types!integer
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
integer
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
string
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
types!string
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
string
\end_layout

\end_inset

 (which is an 8-bit string
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
types!8-bit string
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
ascii
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
types!ascii
\end_layout

\end_inset

 (which is a 7-bit ASCII
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ASCII
\end_layout

\end_inset

 string
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
types!7-bit string
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
id_d
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
id
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

d
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
types!id
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

d
\end_layout

\end_inset

 (which is an object id
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
object!id
\end_layout

\end_inset

 â€“ we will get to this later)
\end_layout

\begin_layout Itemize
enumeration
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
types!enumeration
\end_layout

\end_inset

 (which we will also get to later in this chapter)
\end_layout

\begin_layout Itemize
list of integer
\end_layout

\begin_layout Itemize
list of id_d
\end_layout

\begin_layout Itemize
list of enumeration constants
\end_layout

\begin_layout Itemize
sets of monads
\end_layout

\begin_layout Section
Example
\end_layout

\begin_layout Standard
We have now defined all of the four major concepts in the EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

: monad
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
monad!example
\end_layout

\end_inset

, object
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
object!example
\end_layout

\end_inset

, object type
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
object type!example
\end_layout

\end_inset

, and feature
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
feature!example
\end_layout

\end_inset

.
 It is time to make them more concrete by giving an example of a very small
 EMdF database
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!database!example
\end_layout

\end_inset

.
 Look at figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "TheDoor"

\end_inset

.
\begin_inset Float figure
placement htbp
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename TheDoor.eps
	width 60page%
	keepAspectRatio
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Exemplifying the four major concepts of the EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

: monad, object, object type, and feature.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "TheDoor"

\end_inset


\end_layout

\end_inset

At the top of the figure, you see the sequence of monads, 1 to 9.
 Just below this sequence, you see the object type 
\begin_inset Quotes eld
\end_inset

Word
\begin_inset Quotes erd
\end_inset

 with its object ordinals, 1 to 9.
 In this example, the granularity is 
\begin_inset Quotes eld
\end_inset

one monad, one word.
\begin_inset Quotes erd
\end_inset

 Thus 
\emph on
Word
\emph default
 number 1 corresponds to 
\emph on
monad
\emph default
 number 1, but they are really separate entities.
 Word number 1 
\emph on
consists of
\emph default
 the set of monads {1}.
 
\end_layout

\begin_layout Standard
This becomes clearer when you notice that Clause number 2 consists of the
 set of monads {3,4,5,6,7}.
 Thus there is a fundamental distinction between the number of an object
 (also called object ordinal), and the set of monads making up that object.
\end_layout

\begin_layout Standard
Some of the object types in the figure (Word and Phrase) have a number of
 
\emph on
features
\emph default
.
 The object type 
\begin_inset Quotes eld
\end_inset

Word
\begin_inset Quotes erd
\end_inset

 has the features 
\begin_inset Quotes eld
\end_inset

surface
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

part_of_speech
\begin_inset Quotes erd
\end_inset

.
 The 
\begin_inset Quotes eld
\end_inset

Phrase
\begin_inset Quotes erd
\end_inset

 object type has only one feature, namely 
\begin_inset Quotes eld
\end_inset

phrase_type
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Notice that objects can be discontiguous.
 The Clause object with object ordinal 1 consists of the monads {1,2,8,9}.
 Thus there can be gaps in an object.
\end_layout

\begin_layout Standard
Notice also that an object type need not have features.
 The object types Clause_atom, Clause, and Sentence have no features in
 the figure.
\end_layout

\begin_layout Section
Other concepts
\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
Having learned the basic concepts of the EMdF model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!model
\end_layout

\end_inset

, we now turn to the additional concepts which we use to talk about EMdF
 databases
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!database
\end_layout

\end_inset

.
 These concepts are:
\end_layout

\begin_layout Enumerate
The special object types pow_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pow
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

, any_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
any
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

, and all_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
all
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
object ids (id_d, id_m)
\end_layout

\begin_layout Enumerate
self
\end_layout

\begin_layout Enumerate
part_of
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
part
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

of
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
gaps
\end_layout

\begin_layout Enumerate
borders, first, and last
\end_layout

\begin_layout Enumerate
enumerations
\end_layout

\begin_layout Enumerate
min_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
min
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

 and max_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
max
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
arbitrary monad sets
\end_layout

\begin_layout Enumerate
databases
\end_layout

\begin_layout Subsection
pow_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pow
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m|bold
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In each EMdF database
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!database
\end_layout

\end_inset

, we assume an abstract object type, pow_m.
 This object type has one object for every possible set of monads.
 Thus the pow_m object type has objects consisting of the sets {1},{2},{3},
 \SpecialChar ldots
, {1,2}, {1,3}, {1,4}, \SpecialChar ldots
, {2,3},{2,4},{2,5},\SpecialChar ldots
,{1,2,3},{1,2,4}, \SpecialChar ldots
, etc.
 Every possible set of monads is represented in the pow_m object type.
\end_layout

\begin_layout Standard
The pow_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pow
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

 object type is an 
\emph on
abstract
\emph default
 object type.
 That is, no objects of type pow_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pow
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

 actually exist in the EMdF database
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EMdF!database
\end_layout

\end_inset

.
 However, it is useful to be able to talk about a particular pow_m object.
 In effect, a pow_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pow
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

 object is simply a set of monads, and sometimes, it is convenient to be
 able to talk about a particular pow_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pow
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

 object.
 This is especially true with gaps (see below).
\end_layout

\begin_layout Standard
The pow_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pow
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

 object type has no features.
\end_layout

\begin_layout Subsection
any_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
any
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m|bold
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The any_m object type is an abstract object type like pow_m.
 Each of its objects consist of a single monad.
 So the any_m objects are: {1}, {2}, {3}, \SpecialChar ldots
 etc.
 The any_m object type has no features.
\end_layout

\begin_layout Subsection
all_m
\begin_inset CommandInset label
LatexCommand label
name "subsec:all_m"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
all
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m|bold
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The all_m object type has only one object, and it consists of all the monads
 in the database.
 That is, it consists of the monads from min_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
min
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

 to max_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
max
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

 (see sections 
\begin_inset CommandInset ref
LatexCommand vref
reference "SELECT_MIN_M"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand vref
reference "SELECT_MAX_M"

\end_inset

), the smallest and the largest monads in use in the database at any given
 time.
 This one object is called all_m-1.
\end_layout

\begin_layout Subsection
object ids (id_d, id_m)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
object!id|bold
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
object!id
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

d|bold
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
object!id
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m|bold
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
id
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

d|bold
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
id
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m|bold
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Each object in the database (apart from pow_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pow
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

 objects) has an 
\emph on
object id_d
\emph default
.
 An object id_d is a unique ID assigned to the object when the object is
 created.
 The id_d is used only for that particular object, and the id_d is never
 used again when the object is deleted.
\end_layout

\begin_layout Standard
A feature can have the type 
\begin_inset Quotes eld
\end_inset

id_d
\begin_inset Quotes erd
\end_inset

, meaning that the values of the feature are taken from the id_ds in the
 database.
\end_layout

\begin_layout Standard
Each object in the database (including pow_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pow
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

, any_m, and all_m objects) also has an id_m.
 The id_m is simply the set of monads which makes up the object.
 This is not strictly an ID, since objects of the same object type may have
 exactly the same monads.
 However, for historical reasons, this is called an id_m.
 See 
\begin_inset CommandInset citation
LatexCommand cite
key "Doedens94"
literal "true"

\end_inset

 or 
\begin_inset CommandInset citation
LatexCommand cite
key "Standard-MDF"
literal "true"

\end_inset

 for details.
\end_layout

\begin_layout Subsection
self
\begin_inset CommandInset label
LatexCommand label
name "self"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
self|bold
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Each object type in the database (apart from the pow_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pow
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

, any_m, and all_m object types) has a feature called 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Quotes erd
\end_inset

.
 This is used to get the object id_d of the object in question.
 
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Quotes erd
\end_inset

 feature is a read-only feature, which means that you cannot update an object's
 self feature, or write to it when creating the object.
 The value of the 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Quotes erd
\end_inset

 feature is assigned automatically when the object is created.
\end_layout

\begin_layout Standard
The type of the 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Quotes erd
\end_inset

 feature is 
\begin_inset Quotes eld
\end_inset

id_d
\begin_inset Quotes erd
\end_inset

.
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
self!type of
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
part_of
\begin_inset CommandInset label
LatexCommand label
name "part_of"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
part
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

of
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If all of the monads of one object, O
\begin_inset Formula $_{1}$
\end_inset

, are contained within the set of monads making up another object, O
\begin_inset Formula $_{2}$
\end_inset

, we say that O
\begin_inset Formula $_{1}$
\end_inset

 is part_of O
\begin_inset Formula $_{2}$
\end_inset

.
\end_layout

\begin_layout Standard
For example, an object with the monads {1,2} would be part_of another object
 with the monads {1,2,4}.
\end_layout

\begin_layout Standard
In mathematical terms, O
\begin_inset Formula $_{1}$
\end_inset

 is part_of O
\begin_inset Formula $_{2}$
\end_inset

 if and only if O
\begin_inset Formula $_{1}$
\end_inset

 
\begin_inset Formula $\subseteq$
\end_inset

 O
\begin_inset Formula $_{2}$
\end_inset

.
\end_layout

\begin_layout Subsection
gaps
\begin_inset CommandInset label
LatexCommand label
name "gaps"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps|bold
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Objects may have gaps.
 A gap in an object is a maximal stretch of monads which are not part of
 the object, but which are nevertheless within the boundaries of the endpoints
 of the object.
 For example, an object consisting of the monads {1,3,4,7,8,13} has three
 gaps: {2}, {5,6}, and {9,10,11,12}.
\end_layout

\begin_layout Standard
Note that gaps are always maximal, i.e., extend across the whole of the gap
 in the object.
 For example, {6} is not a gap in the above object: instead, {5,6} is.
\end_layout

\begin_layout Subsection
borders, first, last
\begin_inset CommandInset label
LatexCommand label
name "borders, first, last"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
borders|bold
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Each non-empty object, being a set of monads, has a left border and a right
 border.
 The left border is the lowest monad in the set, while the right border
 is the highest monad in the set.
 These are also called the first monad and the last monad in the object.
 If we have an object O, the notation for these monads is O.first and O.last.
\end_layout

\begin_layout Standard
For example, if we have an object O consisting of the monads {2,3,4,5},
 then O.first = 2 and O.last = 5.
\end_layout

\begin_layout Subsection
consecutive with respect to a set of monads
\begin_inset CommandInset label
LatexCommand label
name "consecutive"

\end_inset


\end_layout

\begin_layout Standard
The basic idea is that two sets of monads are consecutive if they follow
 each other without any gaps in between.
 However, this idea is extended so that the 
\begin_inset Quotes eld
\end_inset

no gaps in between
\begin_inset Quotes erd
\end_inset

 is interpreted with respect to a reference set of monads called Su.
 For example, if Su = {1,2,5,6}, then the sets {2} and {5} are consecutive
 with respect to Su.
 However, the sets {2} and {6} are not consecutive with respect to Su, since
 there is a 
\begin_inset Quotes eld
\end_inset

gap
\begin_inset Quotes erd
\end_inset

 consisting of the monad 5 in between the two sets.
 Likewise, the sets {1} and {5} are not consecutive with respect to Su,
 because Su has a monad, 2, which is a 
\begin_inset Quotes eld
\end_inset

gap
\begin_inset Quotes erd
\end_inset

 between the two sets.
\end_layout

\begin_layout Subsection
enumerations
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration|bold
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Definition
\end_layout

\begin_layout Standard
Each feature, it will be remembered, is of a certain type.
 These can be integers, strings, and id_ds, but they can also be enumerations.
 An enumeration is a set of pairs, where each pair consists of a constant-identi
fier and an integer value.
 
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout Standard
For example, the enumeration 
\begin_inset Quotes eld
\end_inset

phrase_type_t
\begin_inset Quotes erd
\end_inset

 might have the pairs of constants and values as in table 
\begin_inset CommandInset ref
LatexCommand vref
reference "phrase_type_t"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement htbp
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
constant
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
phrase_type_unknown
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
VP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AdvP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ParticleP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
phrase_type_t enumeration
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "phrase_type_t"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!default constant|bold
\end_layout

\end_inset

Default constant
\end_layout

\begin_layout Standard
Each enumeration has exactly one default constant which is used when the
 user does not give a value for a feature with that enumeration type.
 In this example, 
\begin_inset Quotes eld
\end_inset

phrase_type_unknown
\begin_inset Quotes erd
\end_inset

 might be the default.
\end_layout

\begin_layout Subsubsection
Terminology
\end_layout

\begin_layout Standard
The constants are called 
\emph on

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset

enumeration constants
\emph default
, while the type gathering the enumeration constants into one whole is called
 an 
\emph on
enumeration
\emph default
.
\end_layout

\begin_layout Subsubsection
Names are identifiers
\end_layout

\begin_layout Standard
The names of both enumerations and enumeration constants must be 
\emph on
identifiers
\emph default
.
 See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Lexical-conventions"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "subsec:Lexical-conventions"

\end_inset

 for information on what an identifier is.
\end_layout

\begin_layout Subsubsection
Each enumeration is a name-space
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
namespace
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!namespace
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Each enumeration forms its own namespace.
 All name-spaces in the MQL language are orthogonal to each other.
 This means that two enumeration constants within the same enumeration cannot
 be called by the same constant-identifier, but two enumeration constants
 in two different enumerations may be the same.
 For more information, see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Namespaces"

\end_inset

 for more information.
\end_layout

\begin_layout Subsubsection
Enumeration constants must be unique
\end_layout

\begin_layout Standard
Enumeration constants must be unique within each enumeration, both in their
 values and in their names.
 For example, you cannot have two labels with the same name in the same
 enumeration.
 Nor can you have two labels with the same value in the same enumeration,
 even if the labels have different names.
\end_layout

\begin_layout Standard
This is different from C or C++ enumerations, where the same value can be
 assigned to different labels.
\end_layout

\begin_layout Standard
Thus an enumeration is effectively a one-to-one correspondence (also called
 a bijective function) between a set of label names and a set of values.
\end_layout

\begin_layout Subsection
min_m, max_m
\begin_inset CommandInset label
LatexCommand label
name "min_m,max_m"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
max
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m|bold
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
min
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m|bold
\end_layout

\end_inset


\end_layout

\begin_layout Standard
An EMdF database has a knowledge of which is the smallest monad in use (min_m)
 and which is the largest monad in use (max_m).
 Normally, you don't need to worry about these; the database maintains its
 knowledge of these monads without your intervention.
 You can, however, query the database for the minimum and maximum monads
 (see sections 
\begin_inset CommandInset ref
LatexCommand vref
reference "SELECT_MIN_M"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand vref
reference "SELECT_MAX_M"

\end_inset

), and when you query the database for objects (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "SELECT_OBJECTS"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "SELECT_OBJECTS"

\end_inset

), this is done within the confines of the minimum and maximum monads.
 Thus it is useful to know of their existence, but you needn't worry too
 much about them.
\end_layout

\begin_layout Standard
The associated statements are SELECT MIN_M (section 
\begin_inset CommandInset ref
LatexCommand vref
reference "SELECT_MIN_M"

\end_inset

) and SELECT MAX_M (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "SELECT_MAX_M"

\end_inset

).
\end_layout

\begin_layout Subsection
Arbitrary monad sets
\begin_inset CommandInset label
LatexCommand label
name "subsec:Arbitrary-monad-sets"

\end_inset


\end_layout

\begin_layout Standard
Each database has a central repository of monad sets which are not associated
 with any objects.
 That is, they are not objects, have no object type, and no features.
 They are just plain monad sets.
\end_layout

\begin_layout Standard
These monad sets can be used as the basis for searches.
 That is, when doing a SELECT ALL OBJECTS query (or SELECT FOCUS OBJECTS),
 one can specify within which arbitrary monad set the search should be conducted.
\end_layout

\begin_layout Standard
The associated statements are SELECT MONAD SETS (section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:SELECT-MONAD-SETS"

\end_inset

), GET MONAD SETS (section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:GET-MONAD-SETS"

\end_inset

), CREATE MONAD SET (section 
\begin_inset CommandInset ref
LatexCommand vref
reference "CREATE-MONAD-SET"

\end_inset

), UPDATE MONAD SET (section 
\begin_inset CommandInset ref
LatexCommand vref
reference "UPDATE-MONAD-SET"

\end_inset

), and DROP MONAD SET (section 
\begin_inset CommandInset ref
LatexCommand vref
reference "DROP-MONAD-SET"

\end_inset

).
\end_layout

\begin_layout Subsection
Databases
\end_layout

\begin_layout Standard
The EMdF model has a concept of 
\begin_inset Quotes eld
\end_inset

database.
\begin_inset Quotes erd
\end_inset

 It is an organizational concept which generally corresponds to what the
 back-end database system calls a 
\begin_inset Quotes eld
\end_inset

database.
\begin_inset Quotes erd
\end_inset

 Within a database, there is one string of monads starting at 1 and extending
 upwards to some very large number.
 Within this stretch of monads, the user is free to create objects.
\end_layout

\begin_layout Standard
You may need to issue the USE DATABASE statement (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "USE DATABASE"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "USE DATABASE"

\end_inset

) as the first thing you do before doing anything else, in order to tell
 Emdros which database you want to deal with.
 Ask the implementor of your Emdros application whether this is what you
 should do.
\end_layout

\begin_layout Standard
A database can be created with the CREATE DATABASE statement (see section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "CREATE_DATABASE"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "CREATE_DATABASE"

\end_inset

).
\end_layout

\begin_layout Section
Encryption
\begin_inset CommandInset label
LatexCommand label
name "sec:Encryption"

\end_inset


\end_layout

\begin_layout Standard
Dr.
 D.
 Richard Hipp, the author of SQLite, makes an encryption-enabled version
 available for a fee.
 There is skeleton support for SQLite encryption in Emdros, meaning one
 should be able to use Dr.
 Hipp's encryption-enabled version of SQLite with Emdros and get encryption-supp
ort in Emdros on SQLite.
 This has not been tested, however; only the skeleton is there.
 See <http://www.hwaci.com>, the website of Dr.
 Hipp's consulting company, for more information about Dr.
 Hipp's encryption.
\end_layout

\begin_layout Standard
In this manual, when we speak of 
\begin_inset Quotes eld
\end_inset

encryption
\begin_inset Quotes erd
\end_inset

 on SQLite, please be aware that the actual encryption is not a part of
 Emdros, and you will achieve the exact same results and generate the exact
 same Emdros databases whether you use a key or not, unless you obtain an
 encryption-enabled SQLite from somewhere.
\end_layout

\begin_layout Chapter
MQL database manipulation
\begin_inset CommandInset label
LatexCommand label
name "chapter:MQL Query Language"

\end_inset


\end_layout

\begin_layout Section
Preliminaries
\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
In this section on preliminaries, we will talk about four things.
 First, we describe what terminals are used in the grammar-fragments in
 this manual.
 Second, we describe the lexical conventions of MQL.
 Third, we describe the name-spaces available in MQL.
 And finally, we describe some top-level constraints in MQL syntax.
\end_layout

\begin_layout Subsection
Terminals
\end_layout

\begin_layout Standard
The following terminals are used in this grammar:
\end_layout

\begin_layout Itemize
T_IDENTIFIER 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
T_INTEGER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

INTEGER
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
T_STRING
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

STRING
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
T_MARKS
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

MARKS
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
\begin_inset Quotes eld
\end_inset

strings
\begin_inset Quotes erd
\end_inset


\family default
, e.g., 
\family typewriter

\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The fifth kind, e.g., 
\family typewriter

\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset


\family default
 represent keywords in MQL.
 They are parsed as case-insensitive strings without the quotes.
 
\end_layout

\begin_layout Subsection
Lexical conventions
\begin_inset CommandInset label
LatexCommand label
name "subsec:Lexical-conventions"

\end_inset


\end_layout

\begin_layout Standard
The lexical conventions for MQL are as follows:
\end_layout

\begin_layout Enumerate
There are two kinds of comments:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Enclosed in 
\begin_inset Quotes eld
\end_inset

/*
\begin_inset Quotes erd
\end_inset

 (opening) and 
\begin_inset Quotes eld
\end_inset

*/
\begin_inset Quotes erd
\end_inset

 (closing).
 This kind of comment can span multiple lines.
 This is the same as C-style comments.
 
\end_layout

\begin_layout Enumerate
Starting with 
\begin_inset Quotes eld
\end_inset

//
\begin_inset Quotes erd
\end_inset

 and ending at the end of the line.
 This is the style used in C++.
\end_layout

\end_deeper
\begin_layout Enumerate
All keywords (such as 
\family typewriter

\begin_inset Quotes eld
\end_inset

CREATE
\begin_inset Quotes erd
\end_inset


\family default
, 
\family typewriter

\begin_inset Quotes eld
\end_inset

SELECT
\begin_inset Quotes erd
\end_inset


\family default
, 
\family typewriter

\begin_inset Quotes eld
\end_inset

<=
\begin_inset Quotes erd
\end_inset


\family default
, etc.) are case-
\emph on
in
\emph default
sensitive insofar as they are made up of letters.
 Keywords are enclosed in 
\family typewriter

\begin_inset Quotes eld
\end_inset

double quotes
\begin_inset Quotes erd
\end_inset


\family default
 in the syntax-sections below.
\end_layout

\begin_layout Enumerate
A T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER|bold
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
identifier
\end_layout

\end_inset

 begins with any letter (a-z,A-Z) or an underscore (_), followed by zero
 or more letters (a-z,A-Z), numbers (0-9), or underscores (_).
 For example, 
\begin_inset Quotes eld
\end_inset

Word
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

_delimiter
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

i18n
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

phrase_type_t
\begin_inset Quotes erd
\end_inset

 are all identifiers.
 However, 
\begin_inset Quotes eld
\end_inset

8bf
\begin_inset Quotes erd
\end_inset

 is not an identifier because it does not start with a letter or an underscore.
 Neither is bf@foo.com an identifier, because it does not consist solely
 of letters, underscores, and numbers.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Whether a T_IDENTIFIER is case-sensitive
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
case-sensitivity
\end_layout

\end_inset

 depends on what it stands for (i.e., what its 
\begin_inset Quotes eld
\end_inset

referent
\begin_inset Quotes erd
\end_inset

 is).
 See table 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:Case-sensitivity-of-T_IDENTIFIERs"

\end_inset

 for a description.
\end_layout

\end_deeper
\begin_layout Enumerate
A T_INTEGER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

INTEGER|bold
\end_layout

\end_inset

 is any sequence of one or more digits (0-9).
 For example, 
\begin_inset Quotes eld
\end_inset

0
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

42
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

747
\begin_inset Quotes erd
\end_inset

 are all integers.
\end_layout

\begin_layout Enumerate
A T_STRING
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

STRING|bold
\end_layout

\end_inset

 is one of two kinds:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
A T_STRING can start with a single quote ('), followed by zero or more character
s which are not single quotes, and ending with another single quote (').
 Such a string can contain newlines.
\end_layout

\begin_layout Enumerate
A T_STRING can also start with a double quote ("), followed by zero or more
 characters, escape-sequences (see table 
\begin_inset CommandInset ref
LatexCommand ref
reference "Escape-sequences"

\end_inset

), or newlines, and ending with a double quote (").
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "T_MARKS-definition"

\end_inset

A T_MARKS
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

MARKS|bold
\end_layout

\end_inset

 is a sequence of one or more identifiers, each prefixed by a backping (`).
 For example, the following are all T_MARKS: 
\begin_inset Quotes eld
\end_inset

`yellow
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

`red`context
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

`marks`are`useful
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

`Flash_Gordon`was`a`Hero
\begin_inset Quotes erd
\end_inset

.
 More precisely, a T_MARKS conforms to the regular expression "(`[a-zA-Z_][a-zA-
Z_0-9]*)+".
\end_layout

\begin_layout Enumerate
White-space (spaces, newlines, and tabs) is ignored except in T_STRINGs.
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

STRING
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
T_IDENTIFIER 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset

referent
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Case-sensitivity
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Database name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
insensitive
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object type name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
insensitive
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Enumeration name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
insensitive
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Enumeration constant name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sensitive
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Case-sensitivity
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
case-sensitivity
\end_layout

\end_inset

 of T_IDENTIFIERs
\begin_inset CommandInset label
LatexCommand label
name "cap:Case-sensitivity-of-T_IDENTIFIERs"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement htbp
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Escape sequences
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
newline (ASCII 10)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
t
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
horizontal tab (ASCII 9)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
v
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertical tab (ASCII 11)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
b
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
backspace (ASCII 8)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bell (ASCII 7)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
r
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
carriage-return (ASCII 13)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
f
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
form-feed (ASCII 12)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash

\backslash

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
slash (
\backslash
) (ASCII 92)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
question-mark (?) (ASCII 63)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
'
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
single quote (') (ASCII 39)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
"
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
double quote (") (ASCII 34)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
ooo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Octal number (e.g., 
\backslash
377 is 255)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
xXX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hexadecimal number (e.g., 
\backslash
xFF is 255)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Escape sequences in strings enclosed in double quotes.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "Escape-sequences"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Name-spaces
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Namespace|bold
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:Namespaces"

\end_inset


\end_layout

\begin_layout Standard
A name-space, in computer-terminology, is a language-domain with fixed borders
 within which names must be unique.
 
\emph on
Within
\emph default
 a name-space, two different entities 
\emph on
cannot
\emph default
 be called by the same name without causing a name-clash.
 In other words, within a name-space, names must be unique.
 However, if two name-spaces are 
\emph on
orthogonal
\emph default
 to each other, then a name from one name-space 
\emph on
can
\emph default
 be the same as a name from the other name-space 
\emph on
without
\emph default
 causing a name-clash.
\end_layout

\begin_layout Standard
In MQL, the following name-spaces exist.
 They are all orthogonal to each other:
\end_layout

\begin_layout Itemize
Each object type forms a name-space with respect to its features.
 That is, a single object type cannot have two features with the same name,
 but different object types can have features with the same name.
 The two features with the same name need not even have the same feature
 type.
 This is because all name-spaces are orthogonal to each other.
\end_layout

\begin_layout Itemize
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!namespace
\end_layout

\end_inset

Each enumeration forms a name-space with respect to its constants
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset

.
 That is, a single enumeration cannot have two enumeration constants with
 the same name, but different enumerations can have enumeration constants
 with the same name.
 Since all name-spaces are orthogonal to each other, the two enumeration
 constants with the same name need not have the same integer value.
\end_layout

\begin_layout Itemize
Each database forms a global name-space with respect to object type names.
 That is, object type names must be globally unique within a database.
 However, since all name-spaces are orthogonal to each other, you can have
 features or enumeration constants which have the same name as an object
 type.
\end_layout

\begin_layout Subsection
Top-level constraints on MQL syntax
\end_layout

\begin_layout Standard
The MQL engine can receive any number (greater than or equal to 1) of MQL
 statements.
 The only requirement is that each statement must end with the keyword 
\family typewriter

\begin_inset Quotes eld
\end_inset

GO
\begin_inset Quotes erd
\end_inset


\family default
.
 This keyword acts as a delimiter between each statement.
 The last statement may also be terminated with 
\family typewriter

\begin_inset Quotes eld
\end_inset

GO
\begin_inset Quotes erd
\end_inset


\family default
, but need not be.
 Single statements on their own need not be terminated with 
\family typewriter

\begin_inset Quotes eld
\end_inset

GO
\begin_inset Quotes erd
\end_inset


\family default
 either.
\end_layout

\begin_layout Standard
If you connect to the MQL engine in daemon-mode, you must append the meta-level
 statement 
\begin_inset Quotes eld
\end_inset

QUIT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
QUIT
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 after the 
\begin_inset Quotes eld
\end_inset

GO
\begin_inset Quotes erd
\end_inset

 of the last statement.
\end_layout

\begin_layout Section
Return types
\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
MQL is made up of statements, each of which either returns something or
 doesn't.
 If it returns something, there are two possibilities for what the return-type
 can be.
 It can be:
\end_layout

\begin_layout Enumerate
A table, or
\end_layout

\begin_layout Enumerate
A sheaf 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sheaf
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The sheaf is explained in detail in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sheaf"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "sheaf"

\end_inset

.
 In section 
\begin_inset CommandInset ref
LatexCommand ref
reference "Return_types:Tables"

\end_inset

 below, we will treat the tables.
 But first, a word about the two output-formats available (plus the third
 option for getting data back).
\end_layout

\begin_layout Subsection
Output-formats
\end_layout

\begin_layout Standard
The MQL engine gives you three options for using the results of an MQL query:
\end_layout

\begin_layout Enumerate
You can specify that you want XML
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
XML!output
\end_layout

\end_inset

 output
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
output!XML
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
You can specify that you want output for displaying on a console
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
output!console
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
console!output
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
You can use the datatype provided if your program is in the same process
 as the mql library.
\end_layout

\begin_layout Standard
If you use the mql(1) program
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mql(1) program
\end_layout

\end_inset

 for output, please see the manual page for how to choose the output kind.
\end_layout

\begin_layout Subsection
Tables
\begin_inset CommandInset label
LatexCommand label
name "Return_types:Tables"

\end_inset


\end_layout

\begin_layout Standard
The tables will look differently, depending on whether you choose XML
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
XML!output
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
output!XML
\end_layout

\end_inset

-output or console-output
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
console!output
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
output!console
\end_layout

\end_inset

.
 In the descriptions below, we will give abstract schemas for the tables,
 such as the following:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object_type_name : string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
monad : monad_m
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
id_d : id_d
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
This means that, in each row in the table, the first piece of data will
 be a string (called object_type_name), the second piece of data will be
 a monad_m (called monad), and the last piece of data will be an id_d (called
 id_d).
 And then the row stops.
 There will always be the same number of columns in each row.
\end_layout

\begin_layout Standard
A table of values may be empty, meaning it has no rows.
 In this case, there will still be a table heading with type-specifications.
\end_layout

\begin_layout Standard
Some MQL statements do not return a value.
 In this case, there will be no result, not even an empty table.
\end_layout

\begin_layout Subsection
Atomic output-types in tables
\end_layout

\begin_layout Standard
The following types can get into a table and will be announced in the header
 of the table:
\end_layout

\begin_layout Enumerate
string
\end_layout

\begin_layout Enumerate
integer
\end_layout

\begin_layout Enumerate
boolean (true or false)
\end_layout

\begin_layout Enumerate
id_d
\end_layout

\begin_layout Subsection
Other return values
\end_layout

\begin_layout Standard
A number of other values are also returned from each query:
\end_layout

\begin_layout Enumerate
A boolean indicating whether there were any compiler-errors.
\end_layout

\begin_layout Enumerate
A boolean indicating whether there were any database-errors.
\end_layout

\begin_layout Enumerate
An integer showing which stage of the compilation/interpretation we had
 come to when we exited the function (see table 
\begin_inset CommandInset ref
LatexCommand vref
reference "Table:Compiler-stages"

\end_inset

).
 In XML
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
XML!output
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
output!XML
\end_layout

\end_inset

, this is a string as shown in the table, of the attribute 
\begin_inset Quotes eld
\end_inset

stage
\begin_inset Quotes erd
\end_inset

 attribute of the 
\begin_inset Quotes eld
\end_inset

error_stage
\begin_inset Quotes erd
\end_inset

 element.
\end_layout

\begin_layout Enumerate
A string carrying any error messages.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement htbp
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XML string
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
none
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parsing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
parse
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Weeding
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
weed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Symbol-checking
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
symbol
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type-checking
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
type
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Monads-checking
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
monads
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Execution
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
exec
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Compiler stages
\begin_inset CommandInset label
LatexCommand label
name "Table:Compiler-stages"

\end_inset

.
 
\begin_inset Newline newline
\end_inset

See include/mql_execution_environment.h for ready-made #define macros.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Database manipulation
\end_layout

\begin_layout Subsection
CREATE DATABASE
\begin_inset CommandInset label
LatexCommand label
name "CREATE_DATABASE"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
create_database_statement : 
\begin_inset Quotes eld
\end_inset

CREATE
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

DATABASE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    database_name opt_WITH_KEY opt_USING_ENCODING
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
database_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
              | T_STRING
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

STRING
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
opt_WITH_KEY : /* Empty: No key is used.
 */
\end_layout

\begin_layout LyX-Code
             | 
\begin_inset Quotes eld
\end_inset

WITH
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

KEY
\begin_inset Quotes erd
\end_inset

  T_STRING
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

STRING
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
opt_USING_ENCODING : /* Empty: Default encoding is used.
 */
\end_layout

\begin_layout LyX-Code
                  | 
\begin_inset Quotes eld
\end_inset

USING
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

ENCODING
\begin_inset Quotes erd
\end_inset

  T_STRING
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
CREATE DATABASE book_test
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE DATABASE book_test_utf8 
\end_layout

\begin_layout LyX-Code
USING ENCODING 'utf-8'
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE DATABASE book_test_latin1
\end_layout

\begin_layout LyX-Code
USING ENCODING 'iso-8859-1'
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
The CREATE DATABASE statement creates and initializes a database.
 No text data is put into the database, and no object types are created,
 but the structures necessary for the EMdF engine to function are set in
 place.
 The user need not worry about these structures.
 Interested users are referred to 
\begin_inset CommandInset citation
LatexCommand cite
key "Rel-EMdF"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
You must CREATE a database before you can USE it (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "USE DATABASE"

\end_inset

).
 Alternatively, if you have a database that is already created but not initializ
ed, you can use the INITIALIZE DATABASE statememt (see Section 
\begin_inset CommandInset ref
LatexCommand vref
reference "INITIALIZE_DATABASE"

\end_inset

).
\end_layout

\begin_layout Standard
If a transaction was in progress (see BEGIN TRANSACTION statement, section
 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:BEGIN-TRANSACTION"

\end_inset

), the transaction is automatically committed before the CREATE DATABASE
 statement is executed.
 Thus the user need not, cannot, and should not commit it or abort it.
\end_layout

\begin_layout Standard
The database name can be either a T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset

 or a T_STRING.
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

STRING
\end_layout

\end_inset

 For MySQL and PostgreSQL, it must be a T_IDENTIFIER.
 For SQLite, it can be a T_STRING giving the filename (optionally including
 the full path) of the file in which the database is to be created.
 If no path is given, the file is created in the current working directory.
\end_layout

\begin_layout Standard
The optional 
\begin_inset Quotes eld
\end_inset

WITH KEY
\begin_inset Quotes erd
\end_inset

 syntax can be used on SQLite to send a key to SQLite's sqlite_open_encrypted
 API when opening the database.
 Note that this will not actually perform any encryption at all unless you
 obtain an encryption-enabled SQLite from somewhere, e.g., Dr.
 Hipp himself, the author of SQLite.
 See Section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Encryption"

\end_inset

 for more information.
\end_layout

\begin_layout Standard
The optional 
\begin_inset Quotes eld
\end_inset

WITH ENCODING
\begin_inset Quotes erd
\end_inset

 syntax can be used to specify the default encoding to be used for the database
 when creating it in the backend database.
 Currently, the following values are supported:
\end_layout

\begin_layout Itemize
"utf-8"
\end_layout

\begin_layout Itemize
"iso-8859-1"
\end_layout

\begin_layout Standard
If the WITH ENCODING clause is not supplied, then the default encoding is
 used.
 The default encoding for each database is given in the following list:
\end_layout

\begin_layout Itemize
PostgreSQL: iso-8859-1
\end_layout

\begin_layout Itemize
MySQL: iso-8859-1
\end_layout

\begin_layout Itemize
SQLite 2: iso-8859-1
\end_layout

\begin_layout Itemize
SQLite 3: utf-8
\end_layout

\begin_layout Standard
For SQLite 3, the only encoding available is "utf-8".
 To specify any other encoding would be an error.
\end_layout

\begin_layout Standard
Note that the encoding specified only has a bearing on how the database
 backend interprets the data, not on how Emdros interprets the data.
 In fact, Emdros most likely will not interpret the data at all, but rather
 will pass whatever is stored in the database on to the application using
 Emdros, which must the interpret the data according to domain-specific
 knowledge of which encoding has been used.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
There is no return value.
\end_layout

\begin_layout Subsection
INITIALIZE DATABASE
\begin_inset CommandInset label
LatexCommand label
name "INITIALIZE_DATABASE"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
initialize_database_statement : 
\begin_inset Quotes eld
\end_inset

INITIALIZE
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

DATABASE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    database_name opt_WITH_KEY
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
database_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
              | T_STRING
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

STRING
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
opt_WITH_KEY : /* Empty: No key is used.
 */
\end_layout

\begin_layout LyX-Code
             | 
\begin_inset Quotes eld
\end_inset

WITH
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

KEY
\begin_inset Quotes erd
\end_inset

  T_STRING
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

STRING
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
INITIALIZE DATABASE book_test
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
The INITIALIZE DATABASE statement initializes a database without creating
 it first.
 That is, the database must exist before issuing this statement.
 It simple creates all the meta-data necessary for having an Emdros database.
 This is useful on MySQL and PostgreSQL if you don't have privileges to
 create databases, but you do have privileges to create tables in an already-pro
vided database.
 On SQLite, it is also useful, if you want to add Emdros information to
 an already-existing SQLite database.
 Other than not creating the database, this statement accomplishes the same
 things as the CREATE DATABASE statement (see Section 
\begin_inset CommandInset ref
LatexCommand vref
reference "CREATE_DATABASE"

\end_inset

).
\end_layout

\begin_layout Standard
For the optional 
\begin_inset Quotes eld
\end_inset

WITH KEY
\begin_inset Quotes erd
\end_inset

 syntax, please see the CREATE DATABASE statement.
\end_layout

\begin_layout Standard
There is no 
\begin_inset Quotes eld
\end_inset

WITH ENCODING
\begin_inset Quotes erd
\end_inset

 syntax for the INITIALIZE DATABASE statement.
 This is because the encoding is only used when CREATEing the database.
 However, the internal metadata of the database is set to the default given
 under the explanation for CREATE DATABASE (see Section 
\begin_inset CommandInset ref
LatexCommand vref
reference "CREATE_DATABASE"

\end_inset

).
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
There is no return value.
\end_layout

\begin_layout Subsection
USE DATABASE
\begin_inset CommandInset label
LatexCommand label
name "USE DATABASE"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
use_database_statement : 
\begin_inset Quotes eld
\end_inset

USE
\begin_inset Quotes erd
\end_inset

  [ 
\begin_inset Quotes eld
\end_inset

DATABASE
\begin_inset Quotes erd
\end_inset

 ] 
\end_layout

\begin_layout LyX-Code
    database_name  opt_WITH_KEY
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
database_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
              | T_STRING
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

STRING
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
opt_WITH_KEY : /* Empty: No key is used.
 */
\end_layout

\begin_layout LyX-Code
             | 
\begin_inset Quotes eld
\end_inset

WITH
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

KEY
\begin_inset Quotes erd
\end_inset

  T_STRING
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

STRING
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
USE book_test
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Standard
This is equivalent to
\end_layout

\begin_layout LyX-Code
USE DATABASE book_test
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Standard
On SQLite:
\end_layout

\begin_layout LyX-Code
USE DATABASE "c:
\backslash

\backslash
EmdrosDBs
\backslash

\backslash
mydb.db" /* On SQLite you can do this.
 */
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Standard
With a key:
\end_layout

\begin_layout LyX-Code
/* On SQLite you can get encryption ****IF**** you have an 
\end_layout

\begin_layout LyX-Code
   encryption-enabled SQLite.
 */
\end_layout

\begin_layout LyX-Code
USE DATABASE "c:
\backslash

\backslash
Emdros
\backslash

\backslash
MySecretDB.db" 
\end_layout

\begin_layout LyX-Code
/* The format and length of the key depends on your SQLite
\end_layout

\begin_layout LyX-Code
   encryption implementation.
 This is just an example.
 */
\end_layout

\begin_layout LyX-Code
WITH KEY "
\backslash
x45
\backslash
x98
\backslash
xbf
\backslash
x12
\backslash
xfa
\backslash
xc6" 
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
Before you can start using a database you have CREATEd (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "CREATE_DATABASE"

\end_inset

) or INITIALIZEd (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "INITIALIZE_DATABASE"

\end_inset

), you must connect to it using the USE DATABASE statement.
 The keyword 
\begin_inset Quotes eld
\end_inset

DATABASE
\begin_inset Quotes erd
\end_inset

 is optional and can be left out.
\end_layout

\begin_layout Standard
If a transaction was in progress (see BEGIN TRANSACTION statement, section
 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:BEGIN-TRANSACTION"

\end_inset

), the transaction is automatically committed before the USE DATABASE statement
 is executed.
 Thus the user need not, cannot, and should not commit it or abort it.
\end_layout

\begin_layout Standard
The database name can be either a T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset

 or a T_STRING.
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

STRING
\end_layout

\end_inset

 For MySQL and PostgreSQL, it must be a T_IDENTIFIER.
 For SQLite, it can be a T_STRING giving the filename (optionally including
 the full path) of the file holding the database to be used.
 If no path is given, the file must be in the current working directory.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
There is no return value.
\end_layout

\begin_layout Subsection
DROP DATABASE
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
drop_database_statement : 
\begin_inset Quotes eld
\end_inset

DROP
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

DATABASE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    database_name
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
database_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
              | T_STRING
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

STRING
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
DROP DATABASE book_test
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
A previously CREATEd database (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "CREATE_DATABASE"

\end_inset

) can be completely removed from the system using this statement.
 All data in the database is irretrievably lost, including all objects
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
object
\end_layout

\end_inset

, all object types
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
object type
\end_layout

\end_inset

, and all enumerations
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
If a transaction was in progress (see BEGIN TRANSACTION statement, section
 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:BEGIN-TRANSACTION"

\end_inset

), the transaction is automatically committed before the DROP DATABASE statement
 is executed.
 Thus the user need not, cannot, and should not commit it or abort it.
\end_layout

\begin_layout Standard
The database name can be either a T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset

 or a T_STRING.
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

STRING
\end_layout

\end_inset

 For MySQL and PostgreSQL, it must be a T_IDENTIFIER.
 For SQLite, it can be a T_STRING giving the filename (optionally including
 the full path) of the file holding the database to be dropped.
 If no path is given, the file must be in the current working directory.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
There is no return value.
\end_layout

\begin_layout Subsection
VACUUM DATABASE
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
vacuum_database_statement : 
\begin_inset Quotes eld
\end_inset

VACUUM
\begin_inset Quotes erd
\end_inset

 [ 
\begin_inset Quotes eld
\end_inset

DATABASE
\begin_inset Quotes erd
\end_inset

 ]
\end_layout

\begin_layout LyX-Code
                            [ 
\begin_inset Quotes eld
\end_inset

ANALYZE
\begin_inset Quotes erd
\end_inset

 ]
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
1.
 VACUUM DATABASE
\end_layout

\begin_layout LyX-Code
   GO
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

2.
 VACUUM DATABASE ANALYZE
\end_layout

\begin_layout LyX-Code
   GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
On PostgreSQL, this statement vacuums the database using the 
\begin_inset Quotes eld
\end_inset

VACUUM
\begin_inset Quotes erd
\end_inset

 SQL statement.
 If the optional keyword 
\begin_inset Quotes eld
\end_inset

ANALYZE
\begin_inset Quotes erd
\end_inset

 is given, the statement issues a 
\begin_inset Quotes eld
\end_inset

VACUUM ANALYZE
\begin_inset Quotes erd
\end_inset

 statement.
 See the PostgreSQL documentation for what this does.
\end_layout

\begin_layout Standard
On MySQL, this statement issues OPTIMIZE TABLE queries for all object types.
 If the ANALYZE keyword is given, ANALYZE TABLE queries are issued as well.
\end_layout

\begin_layout Standard
On SQLite, this statement first deletes all redundant sequence info (compacting
 the sequence tables), then issues a VACUUM statement to SQLite.
\end_layout

\begin_layout Standard
The significance of this statement to Emdros development is that, when populatin
g a database, things will speed up dramatically if the database is VACUUM'ed
 after every 1000 objects created, or so.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
There is no return value.
\end_layout

\begin_layout Subsection
DROP INDEXES
\begin_inset CommandInset label
LatexCommand label
name "DROP-INDEXES"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
drop_indexes_statement : 
\begin_inset Quotes eld
\end_inset

DROP
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

INDEXES
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
                         
\begin_inset Quotes eld
\end_inset

ON
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset

 (
\begin_inset Quotes eld
\end_inset

TYPE
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

TYPES
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
                         
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

 object_type_to_drop_indexes_on 
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object_type_to_drop_indexes_on : object_type_name | 
\begin_inset Quotes eld
\end_inset

ALL
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object_type_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
1.
 DROP INDEXES
\end_layout

\begin_layout LyX-Code
   ON OBJECT TYPES
\end_layout

\begin_layout LyX-Code
   [ALL]
\end_layout

\begin_layout LyX-Code
   GO
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

2.
 DROP INDEXES
\end_layout

\begin_layout LyX-Code
   ON OBJECT TYPE
\end_layout

\begin_layout LyX-Code
   [Word]
\end_layout

\begin_layout LyX-Code
   GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
Emdros creates indexes on the tables associated with object types when they
 are created.
 These indexes speed up retrieval, but slow down insertion.
 Therefore, if you are going to insert a large amount of objects, it is
 best to drop indexes on the object types you are going to modify (possible
 all object types), then create the indexes again after you have inserted
 all objects.
\end_layout

\begin_layout Standard
This statement drop indexes that have previously been create.
 It has no effect if the indexes have been dropped already.
 If 
\begin_inset Quotes eld
\end_inset

ALL
\begin_inset Quotes erd
\end_inset

 is specified as the object type, then all object types in the current database
 will have their indexes dropped (if not dropped already).
\end_layout

\begin_layout Standard
The manage_indices program that comes with the Emdros distribution can be
 used to achieve the same effect.
\end_layout

\begin_layout Standard
Note that the choice between 
\begin_inset Quotes eld
\end_inset

TYPE
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

TYPES
\begin_inset Quotes erd
\end_inset

 is just syntactic sugar.
 It doesn't matter which you use.
\end_layout

\begin_layout Standard
If a feature has been declared WITH INDEX, this index is dropped.
 However, the feature will have its index recreated upon a CREATE INDEXES
 statement affecting that object type.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
There is no return value.
\end_layout

\begin_layout Subsection
CREATE INDEXES
\begin_inset CommandInset label
LatexCommand label
name "CREATE-INDEXES"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
create_indexes_statement : 
\begin_inset Quotes eld
\end_inset

CREATE
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

INDEXES
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
                         
\begin_inset Quotes eld
\end_inset

ON
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset

 (
\begin_inset Quotes eld
\end_inset

TYPE
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

TYPES
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
                         
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

 object_type_to_create_indexes_on 
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object_type_to_create_indexes_on : object_type_name | 
\begin_inset Quotes eld
\end_inset

ALL
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object_type_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
1.
 CREATE INDEXES
\end_layout

\begin_layout LyX-Code
   ON OBJECT TYPES
\end_layout

\begin_layout LyX-Code
   [ALL]
\end_layout

\begin_layout LyX-Code
   GO
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

2.
 CREATE INDEXES
\end_layout

\begin_layout LyX-Code
   ON OBJECT TYPE
\end_layout

\begin_layout LyX-Code
   [Word]
\end_layout

\begin_layout LyX-Code
   GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
Emdros creates indexes on the tables associated with object types when they
 are created.
 These indexes speed up retrieval, but slow down insertion.
 Therefore, if you are going to insert a large amount of objects, it is
 best to drop indexes on the object types you are going to modify (possible
 all object types), then create the indexes again after you have inserted
 all objects.
\end_layout

\begin_layout Standard
This statement creates indexes that have previously been dropped.
 It has no effect if the indexes are there already.
 If 
\begin_inset Quotes eld
\end_inset

ALL
\begin_inset Quotes erd
\end_inset

 is specified as the object type, then all object types in the current database
 will have their indexes created (if not there already).
\end_layout

\begin_layout Standard
The manage_indices program that comes with the Emdros distribution can be
 used to achieve the same effect.
\end_layout

\begin_layout Standard
Note that the choice between 
\begin_inset Quotes eld
\end_inset

TYPE
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

TYPES
\begin_inset Quotes erd
\end_inset

 is just syntactic sugar.
 It doesn't matter which you use.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
There is no return value.
\end_layout

\begin_layout Section
Transactions
\end_layout

\begin_layout Subsection
BEGIN TRANSACTION
\begin_inset CommandInset label
LatexCommand label
name "subsec:BEGIN-TRANSACTION"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
begin_transaction_statement : 
\begin_inset Quotes eld
\end_inset

BEGIN
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

TRANSACTION
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
BEGIN TRANSACTION
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
On PostgreSQL, this statement begins a transaction if no transaction is
 in progress already.
 The return value is a boolean saying whether the transaction was started
 (true) or not (false).
 If this value is false, the user should not subsequently issue a COMMIT
 TRANSACTION or ABORT TRANSACTION statement.
 If this value is true, the user should issue either a COMMIT TRANSACTION
 or an ABORT TRANSACTION later.
\end_layout

\begin_layout Standard
On MySQL, this has no effect, and always returns false.
\end_layout

\begin_layout Standard
On SQLite, the behavior is the same as on PostgreSQL.
\end_layout

\begin_layout Standard
The transaction, if started, is automatically committed if a CREATE DATABASE,
 USE DATABASE, DROP DATABASE or QUIT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
QUIT
\end_layout

\end_inset

 statement is issued before a COMMIT TRANSACTION or ABORT TRANSACTION statement
 has been issued.
\end_layout

\begin_layout Standard
Also, the transaction is automatically committed if the connection to the
 database is lost, e.g., if the mql(1) program reaches the end of the MQL
 stream (e.g., an MQL script) and thus has to close down.
 Transactions are not maintained across invocations of the mql(1) program.
 The transaction is also committed if the EMdFDB, CMQL_execution_environment,
 or CEmdrosEnv object is destroyed.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
A table with the following schema: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
transaction_started : boolean
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
This table is empty if and only if there was a compiler error, i.e., if the
 syntax was not obeyed.
 The statement cannot fail with a database error.
 If no transaction was started, false is returned.
 If a transaction was started, true is returned.
\end_layout

\begin_layout Subsection
COMMIT TRANSACTION
\begin_inset CommandInset label
LatexCommand label
name "COMMIT-TRANSACTION"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
commit_transaction_statement : 
\begin_inset Quotes eld
\end_inset

COMMIT
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

TRANSACTION
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
COMMIT TRANSACTION
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
Commits the current transaction, if one is in progress.
 Has no effect if a transaction was not in progress.
 In such cases, false is returned.
\end_layout

\begin_layout Standard
If the commit failed, false is returned.
 If the commit succeeded, true is returned.
\end_layout

\begin_layout Standard
NOTE that this is slightly different from other statements which flag a
 DB error if unsuccessful.
 Here, no DB error is flagged, but false is returned in the table.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
A table with the following schema: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
transaction_committed : boolean
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
This table is empty if and only if there was a compiler error, i.e., if the
 syntax was not obeyed.
 The statement cannot fail with a database error.
 If no transaction was started when the COMMIT TRANSACTION statement was
 invocated, false is returned.
 If a transaction was started, and it was committed successfully, true is
 returned.
 If a transaction was started, but it was not committed successfully, false
 is returned.
\end_layout

\begin_layout Subsection
ABORT TRANSACTION
\begin_inset CommandInset label
LatexCommand label
name "ABORT-TRANSACTION"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
abort_transaction_statement : 
\begin_inset Quotes eld
\end_inset

ABORT
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

TRANSACTION
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
ABORT TRANSACTION
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
Aborts the current transaction, if one is in progress.
 Has no effect if a transaction was not in progress.
 In such cases, false is returned.
\end_layout

\begin_layout Standard
If the abort failed, false is returned.
 If the abort succeeded, true is returned.
\end_layout

\begin_layout Standard
NOTE that this is slightly different from other statements which flag a
 DB error if unsuccessful.
 Here, no DB error is flagged, but false is returned in the table.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
A table with the following schema: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
transaction_aborted : boolean
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
This table is empty if and only if there was a compiler error, i.e., if the
 syntax was not obeyed.
 The statement cannot fail with a database error.
 If no transaction was started when the ABORT TRANSACTION statement was
 invocated, false is returned.
 If a transaction was started, and it was aborted successfully, true is
 returned.
 If a transaction was started, but it was not aborted successfully, false
 is returned.
\end_layout

\begin_layout Section
Object type manipulation
\end_layout

\begin_layout Subsection
CREATE OBJECT TYPE
\begin_inset CommandInset label
LatexCommand label
name "CREATE_OBJECT_TYPE"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
create_object_type_statement : 
\begin_inset Quotes eld
\end_inset

CREATE
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
    [ 
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset

 ] 
\begin_inset Quotes eld
\end_inset

TYPE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    opt_if_not_exists
\end_layout

\begin_layout LyX-Code
    opt_range_type
\end_layout

\begin_layout LyX-Code
    opt_monad_uniqueness_type
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

  object_type_name   
\end_layout

\begin_layout LyX-Code
           [ feature_declaration_list ]
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
opt_if_not_exists:
\end_layout

\begin_layout LyX-Code
   /* empty: Throw an error if object type exists already */
\end_layout

\begin_layout LyX-Code
  | 
\begin_inset Quotes eld
\end_inset

IF
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

NOT
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

EXISTS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
opt_range_type:
\end_layout

\begin_layout LyX-Code
    /* empty: Same as WITH MULTIPLE RANGE OBJECTS */
\end_layout

\begin_layout LyX-Code
  | 
\begin_inset Quotes eld
\end_inset

WITH
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

SINGLE
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

MONAD
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

OBJECTS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
  | 
\begin_inset Quotes eld
\end_inset

WITH
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

SINGLE
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

RANGE
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

OBJECTS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
  | 
\begin_inset Quotes eld
\end_inset

WITH
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

MULTIPLE
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

RANGE
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

OBJECTS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
opt_monad_uniqueness_type :
\end_layout

\begin_layout LyX-Code
    /* empty: same as WITHOUT UNIQUE MONADS */
\end_layout

\begin_layout LyX-Code
  | 
\begin_inset Quotes eld
\end_inset

HAVING
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

UNIQUE
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

FIRST
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

MONADS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
  | 
\begin_inset Quotes eld
\end_inset

HAVING
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

UNIQUE
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

FIRST
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

AND
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

LAST
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

MONADS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
  | 
\begin_inset Quotes eld
\end_inset

WITHOUT
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

UNIQUE
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

MONADS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
object_type_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
feature_declaration_list : feature_declaration  
\end_layout

\begin_layout LyX-Code
    { feature_declaration }
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
feature_declaration :  feature_name  
\begin_inset Quotes eld
\end_inset

:
\begin_inset Quotes erd
\end_inset

  feature_type 
\end_layout

\begin_layout LyX-Code
    [ default_specification ]   
\begin_inset Quotes eld
\end_inset

;
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    | feature_name 
\begin_inset Quotes eld
\end_inset

:
\begin_inset Quotes erd
\end_inset

 list_feature_type 
\begin_inset Quotes eld
\end_inset

;
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
feature_type : 
\end_layout

\begin_layout LyX-Code
       
\begin_inset Quotes eld
\end_inset

INTEGER
\begin_inset Quotes erd
\end_inset

  [with_index_specification]
\end_layout

\begin_layout LyX-Code
    |  
\begin_inset Quotes eld
\end_inset

ID_D
\begin_inset Quotes erd
\end_inset

     [with_index_specification]
\end_layout

\begin_layout LyX-Code
    | 
\begin_inset Quotes eld
\end_inset

STRING
\begin_inset Quotes erd
\end_inset

    [from_set_specification]  [with_index_specification] 
\end_layout

\begin_layout LyX-Code
    | 
\begin_inset Quotes eld
\end_inset

ASCII
\begin_inset Quotes erd
\end_inset

     [from_set_specification]  [with_index_specification]
\end_layout

\begin_layout LyX-Code
    | set_of_monads_specification
\end_layout

\begin_layout LyX-Code
    | T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset

 /* For enumerations.
 */
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
list_feature_type :
\end_layout

\begin_layout LyX-Code
      
\begin_inset Quotes eld
\end_inset

LIST
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

OF
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

INTEGER
\begin_inset Quotes erd
\end_inset

  
\end_layout

\begin_layout LyX-Code
    | 
\begin_inset Quotes eld
\end_inset

LIST
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

OF
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

ID_D
\begin_inset Quotes erd
\end_inset

  
\end_layout

\begin_layout LyX-Code
    | 
\begin_inset Quotes eld
\end_inset

LIST
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

OF
\begin_inset Quotes erd
\end_inset

  T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset

  /* For enumerations */
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
with_index_specification :  
\end_layout

\begin_layout LyX-Code
    | 
\begin_inset Quotes eld
\end_inset

WITH
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

INDEX
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    | 
\begin_inset Quotes eld
\end_inset

WITHOUT
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

INDEX
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
from_set_specification : 
\begin_inset Quotes eld
\end_inset

FROM
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

SET
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
set_of_monads_specification : 
\end_layout

\begin_layout LyX-Code
    | 
\begin_inset Quotes eld
\end_inset

SINGLE
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MONAD
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

SET
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

OF
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MONADS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    | 
\begin_inset Quotes eld
\end_inset

SINGLE
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

RANGE
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

SET
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

OF
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MONADS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    | 
\begin_inset Quotes eld
\end_inset

MULTIPLE
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

RANGE
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

SET
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

OF
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MONADS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    | 
\begin_inset Quotes eld
\end_inset

SET
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

OF
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MONADS
\begin_inset Quotes erd
\end_inset

 /* Same as MULTIPLE RANGE SET OF MONADS */
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
default_specification : 
\begin_inset Quotes eld
\end_inset

DEFAULT
\begin_inset Quotes erd
\end_inset

 expression 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
expression : signed_integer /* integer and id_d */
\end_layout

\begin_layout LyX-Code
    | T_STRING
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

STRING
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
    | T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset

 /* enumeration constant */
\end_layout

\begin_layout LyX-Code
    | monad_set
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
signed_integer : T_INTEGER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

INTEGER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
    | 
\begin_inset Quotes eld
\end_inset

-
\begin_inset Quotes erd
\end_inset

 T_INTEGER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

INTEGER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
    | 
\begin_inset Quotes eld
\end_inset

NIL
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Examples
\end_layout

\begin_layout LyX-Code
CREATE OBJECT WITH
\end_layout

\begin_layout LyX-Code
WITH SINGLE MONAD OBJECTS
\end_layout

\begin_layout LyX-Code
[Word
\end_layout

\begin_layout LyX-Code
  surface: STRING WITHOUT INDEX;
\end_layout

\begin_layout LyX-Code
  lemma : STRING WITH INDEX;
\end_layout

\begin_layout LyX-Code
  parsing_tag : STRING FROM SET WITH INDEX;
\end_layout

\begin_layout LyX-Code
  psp : part_of_speech_t;
\end_layout

\begin_layout LyX-Code
  parents : LIST OF id_d;
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE OBJECT TYPE
\end_layout

\begin_layout LyX-Code
IF NOT EXISTS
\end_layout

\begin_layout LyX-Code
[Clause
\end_layout

\begin_layout LyX-Code
   parent : id_d;
\end_layout

\begin_layout LyX-Code
   clause_type : clause_type_t default NC;
\end_layout

\begin_layout LyX-Code
   functions : LIST OF clause_function_t; // An enumeration
\end_layout

\begin_layout LyX-Code
   descendants : LIST OF ID_D;
\end_layout

\begin_layout LyX-Code
   parallel_monads : SET OF MONADS;
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Standard
The latter creates an object type called 
\begin_inset Quotes eld
\end_inset

Clause
\begin_inset Quotes erd
\end_inset

 with four features: parent (Immediate Constituent of), whose type is id_d,
 and clause_type, which has the enumeration-type clause_type_t and the default
 value NC (which must be an enumeration constant in the clause_type_t enumeratio
n).
 In addition, the two features 
\begin_inset Quotes eld
\end_inset

functions
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

descendants
\begin_inset Quotes erd
\end_inset

 are created, both of which are lists.
 
\begin_inset Quotes eld
\end_inset

functions
\begin_inset Quotes erd
\end_inset

 is a list of enumeration constants drawn from the enumeration clause_function_t
, whereas the 
\begin_inset Quotes eld
\end_inset

descendants
\begin_inset Quotes erd
\end_inset

 feature is a list of id_ds, which should then point to the descendants
 in the tree.
 In addition, if the object type 
\begin_inset Quotes eld
\end_inset

Clause
\begin_inset Quotes erd
\end_inset

 exists already, no error is thrown, and the object type is left untouched.
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement 
\emph on
creates an object type
\emph default
 in the meta-data repository of the current database.
 It starts out with the keywords 
\begin_inset Quotes eld
\end_inset

CREATE OBJECT TYPE
\begin_inset Quotes erd
\end_inset

, followed by an optional clause which states whether the objects will be
 single-range or multiple-range (see below).
 After that comes a specification of the object type name and its features
 enclosed in square brackets.
 The 
\family typewriter
feature_declaration_list
\family default
 is optional, so it is possible for an object type to have no features.
\begin_inset Foot
status open

\begin_layout Plain Layout
Strictly, this is not true, since all object types (except pow_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pow
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

, any_m,
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
any
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

 and all_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
all
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

) have at least one feature, namely the one called 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
self
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 Please see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "self"

\end_inset

 for more information.
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
Each feature_declaration consists of a feature name, followed by a colon,
 followed by a feature type, followed by an optional specification of the
 default value.
\end_layout

\begin_layout Standard
An INTEGER, ID_D, STRING, or ASCII feature can be declared 
\begin_inset Quotes eld
\end_inset

WITH INDEX
\begin_inset Quotes erd
\end_inset

.
 This will put an index on the feature's column.
 The default is not to add an index.
 This index will be dropped if a DROP INDEXES statement is issued for the
 object type (see Section 
\begin_inset CommandInset ref
LatexCommand vref
reference "DROP-INDEXES"

\end_inset

), but it will be recreated if a CREATE INDEXES statement is issued for
 the object type (see Section 
\begin_inset CommandInset ref
LatexCommand vref
reference "CREATE-INDEXES"

\end_inset

).
 If a feature is an enumeration, it is usually not a good idea to create
 an index on the feature.
 This is because enumeration constants are usually few in number, and it
 is generally not a good idea to index columns that draw their values from
 a small pool of values, since this can lead to speed decreases (O(NlogN)
 instead of O(N)).
 Therefore, the MQL language does not allow creating indexes on enumeration
 features.
 You can add them yourself, of course, if you like, with the backend's correspon
ding SQL interface.
\end_layout

\begin_layout Standard
A STRING or ASCII feature can be declared 
\begin_inset Quotes eld
\end_inset

FROM SET
\begin_inset Quotes erd
\end_inset

.
 The default is for it not to be from a set.
 This does 
\emph on
not
\emph default
 mean that the value of the feature 
\emph on
is
\emph default
 a set, but rather that the values are drawn FROM a set.
 Whenever an object is created or updated, and a feature is assigned which
 is declared 
\begin_inset Quotes eld
\end_inset

FROM SET
\begin_inset Quotes erd
\end_inset

, the string value is first looked up in a special table that maps strings
 to unique integers.
 Then this unique integer is used in lieu of the string in the feature column.
 If the string does not exist in the separate table, it is added, with a
 unique integer to go with it, and that integer is used.
 If the string is there, then the integer already associated with the string
 is used.
 This gives a space savings (on MySQL and PostgreSQL), and sometimes also
 a speed advantage, especially if used on the string features of a Word
 object type which do no have high cardinality (number of unique instances),
 and the words number many millions.
 SQLite and SQLite 3 may not see any speed or space savings advantage.
 Note that using FROM SET on a string may actually impede performance (especiall
y database loading times), especially on MySQL, if the cardinality of the
 string data is high.
 This will likely be the case for strings like 
\begin_inset Quotes eld
\end_inset

surface
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

lemma
\begin_inset Quotes erd
\end_inset

, which generally should not be declared FROM SET.
 However, features like 
\begin_inset Quotes eld
\end_inset

part_of_speech
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

case
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

number
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

gender
\begin_inset Quotes erd
\end_inset

, which all most likely have low cardinality, might be good candidates for
 using a STRING FROM SET.
 Thus STRING FROM SET is a performance-enhanced way of using general strings
 instead of enumerations, and should be just as fast as enumerations for
 most queries, provided it is not used with high-cardinality data.
\end_layout

\begin_layout Standard
The specification of the default value 
\family typewriter
(default_specification
\family default
) consists of the keyword 
\begin_inset Quotes eld
\end_inset

DEFAULT
\begin_inset Quotes erd
\end_inset

, followed by an expression.
 An expression is either a 
\family typewriter
signed_integer
\family default
, a string, or an identifier.
 The identifier must be an enumeration constant
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset

 belonging to the enumeration
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration
\end_layout

\end_inset

 which is also the type of the feature.
 The 
\family typewriter
signed_integer
\family default
 is either a signed integer (positive or negative), or the keyword 
\begin_inset Quotes eld
\end_inset

NIL
\begin_inset Quotes erd
\end_inset

, meaning the id_d that points to no object.
 
\end_layout

\begin_layout Standard
The feature 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
self!creation of
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 is implicitly created.
 It is an error if it is declared.
 The 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Quotes erd
\end_inset

 feature is a computed feature
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
computed feature
\end_layout

\end_inset

 which holds the unique object id_d of the object.
 See also 
\begin_inset CommandInset ref
LatexCommand vref
reference "self"

\end_inset

.
\end_layout

\begin_layout Standard
The difference between 
\begin_inset Quotes eld
\end_inset

ASCII
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

STRING
\begin_inset Quotes erd
\end_inset

 is that the user promises only to store 7-bit data in an ASCII string,
 whereas a STRING string may contain 8-bit data.
\begin_inset Foot
status open

\begin_layout Plain Layout
ASCII strings are stored exactly the same way as 8-bit STRINGs.
 This distinction is mostly obsolete.
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
In previous versions, you could specify a string length in parentheses after
 the STRING or ASCII keyword.
 As of version 1.2.0, all strings can have arbitrary length, with no maximum.
\begin_inset Foot
status open

\begin_layout Plain Layout
This is true for PostgreSQL (it is a TEXT).
 For MySQL, the maximum is 4294967295 (2^32 - 1) characters (it is a LONGTEXT).
 On SQLite, it is a TEXT, but it is unknown how much this can hold.
\end_layout

\end_inset

 The old syntax is still available, but is ignored.
\end_layout

\begin_layout Standard
If a feature is declared as a LIST OF 
\emph on
something
\emph default
, that something has to be either INTEGER, ID_D, or an 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset

enumeration constant.
 Lists of strings are not supported.
 Also, you cannot declare a default value for a list â€“ the default value
 is always the empty list.
\end_layout

\begin_layout Standard
This statement can be 
\begin_inset Quotes eld
\end_inset

hedged
\begin_inset Quotes erd
\end_inset

 with the 
\begin_inset Quotes eld
\end_inset

IF NOT EXISTS
\begin_inset Quotes erd
\end_inset

 clause.
 If this clause is included, the statement does not throw an error if the
 object type exists already.
 Instead, the object type is left as it is (no changes are made to what
 is in the database already), and the statement returns success.
 If the 
\begin_inset Quotes eld
\end_inset

IF NOT EXISTS
\begin_inset Quotes erd
\end_inset

 clause is omitted, the statement throws an error if the object type exists
 already.
\end_layout

\begin_layout Standard
An object type can be declared 
\begin_inset Quotes eld
\end_inset

WITH SINGLE MONAD OBJECTS
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

WITH SINGLE RANGE OBJECTS
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

WITH MULTIPLE RANGE OBJECTS
\begin_inset Quotes erd
\end_inset

.
 The difference is that:
\end_layout

\begin_layout Itemize
An object type which has been declared 
\begin_inset Quotes eld
\end_inset

WITH SINGLE MONAD OBJECTS
\begin_inset Quotes erd
\end_inset

 can only hold objects which consist of a single monad (i.e., the first monad
 is the same as the last monad).
\end_layout

\begin_layout Itemize
An object type which has been declared 
\begin_inset Quotes eld
\end_inset

WITH SINGLE RANGE OBJECTS
\begin_inset Quotes erd
\end_inset

 can only hold objects which consist of a 
\emph on
single monad range
\emph default
, i.e., there are no gaps in the monad set, but it consists of a single contiguous
 stretch of monads (possibly only 1 monad long).
\end_layout

\begin_layout Itemize
An object type which has been declared 
\begin_inset Quotes eld
\end_inset

WITH MULTIPLE RANGE OBJECTS
\begin_inset Quotes erd
\end_inset

 (the default) can hold objects which have arbitrary monad sets.
 
\end_layout

\begin_layout Standard
A single-monad object must consist of only 1 monad, e.g., {1}, {2}, {3}.
 A single-range object can consist of a single monad (e.g., { 1 }, { 2 },
 { 3 }, etc.), or it can consist of a single interval (e.g., { 6-7 }, { 9-13
 }, { 100-121 }, etc.).
 However, as soon as an object type needs to hold objects which can consist
 of more than one range (e.g., { 6-7, 9-13 }), then it must be declared WITH
 MULTIPLE RANGE OBJECTS.
 If neither is specified, then WITH MULTIPLE RANGE OBJECTS is assumed.
\end_layout

\begin_layout Standard
There is a speed advantage of using WITH SINGLE MONAD OBJECTS over WITH
 SINGLE RANGE OBJECTS, and again a speed advantage of using WITH SINGLE
 RANGE OBJECTS over WITH MULTIPLE RANGE OBJECTS.
 The latter is the slowest, but is also the most flexible in terms of monad
 sets.
\end_layout

\begin_layout Standard
In addition, and orthogonally to the range type, an object type can be declared
 
\begin_inset Quotes eld
\end_inset

HAVING UNIQUE FIRST MONADS
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

HAVING UNIQUE FIRST AND LAST MONADS
\begin_inset Quotes erd
\end_inset

, or 
\begin_inset Quotes eld
\end_inset

WITHOUT UNIQUE MONADS
\begin_inset Quotes erd
\end_inset

.
 The difference is:
\end_layout

\begin_layout Itemize
An object type which has been declared 
\begin_inset Quotes eld
\end_inset

HAVING UNIQUE FIRST MONADS
\begin_inset Quotes erd
\end_inset

 can only hold objects which are unique in their first monad within the
 object type.
 That is, within this object type, no two objects may start at the same
 monad.
\end_layout

\begin_layout Itemize
An object type which has been declared 
\begin_inset Quotes eld
\end_inset

HAVING UNIQUE FIRST AND LAST MONADS
\begin_inset Quotes erd
\end_inset

 can only hold objects which are unique in their first monad and in their
 last monad (as a pair: You are allowed to have two objects with the same
 starting monad but different ending monads, or vice versa).
 That is, no two objects within this object type start at the same monad
 while also ending at the same monad.
 Note that for object types declared WITH SINGLE MONAD OBJECTS, a 
\begin_inset Quotes eld
\end_inset

HAVING UNIQUE FIRST AND LAST MONADS
\begin_inset Quotes erd
\end_inset

 restriction is upgraded to a 
\begin_inset Quotes eld
\end_inset

HAVING UNIQUE FIRST MONADS
\begin_inset Quotes erd
\end_inset

 restriction, since they are equivalent for this range type.
\end_layout

\begin_layout Itemize
An object type which has been declared 
\begin_inset Quotes eld
\end_inset

WITHOUT UNIQUE MONADS
\begin_inset Quotes erd
\end_inset

 (or which omits any of the 
\begin_inset Quotes eld
\end_inset

monad uniqueness constraints
\begin_inset Quotes erd
\end_inset

) has no restrictions on the monads, other than those implied by the range
 type.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
There is no return value.
\end_layout

\begin_layout Subsection
UPDATE OBJECT TYPE
\begin_inset CommandInset label
LatexCommand label
name "UPDATE_OBJECT_TYPE"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
update_object_type_statement : 
\begin_inset Quotes eld
\end_inset

UPDATE
\begin_inset Quotes erd
\end_inset

   
\end_layout

\begin_layout LyX-Code
    [ 
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset

 ]   
\begin_inset Quotes eld
\end_inset

TYPE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

 object_type_name
\end_layout

\begin_layout LyX-Code
          feature_update_list
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
object_type_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
feature_update_list : feature_update  { feature_update }
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
feature_update : [ 
\begin_inset Quotes eld
\end_inset

ADD
\begin_inset Quotes erd
\end_inset

 ]  feature_declaration
\end_layout

\begin_layout LyX-Code
    | 
\begin_inset Quotes eld
\end_inset

REMOVE
\begin_inset Quotes erd
\end_inset

  feature_name  
\begin_inset Quotes eld
\end_inset

;
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
feature_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
All the foreign non-terminals are defined in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "CREATE_OBJECT_TYPE"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
UPDATE OBJECT TYPE
\end_layout

\begin_layout LyX-Code
[Word
\end_layout

\begin_layout LyX-Code
    ADD no_of_morphemes : integer;
\end_layout

\begin_layout LyX-Code
    REMOVE surface_without_accents;
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Standard
This example ADDs the feature no_of_morphemes (being an integer), and REMOVEs
 the feature surface_without_accents.
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement 
\emph on
updates an object type
\emph default
.
 It can either add a feature or remove an already-existing feature.
 When adding a new feature, the ADD keyword is optional.
 Other than that, it has exactly the same notation as for feature declarations
 under the CREATE OBJECT TYPE statement.
\end_layout

\begin_layout Standard
Removing a feature requires the REMOVE keyword, the feature name, and a
 semicolon.
\end_layout

\begin_layout Standard
Both additions and removals must be terminated with semicolon, even if the
 
\family typewriter
feature_update
\family default
 is the only 
\family typewriter
feature_update
\family default
 in the list of 
\family typewriter
feature_update
\family default
s.
\end_layout

\begin_layout Standard
Note that the statement does not allow for 
\emph on
changing
\emph default
 the type of an already existing feature, only for adding or removing features.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
There is no return value.
\end_layout

\begin_layout Subsection
DROP OBJECT TYPE
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
drop_object_type_statement : 
\begin_inset Quotes eld
\end_inset

DROP
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    [ 
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset

 ]   
\begin_inset Quotes eld
\end_inset

TYPE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes eld
\end_inset

   object_type_name   
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
object_type_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
DROP OBJECT TYPE
\end_layout

\begin_layout LyX-Code
[Sploinks]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Standard
This example drops the object type 
\begin_inset Quotes eld
\end_inset

Sploinks
\begin_inset Quotes erd
\end_inset

 from the database.
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement drops an object type entirely from the database.
 This deletes not only the object type, but also all the objects of that
 object type, as well as the object type's features.
 Enumerations which are used as a feature type are not dropped, however.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
There is no return value.
\end_layout

\begin_layout Section
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!manipulation
\end_layout

\end_inset

Enumeration manipulation
\end_layout

\begin_layout Subsection
CREATE ENUMERATION
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!creation
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "CREATE_ENUMERATION"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
create_enumeration_statement : 
\begin_inset Quotes eld
\end_inset

CREATE
\begin_inset Quotes erd
\end_inset

   
\end_layout

\begin_layout LyX-Code
    (
\begin_inset Quotes eld
\end_inset

ENUM
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

ENUMERATION
\begin_inset Quotes erd
\end_inset

) 
\end_layout

\begin_layout LyX-Code
    enumeration_name   
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

{
\begin_inset Quotes erd
\end_inset

  ec_declaration_list  
\begin_inset Quotes eld
\end_inset

}
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
enumeration_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
ec_declaration_list : ec_declaration  
\end_layout

\begin_layout LyX-Code
                      { 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

  ec_declaration }
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
ec_declaration : [ 
\begin_inset Quotes eld
\end_inset

DEFAULT
\begin_inset Quotes erd
\end_inset

 ]   
\end_layout

\begin_layout LyX-Code
                 ec_name   
\end_layout

\begin_layout LyX-Code
                 [ ec_initialization ]
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
ec_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
ec_initialization : 
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

 signed_integer
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
For a description of 
\family typewriter
signed_integer
\family default
, please see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "CREATE_OBJECT_TYPE"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "CREATE_OBJECT_TYPE"

\end_inset

.
 Note, however, that NIL should not be used with enumerations.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
CREATE ENUMERATION
\end_layout

\begin_layout LyX-Code
phrase_type_t = { VP = 1, NP, AP, 
\end_layout

\begin_layout LyX-Code
   PP, default NotApplicable = -1 }
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Standard
This particular statement creates an enumeration called 
\begin_inset Quotes eld
\end_inset

phrase_type_t
\begin_inset Quotes erd
\end_inset

 with the following constants and values:
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Default
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NotApplicable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
VP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement creates a new enumeration and populates it with enumeration
 constants
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
If there is no declaration that has the 
\begin_inset Quotes eld
\end_inset

default
\begin_inset Quotes erd
\end_inset

 keyword, then the first one in the list becomes the default
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!default constant
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
If the first declaration does not have an initialization, its value becomes
 1.
 This is different from C and C++ 
\family typewriter
enum
\family default
s, which get 0 as the first value by default.
\end_layout

\begin_layout Standard
If a declaration does not have an initialization, its values becomes that
 of the previous declaration, plus 1.
 This mimics C and C++ 
\family typewriter
enum
\family default
s.
\end_layout

\begin_layout Standard
Label names must be unique within the enumeration.
 That is, you cannot have two constants with the same name in the same enumerati
on.
\end_layout

\begin_layout Standard
Values must also be unique within the enumeration.
 That is, you cannot have two different labels with the same value in the
 same enumeration.
 This is different from C/C++ 
\family typewriter
enum
\family default
s, where two labels may have the same value.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
There is no return value.
\end_layout

\begin_layout Subsection
UPDATE ENUMERATION
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!update
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
update_enumeration_statement : 
\begin_inset Quotes eld
\end_inset

UPDATE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    (
\begin_inset Quotes eld
\end_inset

ENUM
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

ENUMERATION
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
    enumeration_name   
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

{
\begin_inset Quotes erd
\end_inset

   ec_update_list   
\begin_inset Quotes eld
\end_inset

}
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
enumeration_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
ec_update_list : ec_update  { 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

  ec_update }
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
ec_update : [ 
\begin_inset Quotes eld
\end_inset

ADD
\begin_inset Quotes erd
\end_inset

 ] [ 
\begin_inset Quotes eld
\end_inset

DEFAULT
\begin_inset Quotes erd
\end_inset

 ]
\end_layout

\begin_layout LyX-Code
    ec_name ec_initialization 
\end_layout

\begin_layout LyX-Code
  | 
\begin_inset Quotes eld
\end_inset

UPDATE
\begin_inset Quotes erd
\end_inset

    [ 
\begin_inset Quotes eld
\end_inset

DEFAULT
\begin_inset Quotes erd
\end_inset

 ]  ec_name  ec_initialization 
\end_layout

\begin_layout LyX-Code
  | 
\begin_inset Quotes eld
\end_inset

REMOVE
\begin_inset Quotes erd
\end_inset

 ec_name 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
ec_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
ec_initialization : 
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

 signed_integer
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
For a description of 
\family typewriter
signed_integer
\family default
, please see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "CREATE_OBJECT_TYPE"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "CREATE_OBJECT_TYPE"

\end_inset

.
 Note, however, that NIL should not be used with enumerations.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
UPDATE ENUMERATION
\end_layout

\begin_layout LyX-Code
phrase_type_t = {
\end_layout

\begin_layout LyX-Code
    ADD default Unknown = -99,
\end_layout

\begin_layout LyX-Code
    REMOVE NotApplicable,
\end_layout

\begin_layout LyX-Code
    UPDATE PP = 5,
\end_layout

\begin_layout LyX-Code
    AdvP = 4
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Standard
This alters the table made in the example in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "CREATE_ENUMERATION"

\end_inset

 to be like this:
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Default
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unknown
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-99
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
VP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AdvP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement updates the 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset

enumeration constants of an already existing enumeration.
 The user can specify whether to add, remove, or update an enumeration constant.
\end_layout

\begin_layout Standard
It is an error (and none of the updates will be executed) if the user REMOVEs
 the default enumeration constant
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!default constant
\end_layout

\end_inset

 without specifying a new default.
\end_layout

\begin_layout Standard
Note that you are forced to specify values for all of the constants updated
 or added.
 
\end_layout

\begin_layout Standard
It is an error (and none of the updates will be executed) if the update
 would lave the enumeration in a state where two labels would have the same
 value.
 This is because an enumeration is effectively a one-to-one correspondence
 between a set of labels and a set of values.
\end_layout

\begin_layout Standard
It is the user's responsibility that the update leaves the database in a
 consistent state
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!database consistency
\end_layout

\end_inset

.
 For example, Emdros will not complain if you remove a constant with a given
 value without specifying a different constant with the same value, even
 if there are features that use this enumeration and have this value.
 This would mean that those feature-values could not be searched for, since
 there would be no label to look for.
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant!querying
\end_layout

\end_inset

 Neither would it be possible to get the feature values with GET FEATURES,
 since there would be no label to return.
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant!retrieving
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
There is no return value.
\end_layout

\begin_layout Subsection
DROP ENUMERATION
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!deletion
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!dropping
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
drop_enumeration_statement : 
\begin_inset Quotes eld
\end_inset

DROP
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
    (
\begin_inset Quotes eld
\end_inset

ENUM
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

ENUMERATION
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
    enumeration_name
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
enumeration_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
DROP ENUMERATION phrase_type_t
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement removes an enumeration altogether from the database, including
 all its enumeration constants
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
It is an error (and impossible) to drop an enumeration which is 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!object types using
\end_layout

\end_inset

in use by some object type.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
There is no return value.
\end_layout

\begin_layout Section
Segment manipulation
\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
Segments were present in Emdros up to and including version 1.1.12.
 After that, support for segments was removed.
 
\end_layout

\begin_layout Standard
A segment used to be an arbitrary, contiguous stretch of monads which was
 given a name.
 Objects could not be created which crossed the boundaries of a segment.
 You could restrict your search to within a single segment with SELECT ALL
 OBJECTS.
\end_layout

\begin_layout Standard
However, segments were found to be ugly baggage, cumbersome and not useful.
 Therefore, they were removed.
\end_layout

\begin_layout Standard
The CREATE SEGMENT statement is retained for backward compatibility.
\end_layout

\begin_layout Subsection
CREATE SEGMENT
\begin_inset CommandInset label
LatexCommand label
name "CREATE_SEGMENT"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
create_segment_statement : 
\begin_inset Quotes eld
\end_inset

CREATE
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

SEGMENT
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    segment_name
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

RANGE
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

   segment_range
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
segment_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
segment_range : T_INTEGER 
\begin_inset Quotes eld
\end_inset

-
\begin_inset Quotes erd
\end_inset

 T_INTEGER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

INTEGER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
CREATE SEGMENT Old_Testament
\end_layout

\begin_layout LyX-Code
RANGE = 1 - 500000
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Standard
This example used to create a segment named 
\begin_inset Quotes eld
\end_inset

Old_Testament
\begin_inset Quotes erd
\end_inset

 starting at monad 1 and ending at monad 500000.
 
\end_layout

\begin_layout Standard
Now it does nothing.
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement currently does nothing.
 It will fail with a database error.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
There is no return value.
\end_layout

\begin_layout Section
Querying the data
\end_layout

\begin_layout Standard
This section describes statements which can be used to query the 
\emph on
data
\emph default
 in an Emdros database, as opposed to querying the 
\emph on
schema
\emph default
.
\end_layout

\begin_layout Subsection
SELECT (FOCUS|ALL) OBJECTS
\begin_inset CommandInset label
LatexCommand label
name "SELECT_OBJECTS"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
select_objects_statement : select_clause 
\end_layout

\begin_layout LyX-Code
    opt_in_clause
\end_layout

\begin_layout LyX-Code
    opt_with_max_range_clause
\end_layout

\begin_layout LyX-Code
    opt_returning_clause
\end_layout

\begin_layout LyX-Code
    where_clause
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/*
\end_layout

\begin_layout LyX-Code
 * select-clause
\end_layout

\begin_layout LyX-Code
 */
\end_layout

\begin_layout LyX-Code
select_clause : 
\begin_inset Quotes eld
\end_inset

SELECT
\begin_inset Quotes erd
\end_inset

   focus_specification   [ 
\begin_inset Quotes eld
\end_inset

OBJECTS
\begin_inset Quotes erd
\end_inset

 ]
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
focus_specification : 
\begin_inset Quotes eld
\end_inset

FOCUS
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

ALL
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/*
\end_layout

\begin_layout LyX-Code
 * in-clause
\end_layout

\begin_layout LyX-Code
 */
\end_layout

\begin_layout LyX-Code
opt_in_clause : 
\begin_inset Quotes eld
\end_inset

IN
\begin_inset Quotes erd
\end_inset

   in_specification
\end_layout

\begin_layout LyX-Code
  | /* empty = all_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
all
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

-1 */
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
in_specification : monad_set 
\end_layout

\begin_layout LyX-Code
  | 
\begin_inset Quotes eld
\end_inset

ALL
\begin_inset Quotes erd
\end_inset

 /* = all_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
all
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

-1 */
\end_layout

\begin_layout LyX-Code
  | monad_set 
\end_layout

\begin_layout LyX-Code
  | T_IDENTIFIER /* Named arbitrary monad set */
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
monad_set : 
\begin_inset Quotes eld
\end_inset

{
\begin_inset Quotes erd
\end_inset

   monad_set_element_list   
\begin_inset Quotes eld
\end_inset

}
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
monad_set_element_list : monad_set_element   
\end_layout

\begin_layout LyX-Code
    { 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

   monad_set_element }
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
monad_set_element : T_INTEGER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

INTEGER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
  | T_INTEGER   
\begin_inset Quotes eld
\end_inset

-
\begin_inset Quotes erd
\end_inset

   T_INTEGER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

INTEGER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
  | T_INTEGER   
\begin_inset Quotes eld
\end_inset

-
\begin_inset Quotes erd
\end_inset

   /* From T_INTEGER to 
\begin_inset Quotes eld
\end_inset

practical infinity
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
                           (i.e., MAX_MONAD).
 */
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
/*
\end_layout

\end_deeper
\begin_layout LyX-Code
 *opt_with_max_range_clause
\end_layout

\begin_layout LyX-Code
 */
\end_layout

\begin_layout LyX-Code
opt_with_max_range_clause : 
\begin_inset Quotes eld
\end_inset

WITH
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MAX
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

RANGE
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MAX_M
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MONADS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
   | /* empty; same as WITH MAX RANGE MAX_M MONADS.
 */
\end_layout

\begin_layout LyX-Code
   | 
\begin_inset Quotes eld
\end_inset

WITH
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MAX
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

RANGE
\begin_inset Quotes erd
\end_inset

 T_INTEGER 
\begin_inset Quotes eld
\end_inset

MONADS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
   | 
\begin_inset Quotes eld
\end_inset

WITH
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MAX
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

RANGE
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

FEATURE
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MONADS
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
     
\begin_inset Quotes eld
\end_inset

FROM
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes eld
\end_inset

 object_type_name 
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
   | 
\begin_inset Quotes eld
\end_inset

WITH
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MAX
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

RANGE
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

FEATURE
\begin_inset Quotes erd
\end_inset

 feature_name 
\end_layout

\begin_layout LyX-Code
     
\begin_inset Quotes eld
\end_inset

FROM
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes eld
\end_inset

 object_type_name 
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/*
\end_layout

\begin_layout LyX-Code
 * returning-clause
\end_layout

\begin_layout LyX-Code
 */
\end_layout

\begin_layout LyX-Code
opt_returning_clause : /* Empty: Return full sheaf */
\end_layout

\begin_layout LyX-Code
  | 
\begin_inset Quotes eld
\end_inset

RETURNING
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

FULL
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

SHEAF
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
  | 
\begin_inset Quotes eld
\end_inset

RETURNING
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

FLAT
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

SHEAF
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
  | 
\begin_inset Quotes eld
\end_inset

RETURNING
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

FLAT
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

SHEAF
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

ON
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
    object_type_name_list 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object_type_name_list : 
\end_layout

\begin_layout LyX-Code
  object_type_name { 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

 object_type_name }
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/*
\end_layout

\begin_layout LyX-Code
 * where-clause
\end_layout

\begin_layout LyX-Code
 */
\end_layout

\begin_layout LyX-Code
where_clause : 
\begin_inset Quotes eld
\end_inset

WHERE
\begin_inset Quotes erd
\end_inset

 mql_query
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
For the 
\family typewriter
mql_query
\family default
 non-terminal, please see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "mql_query:Syntax"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "mql_query:Syntax"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
SELECT ALL OBJECTS
\end_layout

\begin_layout LyX-Code
IN { 1-4, 5, 7-9 }
\end_layout

\begin_layout LyX-Code
WITH MAX RANGE 5 MONADS
\end_layout

\begin_layout LyX-Code
RETURNING FULL SHEAF
\end_layout

\begin_layout LyX-Code
WHERE
\end_layout

\begin_layout LyX-Code
[Word lexeme = 
\begin_inset Quotes erd
\end_inset

>RY/
\begin_inset Quotes erd
\end_inset

]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\begin_inset CommandInset label
LatexCommand label
name "SELECT OBJECTS: Explanation"

\end_inset


\end_layout

\begin_layout Standard
This statement is a front-end to the MQL Query-subset (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chapter:MQL Query Subset"

\end_inset

 starting on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "chapter:MQL Query Subset"

\end_inset

).
\end_layout

\begin_layout Standard
The parameters to an MQL query are:
\end_layout

\begin_layout Enumerate
A universe U
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
U|see
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

universe
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

,
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
universe
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
A substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

 Su
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Su|see
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

substrate
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

, and
\end_layout

\begin_layout Enumerate
A topograph.
\end_layout

\begin_layout Standard
The universe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
universe
\end_layout

\end_inset

 U is a contiguous stretch of monads.
 The search is restricted only to include objects which are wholly contained
 within this universe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
universe
\end_layout

\end_inset

 (i.e., which are part_of
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
part
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

of
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
For part_of, see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "part_of"

\end_inset

.
\end_layout

\end_inset

 the universe).
\end_layout

\begin_layout Standard
The substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

 is used to further restrict the search.
 For there is the additional requirement that all objects found must be
 wholly contained within (i.e., part_of
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
part
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

of
\end_layout

\end_inset

) the substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

 as well.
 The substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

 must be part_of
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
part
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

of
\end_layout

\end_inset

 the universe.
 Mathematically speaking, the substrate is the set intersection of whatever
 was in the IN clause and all_m-1 (i.e., the set of all monads in the database).
\end_layout

\begin_layout Standard
The topograph is what is specified as 
\family typewriter
mql_query
\family default
 in the above grammar.
\end_layout

\begin_layout Standard
The IN-specification tells the query-engine what the substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

 Su should be.
 There are three choices:
\end_layout

\begin_layout Enumerate
Specify an explicit monad set like 
\begin_inset Quotes eld
\end_inset

{ 1-3000, 7000-10000 }
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Enumerate
Specify a named arbitrary monad set (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Arbitrary-monad-sets"

\end_inset

).
\end_layout

\begin_layout Enumerate
Leave it blank.
 This means that the substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

 is calculated as all_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
all
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

-1 (i.e., all of the monads in the database; see 
\begin_inset CommandInset citation
LatexCommand cite
key "Standard-MDF"
literal "true"

\end_inset

 or 
\begin_inset CommandInset citation
LatexCommand cite
key "Doedens94"
literal "true"

\end_inset

 or page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "subsec:all_m"

\end_inset

 in this Programmer's Guide.)
\end_layout

\begin_layout Standard
The universe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
universe
\end_layout

\end_inset

 U is then calculated as all the monads between the first and last monads
 of the substrate.
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

max range
\begin_inset Quotes erd
\end_inset

 specifies the maximum number of monads to take as a context for any power
 block at the outermost level.
 The significance of this is that it helps users not to get query results
 which are correct but useless because the query returns too many straws
 in the sheaf.
 This is done by putting an upper limit on the number of monads a power
 block may extend over.
 This limit can be 
\begin_inset Quotes eld
\end_inset

MAX_M
\begin_inset Quotes erd
\end_inset

 monads, meaning that there is in practice no limit to the stretch of monads
 which can be matched by a power block.
 It can also be empty, which is the same as 
\begin_inset Quotes eld
\end_inset

MAX_M
\begin_inset Quotes erd
\end_inset

 monads, i.e., no limit.
 It can also be an explicit number of monads, say, 5 or 100.
 The max range can also be taken as the length of the largest object of
 any object type.
 The set of monads to use can be either the privileged 
\begin_inset Quotes eld
\end_inset

monads
\begin_inset Quotes erd
\end_inset

 feature, or any feature whose type is SET OF MONADS.
 Note that the limit is NOT taken as the length of any actual object of
 the given object type which happens to be part_of the current stretch of
 monads under investigation.
 Rather, the cap is set before query execution time by inspecting the largest
 length of any monad set of the given monad set feature in the object type.
\end_layout

\begin_layout Standard
The difference between the RETURNING FULL SHEAF and the RETURNING FLAT SHEAF
 clause is that the latter applies the 
\begin_inset Quotes eld
\end_inset

flatten
\begin_inset Quotes erd
\end_inset

 operator
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
flatten operator
\end_layout

\end_inset

 to the sheaf before returning it, whereas the former does not.
 If the returning_clause clause is empty, it means the same thing as RETURNING
 FULL SHEAF.
 If the RETURNING FLAT SHEAF has an ON appendix with a list of object type
 names, then the two-argument flatten operator is applied using this list
 of object type names.
 See section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Flat-sheaf"

\end_inset

 for an explanation of flat sheaves
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
flat sheaf
\end_layout

\end_inset

 and the 
\begin_inset Quotes eld
\end_inset

flatten
\begin_inset Quotes erd
\end_inset

 operator.
\end_layout

\begin_layout Subsubsection
Monad set
\end_layout

\begin_layout Standard
The explicit monad set in the IN clause, if given, must consist of a comma-separ
ated list of monad-set-elements enclosed in curly braces.
 A monad-set-element is either a single integer (referring to a single monad)
 or a range consisting of two integers (referring to a range of monads).
 The monad-set-elements need not occur in any specific order, and are allowed
 to overlap.
 The result is calculated by adding all the monads together into one big
 set.
 The ranges of monads must, however, be monotonic, i.e., the second integer
 must be greater than or equal to the first.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
A sheaf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sheaf
\end_layout

\end_inset

, either full or flat
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
flat sheaf
\end_layout

\end_inset

: All retrieved objects are included, but those objects that had the 
\family typewriter
focus
\family default
 modifier in the query are flagged as such.
 Please see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sheaf"

\end_inset

 for an explanation of the sheaf.
 Appendix 
\begin_inset CommandInset ref
LatexCommand vref
reference "Appendix:Console-sheaf-grammar"

\end_inset

 gives the grammar for the 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
console!sheaf
\end_layout

\end_inset

console-sheaf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
output!console
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
console!output
\end_layout

\end_inset

.
 Please see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Flat-sheaf"

\end_inset

 for an explanation of the flat sheaf.
\end_layout

\begin_layout Subsection
SELECT OBJECTS AT
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
select_objects_at_statement : 
\begin_inset Quotes eld
\end_inset

SELECT
\begin_inset Quotes erd
\end_inset

   [ 
\begin_inset Quotes eld
\end_inset

OBJECTS
\begin_inset Quotes erd
\end_inset

 ]
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

AT
\begin_inset Quotes erd
\end_inset

   single_monad_specification
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

  object_type_to_find   
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
single_monad_specification : 
\begin_inset Quotes eld
\end_inset

MONAD
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

   T_INTEGER
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
object_type_to_find : object_type_name
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
object_type_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
SELECT OBJECTS
\end_layout

\begin_layout LyX-Code
AT MONAD = 3406
\end_layout

\begin_layout LyX-Code
[Clause]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Standard
This example selects all those objects of type Clause which start at monad
 3406.
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement returns a table containing the object id_ds of all the objects
 of the given type which start at the monad specified, i.e., whose first monad
 is the given monad.
\end_layout

\begin_layout Standard
The result is a table with one column, namely 
\begin_inset Quotes eld
\end_inset

id_d
\begin_inset Quotes erd
\end_inset

.
 Each row represents one object, where the id_d is its object id_d.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
A table with the following schema: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
id_d: id_d
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
On failure, this table is empty.
 Note, however, that the table can also be empty because there were no objects
 of the given type having the given monad as their first monad.
 This is not an error.
\end_layout

\begin_layout Subsection
SELECT OBJECTS HAVING MONADS IN
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
select_objects_having_monads_in_statement :
\end_layout

\begin_layout LyX-Code
   
\begin_inset Quotes eld
\end_inset

SELECT
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

OBJECTS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
   
\begin_inset Quotes eld
\end_inset

HAVING
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MONADS
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

IN
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
   monad_set
\end_layout

\begin_layout LyX-Code
   
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

  object_type_to_find   
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object_type_to_find : object_type_name | 
\begin_inset Quotes eld
\end_inset

ALL
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object_type_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
For the 
\family typewriter
monad_set
\family default
 non-terminal, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "SELECT_OBJECTS"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "SELECT_OBJECTS"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
SELECT OBJECTS
\end_layout

\begin_layout LyX-Code
HAVING MONADS IN { 23-45, 68, 70, 87-93 }
\end_layout

\begin_layout LyX-Code
[Clause]
\end_layout

\begin_layout LyX-Code
GO
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

SELECT OBJECTS
\end_layout

\begin_layout LyX-Code
HAVING MONADS IN { 1, 5-7, 103-109 }
\end_layout

\begin_layout LyX-Code
[ALL]
\end_layout

\begin_layout LyX-Code
GO
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

SELECT OBJECTS
\end_layout

\begin_layout LyX-Code
HAVING MONADS IN { 23 }
\end_layout

\begin_layout LyX-Code
[Word]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement returns the object types and object id_ds of the objects
 that have at least one monad in the monad set specified.
 If 
\begin_inset Quotes eld
\end_inset

ALL
\begin_inset Quotes erd
\end_inset

 is specified as the object type, then this is done for all object types
 in the database.
 If a specific object type is specified, then that object type is used.
\end_layout

\begin_layout Standard
The returned table has one row for each object.
 Each object is represented only once.
 The monad in each row is guaranteed to be from the set of monads specified,
 and is guaranteed to be from the object in the row.
\end_layout

\begin_layout Standard
This statement is useful in much the same way that the SELECT OBJECTS AT
 statement is useful.
 It can be used, e.g., for getting id_ds of objects that must be displayed
 as part of the results of a query, but which are not in the query results.
 This statement can also be used like the SELECT OBJECTS AT statement by
 simply making the monad set a singleton set with only one monad.
 Note, however, that this statement does something a different from SELECT
 OBJECTS AT.
 Whereas SELECT OBJECTS AT will only retrieve an object if that object 
\emph on
starts on 
\emph default
the given monad, this present statement will retrieve the object if only
 the object 
\emph on
has at least one monad 
\emph default
from the monad set given.
 This statement also has the advantage that one can ask for all object types.
 This enables one to access objects which one knows might be there, but
 of which one does not know the object types.
 It also has the advantage of being much faster than a series of SELECT
 OBJECTS AT statements if one is looking for objects in more than one monad.
\end_layout

\begin_layout Standard
This statement was typically used in a series of SELECT OBJECTS HAVING MONADS
 IN, GET MONADS, and GET FEATURES statements, in order to obtain all information
 necessary for display of data.
 This sequence has been wrapped neatly into the GET OBJECTS HAVING MONADS
 IN statement, which is now the preferred method of doing this sequence.
\end_layout

\begin_layout Standard
Note to programmers: If you want to get objects not from all object types
 but from only a subset of all object types, the easiest thing is to issue
 the required number of copies of the statement with GO in between, varying
 only the object type.
 That way, if you are using the mql program as a proxy for the MQL engine,
 you don't incur the overhead of starting and stopping the mql program.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object_type_name : string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
monad : monad_m
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
id_d : id_d
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset

On failure, this table is empty.
 Note, however, that the table can also be empty if the command were successful,
 if there were no objects that had at least one monad in the monad set specified.
\end_layout

\begin_layout Subsection
GET OBJECTS HAVING MONADS IN
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
get_objects_having_monads_in_statement :
\end_layout

\begin_layout LyX-Code
   
\begin_inset Quotes eld
\end_inset

GET
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

OBJECTS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
   
\begin_inset Quotes eld
\end_inset

HAVING
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MONADS
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

IN
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
   gohmi_monad_set
\end_layout

\begin_layout LyX-Code
   using_monad_set_feature
\end_layout

\begin_layout LyX-Code
   
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

  object_type_name   
\end_layout

\begin_layout LyX-Code
          [gohmi_feature_retrieval]
\end_layout

\begin_layout LyX-Code
   
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
gohmi_monad_set : 
\begin_inset Quotes eld
\end_inset

ALL
\begin_inset Quotes erd
\end_inset

 /* all_m-1 on the 
\begin_inset Quotes eld
\end_inset

monads
\begin_inset Quotes erd
\end_inset

 feature,
\end_layout

\begin_layout LyX-Code
                           regardless of which monad set 
\end_layout

\begin_layout LyX-Code
                           is actually used! 
\end_layout

\begin_layout LyX-Code
                        */
\end_layout

\begin_layout LyX-Code
                | monad_set
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
using_monad_set_feature : /* empty: Use the object's monad set */
\end_layout

\begin_layout LyX-Code
    | 
\begin_inset Quotes eld
\end_inset

USING
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MONAD
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

FEATURE
\begin_inset Quotes erd
\end_inset

 feature_name
\end_layout

\begin_layout LyX-Code
    | 
\begin_inset Quotes eld
\end_inset

USING
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MONAD
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

FEATURE
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MONADS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
feature_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
gohmi_feature_retrieval : 
\begin_inset Quotes eld
\end_inset

GET
\begin_inset Quotes erd
\end_inset

 feature_list
\end_layout

\begin_layout LyX-Code
                        | 
\begin_inset Quotes eld
\end_inset

GET
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

ALL
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
feature_list : feature_name { 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

 feature_name }*
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object_type_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
For the 
\family typewriter
monad_set
\family default
 non-terminal, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "SELECT_OBJECTS"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "SELECT_OBJECTS"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
GET OBJECTS
\end_layout

\begin_layout LyX-Code
HAVING MONADS IN { 23-45, 68, 70, 87-93 }
\end_layout

\begin_layout LyX-Code
[Clause]
\end_layout

\begin_layout LyX-Code
GO
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

GET OBJECTS
\end_layout

\begin_layout LyX-Code
HAVING MONADS IN { 1, 5-7, 103-109 }
\end_layout

\begin_layout LyX-Code
USING MONAD FEATURE parallel_monads
\end_layout

\begin_layout LyX-Code
[Phrase GET phrase_type, function]
\end_layout

\begin_layout LyX-Code
GO
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

GET OBJECTS
\end_layout

\begin_layout LyX-Code
HAVING MONADS IN { 23 }
\end_layout

\begin_layout LyX-Code
[Word GET ALL]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement returns the objects of the given object type that have at
 least one monad in the monad set specified.
 A flat sheaf is returned with one straw containing all the objects to be
 retrieved.
\end_layout

\begin_layout Standard
The monad set to use is the object's monad set by default.
 If the 
\begin_inset Quotes eld
\end_inset

using_monad_set_feature
\begin_inset Quotes erd
\end_inset

 variant is used, the monad sets used are the ones stored in this feature.
 The feature must be a set of monads.
\end_layout

\begin_layout Standard
This statement is useful in much the same way that the SELECT OBJECTS AT
 statement is useful.
 It can be used, e.g., for getting id_ds of objects that must be displayed
 as part of the results of a query, but which are not in the query results.
\end_layout

\begin_layout Standard
This is the preferred method for getting objects from the engine, rather
 than a sequence of SELECT OBJECTS HAVING MONADS IN, GET MONADS, and GET
 FEATURES.
 It is much faster than the combination of the three.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
A flat sheaf is returned which contains the objects in question.
 See Section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Flat-sheaf"

\end_inset

 for more information.
\end_layout

\begin_layout Subsection
GET AGGREGATE FEATURES
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
get_aggregate_features_statement : 
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

GET
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

AGGREGATE
\begin_inset Quotes erd
\end_inset

 (
\begin_inset Quotes eld
\end_inset

FEATURE
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

FEATURES
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
    aggregate_feature_list
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

FROM
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

OBJECTS
\begin_inset Quotes erd
\end_inset

 opt_in_clause
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

WHERE
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes eld
\end_inset

 object_type_name 
\end_layout

\begin_layout LyX-Code
       feature_constraints
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
aggregate_feature_list : aggregate_feature 
\end_layout

\begin_layout LyX-Code
                       | aggregate_feature_list 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
                         aggregate_feature
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
aggregate_feature : aggregate_function 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Quotes eld
\end_inset

 feature_name 
\begin_inset Quotes eld
\end_inset

)
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
                  | 
\begin_inset Quotes eld
\end_inset

COUNT
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Quotes eld
\end_inset

 
\begin_inset Quotes eld
\end_inset

*
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

)
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
                  | 
\begin_inset Quotes eld
\end_inset

COUNT
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Quotes eld
\end_inset

 feature_name 
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

 feature_value 
\begin_inset Quotes eld
\end_inset

)
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
aggregate_function : 
\begin_inset Quotes eld
\end_inset

MIN
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

MAX
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

SUM
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
feature_name : T_IDENTIFIER
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object_type_name : T_IDENTIFIER
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
For the 
\family typewriter
opt_in_clause
\family default
 non-terminal, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "SELECT_OBJECTS"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "SELECT_OBJECTS"

\end_inset

.
 For the 
\family typewriter
feature_constraints
\family default
 non-terminal, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "mql_query:Syntax"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "mql_query:Syntax"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Examples
\end_layout

\begin_layout LyX-Code
/*
\end_layout

\begin_layout LyX-Code
 * Create the enumerations and object types of an 
\end_layout

\begin_layout LyX-Code
 * example database.
\end_layout

\begin_layout LyX-Code
 *
\end_layout

\begin_layout LyX-Code
 */
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE ENUMERATION boolean_t = {
\end_layout

\begin_layout LyX-Code
    false = 0,
\end_layout

\begin_layout LyX-Code
    true
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE ENUMERATION part_of_speech_t = {
\end_layout

\begin_layout LyX-Code
    Verb,
\end_layout

\begin_layout LyX-Code
    Noun,
\end_layout

\begin_layout LyX-Code
    ProperNoun,
\end_layout

\begin_layout LyX-Code
    Pronoun,
\end_layout

\begin_layout LyX-Code
    Adjective,
\end_layout

\begin_layout LyX-Code
    Adverb,
\end_layout

\begin_layout LyX-Code
    Preposition,
\end_layout

\begin_layout LyX-Code
    Conjunction,
\end_layout

\begin_layout LyX-Code
    Particle
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE OBJECT TYPE
\end_layout

\begin_layout LyX-Code
WITH SINGLE MONAD OBJECTS
\end_layout

\begin_layout LyX-Code
[Token
\end_layout

\begin_layout LyX-Code
    has_space_before : boolean_t;  // Any space before the surface?
\end_layout

\begin_layout LyX-Code
    surface : STRING;              // The surface itself
\end_layout

\begin_layout LyX-Code
    has_space_after : boolean_t;   // Any space after the surface?
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
    part_of_speech : part_of_speech_t;
\end_layout

\begin_layout LyX-Code
    is_punctuation : boolean_t;     // true iff the surface is punctuation.
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CREATE OBJECT TYPE
\end_layout

\begin_layout LyX-Code
WITH SINGLE RANGE OBJECTS
\end_layout

\begin_layout LyX-Code
[Line
\end_layout

\begin_layout LyX-Code
    actant_name : STRING FROM SET;
\end_layout

\begin_layout LyX-Code
    gender : gender_t;
\end_layout

\begin_layout LyX-Code
    words_spoken : INTEGER; 
\end_layout

\begin_layout LyX-Code
    line_number_in_act : INTEGER;
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/*
\end_layout

\begin_layout LyX-Code
 * Example 1:
\end_layout

\begin_layout LyX-Code
 *
\end_layout

\begin_layout LyX-Code
 * Founds all Token objects in the entire database whose 
\end_layout

\begin_layout LyX-Code
 * is_punctuation feature equals false.
\end_layout

\begin_layout LyX-Code
 *
\end_layout

\begin_layout LyX-Code
 * Then retrieve one aggregate function, namely a count of 
\end_layout

\begin_layout LyX-Code
 * all Token objects whose part_of_speech is equal to Verb.
\end_layout

\begin_layout LyX-Code
 */
\end_layout

\begin_layout LyX-Code
GET AGGREGATE FEATURES
\end_layout

\begin_layout LyX-Code
COUNT(part_of_speech=Verb)
\end_layout

\begin_layout LyX-Code
FROM OBJECTS
\end_layout

\begin_layout LyX-Code
WHERE
\end_layout

\begin_layout LyX-Code
[Token is_punctuation=false]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/* 
\end_layout

\begin_layout LyX-Code
 * Example 2:
\end_layout

\begin_layout LyX-Code
 *
\end_layout

\begin_layout LyX-Code
 * Finds all Line objects in the database (no monad restriction), and
\end_layout

\begin_layout LyX-Code
 * does three aggregate functions:
\end_layout

\begin_layout LyX-Code
 * - Find the sum of all words spoken by all actants.
\end_layout

\begin_layout LyX-Code
 * - Find a count of all Line objects.
 (Note that this, together 
\end_layout

\begin_layout LyX-Code
 *   with the sum of all words spoken, can be used to calculate 
\end_layout

\begin_layout LyX-Code
 *   the average number of words spoken by any actant.
 This has to be 
\end_layout

\begin_layout LyX-Code
 *   done outside of Emdros, as Emdros does not yet support floating 
\end_layout

\begin_layout LyX-Code
 *   point return values.)
\end_layout

\begin_layout LyX-Code
 * - Find a count of all Line objects whose gender feature is Man, 
\end_layout

\begin_layout LyX-Code
 *   i.e., the number of Line spoken by a Man.
\end_layout

\begin_layout LyX-Code
 */
\end_layout

\begin_layout LyX-Code
GET AGGREGATE FEATURES
\end_layout

\begin_layout LyX-Code
SUM(words_spoken), COUNT(*), COUNT(gender=Man)
\end_layout

\begin_layout LyX-Code
FROM OBJECTS
\end_layout

\begin_layout LyX-Code
WHERE
\end_layout

\begin_layout LyX-Code
[Line]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/*
\end_layout

\begin_layout LyX-Code
 * Example 3:
\end_layout

\begin_layout LyX-Code
 *
\end_layout

\begin_layout LyX-Code
 * Finds all Line objects where actant_name is equal to "Hamlet" in
\end_layout

\begin_layout LyX-Code
 * the monad set { 1-12478 } (an arbitrarily chosen example).
\end_layout

\begin_layout LyX-Code
 * Does three aggregate functions:
\end_layout

\begin_layout LyX-Code
 * - Finds the maximum number of words spoken in any of "Hamlet"'s 
\end_layout

\begin_layout LyX-Code
 *   lines.
\end_layout

\begin_layout LyX-Code
 * - Finds the minimum line number in any act (i.e., the first line
\end_layout

\begin_layout LyX-Code
 *   in which "Hamlet" speaks.
\end_layout

\begin_layout LyX-Code
 * - Finds the total count of Lines spoken by "Hamlet".
\end_layout

\begin_layout LyX-Code
 */
\end_layout

\begin_layout LyX-Code
GET AGGREGATE FEATURES
\end_layout

\begin_layout LyX-Code
MAX(words_spoken), MIN(line_number_in_act), COUNT(*)
\end_layout

\begin_layout LyX-Code
FROM OBJECTS
\end_layout

\begin_layout LyX-Code
IN { 1-12478 }
\end_layout

\begin_layout LyX-Code
WHERE
\end_layout

\begin_layout LyX-Code
[Line actant_name="Hamlet"]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/*
\end_layout

\begin_layout LyX-Code
 * Example 4:
\end_layout

\begin_layout LyX-Code
 *
\end_layout

\begin_layout LyX-Code
 * Finds all Line objects in all monads,
\end_layout

\begin_layout LyX-Code
 * where actant_name is equal to "Hamlet" 
\end_layout

\begin_layout LyX-Code
 * OR is equal to 
\begin_inset Quotes eld
\end_inset

Ophelia
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout LyX-Code
 * Does three aggregate functions:
\end_layout

\begin_layout LyX-Code
 * - Finds the total sum of words spoken by either Hamlet or Ophelia.
\end_layout

\begin_layout LyX-Code
 * - Finds the count of all Lines in which the actant_name is 
\begin_inset Quotes eld
\end_inset

Hamlet
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout LyX-Code
 * - Finds the count of all Lines in which the actant_name is 
\begin_inset Quotes eld
\end_inset

Ophelia
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout LyX-Code
 */
\end_layout

\begin_layout LyX-Code
GET AGGREGATE FEATURES
\end_layout

\begin_layout LyX-Code
SUM(words_spoken), 
\end_layout

\begin_layout LyX-Code
COUNT(actant_name="Hamlet"), 
\end_layout

\begin_layout LyX-Code
COUNT(actant_name="Ophelia")
\end_layout

\begin_layout LyX-Code
FROM OBJECTS
\end_layout

\begin_layout LyX-Code
IN ALL
\end_layout

\begin_layout LyX-Code
WHERE
\end_layout

\begin_layout LyX-Code
[Line actant_name="Hamlet" OR actant_name="Ophelia"]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement returns a table giving the desired aggregate functions over
 the objects specified in the WHERE clause.
\end_layout

\begin_layout Standard
In essence, five aggregate functions are available:
\end_layout

\begin_layout Description
MIN(feature_name): Retrieves the minimum value of the given feature.
 The feature must be of type integer.
 The result is also an integer.
\end_layout

\begin_layout Description
MAX(feature_name): Retrieves the maximum value of the given feature.
 The feature must be of type integer.
 The result is also an integer.
\end_layout

\begin_layout Description
SUM(feature_name): Retrieves the sum of all values of the given feature.
 The feature must be of type integer.
 The result is also an integer.
\end_layout

\begin_layout Description
COUNT(*): Retrieves a count of all objects retrieved by the WHERE clause.
 The result is an integer.
\end_layout

\begin_layout Description
COUNT(feature_name=feature_value): Retrieves a count of all objects retrieves,
 with the added restriction that the given feature name must have the given
 feature value.
 The result is an integer.
\end_layout

\begin_layout Standard
The standard SQL aggregate function 
\begin_inset Quotes eld
\end_inset

AVG
\begin_inset Quotes erd
\end_inset

 is missing.
 This is because Emdros does not (yet) support return values with type 
\begin_inset Quotes eld
\end_inset

floating point
\begin_inset Quotes erd
\end_inset

.
 Note that the same result as AVG can be achieved by retrieving two aggregate
 functions: SUM(feature_name) and COUNT(*), and then doing the appropriate
 division outside of Emdros.
\end_layout

\begin_layout Standard
The 
\family typewriter
opt_in_clause
\family default
 can be used to limit the monad set within which to retrieve the objects.
 If omitted, it means that the entire database is searched, without monad
 restriction.
\end_layout

\begin_layout Standard
The object type name given after the 
\begin_inset Quotes eld
\end_inset

WHERE
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes eld
\end_inset

 tokens is also the object type on which any features in the aggregate feature
 list are found.
 Hence, the features mentioned in the aggregate feature list must exist
 on the object type.
\end_layout

\begin_layout Standard
It is possible to use an arbitrary Boolean expression after the object type
 name, just as in the topographic MQL queries explained in Chapter 
\begin_inset CommandInset ref
LatexCommand pageref
reference "chapter:MQL Query Subset"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
Upon failure, an empty table.
\end_layout

\begin_layout Standard
Upon success, a table with one row, and as many columns as there are aggregate
 functions in the query.
 The column types are all 
\begin_inset Quotes eld
\end_inset

integer
\begin_inset Quotes erd
\end_inset

, and the column names are given as 
\begin_inset Quotes eld
\end_inset

Column1
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Column2
\begin_inset Quotes erd
\end_inset

, ..., 
\begin_inset Quotes eld
\end_inset

Column
\emph on
N
\emph default

\begin_inset Quotes erd
\end_inset

, where the number given is the index (1-based) of the aggregate functions
 in the input query.
\end_layout

\begin_layout Subsection
GET MONADS
\begin_inset CommandInset label
LatexCommand label
name "Section:GET MONADS"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
get_monads_statement : 
\begin_inset Quotes eld
\end_inset

GET
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MONADS
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

FROM
\begin_inset Quotes erd
\end_inset

   (
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

OBJECTS
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

WITH
\begin_inset Quotes erd
\end_inset

 id_ds_specification
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

 object_type_name 
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
object_type_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
For a description of 
\family typewriter
id_ds_specification
\family default
, please see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "CREATE_OBEJCT_FROM_ID_DS"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "CREATE_OBEJCT_FROM_ID_DS"

\end_inset

.
 
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
GET MONADS 
\end_layout

\begin_layout LyX-Code
FROM OBJECTS
\end_layout

\begin_layout LyX-Code
WITH ID_DS = 10342, 10344, 10383
\end_layout

\begin_layout LyX-Code
[Clause]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\begin_inset CommandInset label
LatexCommand label
name "GET_MONADS:Explanation"

\end_inset


\end_layout

\begin_layout Standard
This statement returns, for each object in the list of id_ds, a representation
 of its set of monads.
 The set is represented by maximal stretches of monads.
 For example, if an object consists of the monads { 1, 2, 4, 5, 6, 9, 11,
 12 }, and its id_d is 10342, then the following will be in the results
 of the above example:
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object_id_d : id_d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mse_first : monad_m
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mse_last : monad_m
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10342
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10342
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10342
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10342
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset

The 
\begin_inset Quotes eld
\end_inset

mse
\begin_inset Quotes erd
\end_inset

 in 
\begin_inset Quotes eld
\end_inset

mse_first
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

mse_last
\begin_inset Quotes erd
\end_inset

 stands for 
\begin_inset Quotes eld
\end_inset

Monad Set Element.
\begin_inset Quotes erd
\end_inset

 A monad set element consists of a starting monad and an ending monad (always
 greater than or equal to the starting monad).
 It represents all of the monads between the two borders
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
borders
\end_layout

\end_inset

, including the borders
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
borders
\end_layout

\end_inset

.
 An mse's last monad is always greater than or equal to its first monad.
\end_layout

\begin_layout Standard
The mses in the list are always maximal.
 That is, there is a gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 of at least one monad in between each of the MSEs.
\end_layout

\begin_layout Standard
In mathematical terms, suppose we have an MSE A.
 Then for all other MSEs B for the same object, it is the case that either
 A.last + 1 < B.first or B.last < A.first - 1
\end_layout

\begin_layout Standard
The MSEs will come in no particular order.
\end_layout

\begin_layout Standard
See 
\begin_inset CommandInset citation
LatexCommand cite
key "Monad-Sets"
literal "true"

\end_inset

 for more information on monad sets and the way Emdros treats them.
\end_layout

\begin_layout Standard
It does not matter whether you write 
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

OBJECTS
\begin_inset Quotes erd
\end_inset

: The choice is merely syntactic sugar.
\end_layout

\begin_layout Standard
There is no limit on how many id_ds can be specified.
 The algorithm will not balk at even many thousand id_ds, but it will, of
 course, take more time to get the monads of more objects.
\end_layout

\begin_layout Standard
This statement was typically used in a series of SELECT OBJECTS HAVING MONADS
 IN, GET MONADS, and GET FEATURES statements, in order to obtain all information
 necessary for display of data.
 This sequence has been wrapped neatly into the GET OBJECTS HAVING MONADS
 IN statement, which is now the preferred method of doing this sequence.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
A table with the following schema:
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object_id_d : id_d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mse_first : monad_m
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mse_last : monad_m
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
GET FEATURES
\begin_inset CommandInset label
LatexCommand label
name "subsec:GET-FEATURES"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
get_features_statement : 
\begin_inset Quotes eld
\end_inset

GET
\begin_inset Quotes erd
\end_inset

   
\end_layout

\begin_layout LyX-Code
    (
\begin_inset Quotes eld
\end_inset

FEATURE
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

FEATURES
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
    feature_list
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

FROM
\begin_inset Quotes erd
\end_inset

   (
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

OBJECTS
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

WITH
\begin_inset Quotes erd
\end_inset

 id_ds_specification
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

  object_type_name   
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/*
\end_layout

\begin_layout LyX-Code
 * feature_list
\end_layout

\begin_layout LyX-Code
 */
\end_layout

\begin_layout LyX-Code
feature_list : feature_name   { 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

  feature_name }
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
feature_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object_type_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
For a description of 
\family typewriter
id_ds_specification
\family default
, please see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "CREATE_OBEJCT_FROM_ID_DS"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "CREATE_OBEJCT_FROM_ID_DS"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
GET FEATURES surface, psp
\end_layout

\begin_layout LyX-Code
FROM OBJECTS WITH ID_DS = 12513,12514
\end_layout

\begin_layout LyX-Code
[Word]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement returns a table containing feature-values of certain objects
 in the database.
\end_layout

\begin_layout Standard
Note how this is different from the 
\begin_inset Quotes eld
\end_inset

SELECT FEATURES
\begin_inset Quotes erd
\end_inset

 command.
 The 
\begin_inset Quotes eld
\end_inset

SELECT FEATURES
\begin_inset Quotes erd
\end_inset

 command queries an 
\emph on
object type
\emph default
 for a list of its 
\emph on
features
\emph default
.
 The 
\begin_inset Quotes eld
\end_inset

GET FEATURES
\begin_inset Quotes erd
\end_inset

 command queries 
\emph on
objects
\emph default
 for the 
\emph on
values
\emph default
 of some of their features.
\end_layout

\begin_layout Standard
This statement was typically used in a series of SELECT OBJECTS HAVING MONADS
 IN, GET MONADS, and GET FEATURES statements, in order to obtain all information
 necessary for display of data.
 This sequence has been wrapped neatly into the GET OBJECTS HAVING MONADS
 IN statement, which is now the preferred method of doing this sequence.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
The return type is a table with a schema containing one string for each
 feature in the list of features.
 The order of the columns is that in the list of features.
 The first column in the table contains the object id_d involved in the
 row.
 Thus for 
\begin_inset Formula $n$
\end_inset

 features, the number of columns will be 
\begin_inset Formula $n+1$
\end_inset

.
\end_layout

\begin_layout Standard
The return type of each feature is the same as the type of the feature.
 The exact representation depends on whether the output is console output
 or XML output.
 For XML, see the DTD.
 For console output, see the examples below.
 Enumeration constants are shown as the enumeration constant label, not
 the integer value.
 
\end_layout

\begin_layout Standard
For list features, the value is a space-surrounded, space-delimited list
 of values.
 Integers and ID_Ds are given as integers; enumeration constant values as
 their constant names (e.g., 
\begin_inset Quotes eld
\end_inset

first_person
\begin_inset Quotes erd
\end_inset

).
 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object_id_d: id_d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
surface: string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
psp: enum(psp_t)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
number_in_corpus : integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
parent: id_d
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
The table contains the objects in no particular order.
\end_layout

\begin_layout Subsection
GET SET FROM FEATURE
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
get_set_from_feature_statement : 
\begin_inset Quotes eld
\end_inset

GET
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

SET
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

FROM
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

FEATURE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    feature_name
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

  object_type_name   
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
feature_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object_type_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
GET SET 
\end_layout

\begin_layout LyX-Code
FROM FEATURE lexeme
\end_layout

\begin_layout LyX-Code
[Word]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement returns a table containing the set of existing feature-values
 for a feature declared FROM SET.
 See the CREATE OBJECT TYPE and UPDATE OBJECT TYPE statements on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "CREATE_OBJECT_TYPE"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand pageref
reference "UPDATE_OBJECT_TYPE"

\end_inset

 respectively for the syntax of the FROM SET declaration.
\end_layout

\begin_layout Standard
Note how this is different from GET FEATURES: The 
\begin_inset Quotes eld
\end_inset

GET FEATURES
\begin_inset Quotes erd
\end_inset

 command queries 
\emph on
objects
\emph default
 for the 
\emph on
values
\emph default
 of some of their features.
 The GET SET FROM FEATURE queries the 
\emph on
set
\emph default
 of existing values for a given feature, regardless of which objects have
 these values for this feature.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
The return type is a table with a schema containing one string for each
 value in the set.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
value: string
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
The order of the strings in the table is undefined.
\end_layout

\begin_layout Subsection
SELECT MIN_M
\begin_inset CommandInset label
LatexCommand label
name "SELECT_MIN_M"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
min
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
select_min_m_statement : 
\begin_inset Quotes eld
\end_inset

SELECT
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

MIN_M
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
SELECT MIN_M
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
Returns the minimum monad in use in the database.
 The table returned has only one data row, namely the minimum monad.
 See section 
\begin_inset CommandInset ref
LatexCommand vref
reference "min_m,max_m"

\end_inset

 for more information.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
A table with the following schema:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
min_m : monad_m
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
On failure, this table is empty.
 
\end_layout

\begin_layout Subsection
SELECT MAX_M
\begin_inset CommandInset label
LatexCommand label
name "SELECT_MAX_M"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
max
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
select_max_m_statement : 
\begin_inset Quotes eld
\end_inset

SELECT
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

MAX_M
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
SELECT MAX_M
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
Returns the maximum monad in use in the database.
 The table returned has only one data row, namely the maximum monad.
 See section 
\begin_inset CommandInset ref
LatexCommand vref
reference "min_m,max_m"

\end_inset

 for more information.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
A table with the following schema:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
max_m : monad_m
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
On failure, this table is empty.
 
\end_layout

\begin_layout Subsection
SELECT MONAD SETS
\begin_inset CommandInset label
LatexCommand label
name "subsec:SELECT-MONAD-SETS"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
select_monad_sets_statement : 
\begin_inset Quotes eld
\end_inset

SELECT
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MONAD
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

SETS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
SELECT MONAD SETS GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement returns a table listing the names of the monad sets stored
 in the database.
 These are the monad sets referred to in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Arbitrary-monad-sets"

\end_inset

.
\end_layout

\begin_layout Standard
The monad set names come in no particular order.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
monad_set_name : string
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
GET MONAD SETS
\begin_inset CommandInset label
LatexCommand label
name "subsec:GET-MONAD-SETS"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
get_monad_sets_statement : 
\begin_inset Quotes eld
\end_inset

GET
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MONAD
\begin_inset Quotes erd
\end_inset

 (
\begin_inset Quotes eld
\end_inset

SET
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

SETS
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
                          monad_sets_specification
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
monad_sets_specification : 
\begin_inset Quotes eld
\end_inset

ALL
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
  | monad_set_list
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
monad_set_list : monad_set_name { 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

 monad_set_name }
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
monad_set_name : T_IDENTIFIER
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
GET MONAD SET My_research_collection
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
GET MONAD SETS Historical_books, Former_prophets
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
GET MONAD SETS ALL
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement returns a table listing the monads of each of the monad sets
 named in the query.
 These monad sets are the arbitrary monad sets described in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Arbitrary-monad-sets"

\end_inset

.
\end_layout

\begin_layout Standard
It doesn't matter whether you say 
\begin_inset Quotes eld
\end_inset

SET
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

SETS
\begin_inset Quotes erd
\end_inset

.
 This is purely syntactic sugar.
\end_layout

\begin_layout Standard
If 
\begin_inset Quotes eld
\end_inset

ALL
\begin_inset Quotes erd
\end_inset

 is given as the monad_sets_specification, then all monad sets are listed,
 in no particular order.
\end_layout

\begin_layout Standard
In the output, each monad set is represented in the same way as described
 in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "GET_MONADS:Explanation"

\end_inset

.
 Each monad set is guaranteed to appear in the table in one contiguous stretch,
 that is, monad sets are not interleaved.
 Moreover, the monad set elements of each monad set is sorted on mse_first,
 in ascending order.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
monad_set_name : string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mse_first : monad_m
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mse_last : monad_m
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Schema reflection
\end_layout

\begin_layout Standard
This section describes those query statements which can be used to retrieve
 information about the schema.
\end_layout

\begin_layout Subsection
SELECT OBJECT TYPES
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
select_object_types_statement : 
\begin_inset Quotes eld
\end_inset

SELECT
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    [ 
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset

 ]    
\begin_inset Quotes eld
\end_inset

TYPES
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
SELECT OBJECT TYPES
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement returns a list of the names of all the object types available
 in the database.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
A table with the following schema: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object_type_name: string
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
On failure, this table is empty.
\end_layout

\begin_layout Subsection
SELECT FEATURES
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
select_features_statement : 
\begin_inset Quotes eld
\end_inset

SELECT
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

FEATURES
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

FROM
\begin_inset Quotes erd
\end_inset

   [ [ 
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset

 ]   
\begin_inset Quotes eld
\end_inset

TYPE
\begin_inset Quotes erd
\end_inset

 ]
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

   object_type_name   
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
object_type_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
SELECT FEATURES
\end_layout

\begin_layout LyX-Code
FROM OBJECT TYPE
\end_layout

\begin_layout LyX-Code
[Phrase]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement returns a table with the features belonging to the given
 object type.
 
\end_layout

\begin_layout Standard
The type_name string in the result gives the type of the feature.
 It has the values as in table 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:Possible-type-names"

\end_inset

.
\end_layout

\begin_layout Standard
The default_value string in the result is a string representation of the
 default value.
 It must be interpreted according to the feature type.
\end_layout

\begin_layout Standard
The computed boolean in the result shows whether the feature is computed
 or not.
 Currently, the only computed feature
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
computed feature
\end_layout

\end_inset

 is 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
self
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
For lists, what is shown in the 
\begin_inset Quotes eld
\end_inset

default value
\begin_inset Quotes erd
\end_inset

 field is always 
\begin_inset Quotes eld
\end_inset

()
\begin_inset Quotes erd
\end_inset

 meaning 
\begin_inset Quotes eld
\end_inset

the empty list
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
For sets of monads, a string giving the canonical form of an empty set of
 monads is used: 
\begin_inset Quotes eld
\end_inset

 {
\begin_inset space ~
\end_inset

 } 
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
integer
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
integer
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
id_d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
id_d
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
id
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

d
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list of integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list of integer
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
integer
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list of id_d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list of id_d
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
id
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

d
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list of 
\emph on
something else
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list of enumeration
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration
\end_layout

\end_inset

 constants from the enumeration given
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8-bit string
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
string
\end_layout

\end_inset

 of arbitrary length
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ascii
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7-bit (ASCII
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ASCII
\end_layout

\end_inset

) string of arbitrary length
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
set of monads
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
set of monads
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
everything else
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
enumeration
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration
\end_layout

\end_inset

 by the name given
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Possible type names in SELECT FEATURES
\begin_inset CommandInset label
LatexCommand label
name "cap:Possible-type-names"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
A table with the following schema:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
feature_name: string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
type_name: string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
default_value: string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
computed: boolean
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
On failure, this table is empty.
 On success, the table cannot be empty, since every object type has the
 feature 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
self
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
SELECT ENUMERATIONS
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!querying
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
select_enumerations_statement : 
\begin_inset Quotes eld
\end_inset

SELECT
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

ENUMERATIONS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
SELECT ENUMERATIONS
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement returns a table with the names of all the enumerations available
 in the database.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
A table with the following schema: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
enumeration_name: string
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
On failure, this table is empty.
 Note, however, that it can also be empty because there are no enumerations
 in the database yet.
\end_layout

\begin_layout Subsection
SELECT ENUMERATION CONSTANTS
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant!querying
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
select_enumeration_constants_statement : 
\begin_inset Quotes eld
\end_inset

SELECT
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    (
\begin_inset Quotes eld
\end_inset

ENUM
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

ENUMERATION
\begin_inset Quotes erd
\end_inset

)   
\begin_inset Quotes eld
\end_inset

CONSTANTS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

FROM
\begin_inset Quotes erd
\end_inset

    [ (
\begin_inset Quotes eld
\end_inset

ENUM
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

ENUMERATION
\begin_inset Quotes erd
\end_inset

 ) ]
\end_layout

\begin_layout LyX-Code
    enumeration_name
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
enumeration_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
SELECT ENUMERATION CONSTANTS
\end_layout

\begin_layout LyX-Code
FROM ENUMERATION phrase_types
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement returns a table with the 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset

enumeration constants in a given enumeration.
 
\end_layout

\begin_layout Standard
Note that the syntax is made so that the query need not be as verbose as
 in the example just given.
 There is quite a lot of syntactic sugar
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

Syntactic sugar
\begin_inset Quotes erd
\end_inset

 is a term used by computer-scientists for niceties in the grammar of a
 language which help the user in some way, usually so that they do not have
 to type as much as would otherwise be required.
 Here, it simply means that some of the keywords are optional, or have shorthand
 forms.
\end_layout

\end_inset

 in this statement.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
A table with the following schema: 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0cm">
<column alignment="center" valignment="top" width="0cm">
<column alignment="center" valignment="top" width="0cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
enum_constant_name: string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
value : integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
is_default : boolean
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
On failure, this table is empty.
 
\end_layout

\begin_layout Subsection
SELECT OBJECT TYPES USING ENUMERATION
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!object types using
\end_layout

\end_inset

 
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
select_object_types_which_use_enum_statement : 
\begin_inset Quotes eld
\end_inset

SELECT
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
    [ 
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset

 ]    
\begin_inset Quotes eld
\end_inset

TYPES
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

USING
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    (
\begin_inset Quotes eld
\end_inset

ENUM
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

ENUMERATION
\begin_inset Quotes erd
\end_inset

) enumeration_name
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
enumeration_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
SELECT OBJECT TYPES
\end_layout

\begin_layout LyX-Code
USING ENUMERATION phrase_types_t
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement returns a table with the names of the object types which
 use a given enumeration.
 The rows of the table are not ordered.
 An object type uses an enumeration if at least one of its features is of
 the enumeration type.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
A table with the following schema:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object_type_name: string
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
On failure, this table is empty.
 Note, however, that it can also be empty because there are no object types
 using the enumeration.
\end_layout

\begin_layout Section
Object manipulation
\end_layout

\begin_layout Subsection
CREATE OBJECT FROM MONADS
\begin_inset CommandInset label
LatexCommand label
name "CREATE_OBJECT_FROM_MONADS"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
create_object_from_monads_statement : 
\begin_inset Quotes eld
\end_inset

CREATE
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

FROM
\begin_inset Quotes erd
\end_inset

   monad_specification
\end_layout

\begin_layout LyX-Code
    [ with_id_d_specification ]
\end_layout

\begin_layout LyX-Code
    object_creation_specification
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/*
\end_layout

\begin_layout LyX-Code
 * monad-specification
\end_layout

\begin_layout LyX-Code
 */
\end_layout

\begin_layout LyX-Code
monad_specification : 
\begin_inset Quotes eld
\end_inset

MONADS
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

   monad_set
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/*
\end_layout

\begin_layout LyX-Code
 * with-id_d-specification
\end_layout

\begin_layout LyX-Code
 */
\end_layout

\begin_layout LyX-Code
with_id_d_specification : 
\begin_inset Quotes eld
\end_inset

WITH
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

ID_D
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

  id_d_const
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
id_d_const : T_INTEGER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

INTEGER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
  | 
\begin_inset Quotes eld
\end_inset

NIL
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/*
\end_layout

\begin_layout LyX-Code
 * object-creation-specification
\end_layout

\begin_layout LyX-Code
 */
\end_layout

\begin_layout LyX-Code
object_creation_specification : 
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    object_type_name
\end_layout

\begin_layout LyX-Code
    [ list_of_feature_assignments ]
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
object_type_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
list_of_feature_assignments : feature_assignment 
\begin_inset Newline newline
\end_inset

                              { feature_assignment }
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
feature_assignment : feature_name  
\begin_inset Quotes eld
\end_inset

:=
\begin_inset Quotes erd
\end_inset

  expression  
\begin_inset Quotes eld
\end_inset

;
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    | feature_name  
\begin_inset Quotes eld
\end_inset

:=
\begin_inset Quotes erd
\end_inset

  list_expression  
\begin_inset Quotes eld
\end_inset

;
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
feature_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
expression : signed_integer /* integer and id_d */
\end_layout

\begin_layout LyX-Code
  | T_STRING
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

STRING
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
  | T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset

 /* 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset

enumeration constant */
\end_layout

\begin_layout LyX-Code
  | monad_set
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
list_expression : 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Quotes eld
\end_inset

 [list_values] 
\begin_inset Quotes eld
\end_inset

)
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
list_values : list_value { 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

 list_value }
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
list_value : signed_integer
\end_layout

\begin_layout LyX-Code
  | T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset

 /* 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset

enumeration constant */
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
For a description of 
\family typewriter
monad_set
\family default
, please see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "SELECT_OBJECTS"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "SELECT_OBJECTS"

\end_inset

.
 For a description of 
\family typewriter
signed_integer
\family default
, please see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "CREATE_OBJECT_TYPE"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "CREATE_OBJECT_TYPE"

\end_inset

.
 Note, however, that NIL should be used only with features whose type is
 id_d.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
CREATE OBJECT FROM MONADS = { 1-2, 4-7 }
\end_layout

\begin_layout LyX-Code
[Clause
\end_layout

\begin_layout LyX-Code
   clause_type := NC;
\end_layout

\begin_layout LyX-Code
   parent := 10033;
\end_layout

\begin_layout LyX-Code
   descendants := (104546, 104547, 104549);
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout LyX-Code
GO
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

CREATE OBJECTS FROM MONADS = { 35-37 }
\end_layout

\begin_layout LyX-Code
WITH ID_D = 104546
\end_layout

\begin_layout LyX-Code
[Phrase
\end_layout

\begin_layout LyX-Code
   phrase_type := NP;
\end_layout

\begin_layout LyX-Code
   parents := (104212, 104215, 104219);
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement creates a new object from a specified set of monads.
\end_layout

\begin_layout Standard
In creating an object, four items of information are necessary:
\end_layout

\begin_layout Enumerate
The new id_d,
\end_layout

\begin_layout Enumerate
The object type,
\end_layout

\begin_layout Enumerate
The set of monads, 
\end_layout

\begin_layout Enumerate
Any features that need non-default values.
\end_layout

\begin_layout Standard
This statement creates an object of type 
\begin_inset Quotes eld
\end_inset


\family typewriter
object_type_name
\family default

\begin_inset Quotes erd
\end_inset

 using the monads and features, and optional id_d, given.
 All features not specified will be given default values.
\end_layout

\begin_layout Standard
If you specify an id_d with the 
\begin_inset Quotes eld
\end_inset

WITH ID_D
\begin_inset Quotes erd
\end_inset

 specification, the system first checks whether that object id_d is already
 in use.
 If it is, the creation fails.
 If it is not, that id_d is used.
 If you do not specify an id_d, a unique id_d is auto-generated.
\end_layout

\begin_layout Standard
Note that when using WITH ID_D, it is not recommended to run several concurrent
 processes against the same database which issue CREATE OBJECT or CREATE
 OBJECTS statements.
 Doing so may cause the auto-generated object id_d sequence to become invalid.
 However, several concurrent processes may safely issue CREATE OBJECT(S)
 statements if none of them use WITH ID_D.
 
\end_layout

\begin_layout Standard
Note that objects of the special object types all_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
all
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

, any_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
any
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

, and pow_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pow
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

 cannot be created.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
A table with the following schema:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object_id_d: id_d
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
On success, there is always only one row in the table, namely the row containing
 the object id_d of the newly created object.
\end_layout

\begin_layout Standard
On failure, the table is empty.
\end_layout

\begin_layout Subsection
CREATE OBJECT FROM ID_DS
\begin_inset CommandInset label
LatexCommand label
name "CREATE_OBEJCT_FROM_ID_DS"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
create_object_from_id_ds_statement : 
\begin_inset Quotes eld
\end_inset

CREATE
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

FROM
\begin_inset Quotes erd
\end_inset

   id_ds_specification
\end_layout

\begin_layout LyX-Code
    [ with_id_d_specification ]
\end_layout

\begin_layout LyX-Code
    object_creation_specification
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/*
\end_layout

\begin_layout LyX-Code
 * id_ds-specification
\end_layout

\begin_layout LyX-Code
 */
\end_layout

\begin_layout LyX-Code
id_ds_specification : (
\begin_inset Quotes eld
\end_inset

ID_D
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

ID_DS
\begin_inset Quotes erd
\end_inset

) 
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

   id_d_list
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
id_d_list : id_d   { 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

  id_d }
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
id_d : id_d_const
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
id_d_const : T_INTEGER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

INTEGER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
  | 
\begin_inset Quotes eld
\end_inset

NIL
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
For the non-terminals 
\family typewriter
with_id_d_specification
\family default
 and 
\family typewriter
object_creation_specification
\family default
, please see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "CREATE_OBJECT_FROM_MONADS"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "CREATE_OBJECT_FROM_MONADS"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
CREATE OBJECT FROM ID_DS = 10028, 10029
\end_layout

\begin_layout LyX-Code
[Clause
\end_layout

\begin_layout LyX-Code
   clause_type := NC;
\end_layout

\begin_layout LyX-Code
   parent := 10033;
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement creates a new object with the monads contained in the objects
 specified by their id_ds.
\end_layout

\begin_layout Standard
The id_ds specified are used only to calculate the set of monads to be used.
 This is calculated as the union of the set of monads of the objects with
 the id_ds specified.
 These id_ds can point to objects of any type, and it need not be the same
 type for all id_ds.
\end_layout

\begin_layout Standard
Note that there is a syntactic sugar-choice of whether to say 
\begin_inset Quotes eld
\end_inset

ID_DS
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

ID_D
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
Note that objects of the special object types all_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
all
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

, any_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
any
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

, and pow_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pow
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

 cannot be created.
\end_layout

\begin_layout Standard
See the 
\begin_inset Quotes eld
\end_inset

CREATE OBJECT FROM MONADS
\begin_inset Quotes erd
\end_inset

 (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "CREATE_OBJECT_FROM_MONADS"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "CREATE_OBJECT_FROM_MONADS"

\end_inset

) for further explanation and warnings.
 Especially about concurrent use of WITH ID_D.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
The return type is the same as for CREATE OBJECT FROM MONADS (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "CREATE_OBJECT_FROM_MONADS"

\end_inset

).
 
\end_layout

\begin_layout Subsection
CREATE OBJECTS WITH OBJECT TYPE
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
create_objects_statement : 
\begin_inset Quotes eld
\end_inset

CREATE
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

OBJECTS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
                           
\begin_inset Quotes eld
\end_inset

WITH
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

TYPE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
                           
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

  object_type_name  
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
                           object_creation_list 
\end_layout

\begin_layout LyX-Code
;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

object_creation_list : object_creation { object_creation }
\end_layout

\begin_layout LyX-Code
;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

object_creation : 
\begin_inset Quotes eld
\end_inset

CREATE
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
                  
\begin_inset Quotes eld
\end_inset

FROM
\begin_inset Quotes erd
\end_inset

  monad_specification
\end_layout

\begin_layout LyX-Code
                  [ with_id_d_specification ]
\end_layout

\begin_layout LyX-Code
                  
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
                  [ list_of_feature_assignments ] 
\end_layout

\begin_layout LyX-Code
                  
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
; 
\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
Please see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "CREATE_OBJECT_FROM_MONADS"

\end_inset

 for the following non-terminals
\family typewriter
:
\end_layout

\begin_layout Itemize

\family typewriter
monad_specification
\family default
, 
\end_layout

\begin_layout Itemize

\family typewriter
with_id_d_specification
\family default
,
\end_layout

\begin_layout Itemize

\family typewriter
list_of_feature_assignments
\family default
.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
CREATE OBJECTS
\end_layout

\begin_layout LyX-Code
WITH OBJECT TYPE [Phrase]
\end_layout

\begin_layout LyX-Code
CREATE OBJECT
\end_layout

\begin_layout LyX-Code
FROM MONADS = { 1-2 }
\end_layout

\begin_layout LyX-Code
[ 
\end_layout

\begin_layout LyX-Code
  phrase_type := NP; 
\end_layout

\begin_layout LyX-Code
  function := Subj;
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout LyX-Code
CREATE OBJECT
\end_layout

\begin_layout LyX-Code
FROM MONADS = { 3-7 }
\end_layout

\begin_layout LyX-Code
[
\end_layout

\begin_layout LyX-Code
  // Use default values for phrase_type and function
\end_layout

\begin_layout LyX-Code
  // (probably VP/Pred in this fictive example)
\end_layout

\begin_layout LyX-Code
] 
\end_layout

\begin_layout LyX-Code
CREATE OBJECT
\end_layout

\begin_layout LyX-Code
FROM MONADS = { 4-7 }
\end_layout

\begin_layout LyX-Code
WITH ID_D = 1000000 // Assign specific ID_D
\end_layout

\begin_layout LyX-Code
[
\end_layout

\begin_layout LyX-Code
  phrase_type := NP;
\end_layout

\begin_layout LyX-Code
  function := Objc;
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement is for batch importing of objects.
 It is useful when populating databases, either from scratch or by adding
 large numbers of objects to an existing database.
 This statement is much faster than individual CREATE OBJECT statements.
\end_layout

\begin_layout Standard
The object type is specified only once, at the top.
 Note that no features can be assigned where the object type is specified:
 That comes later in the query, when each object is created.
\end_layout

\begin_layout Standard
Each object to be created must be given a monad set.
 The monad set follows the syntax specified in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "SELECT_OBJECTS"

\end_inset

.
\end_layout

\begin_layout Standard
Optionally, an id_d can be specified.
 If an id_d is specified, it is the user's responsibility to ensure that
 the id_d assigned does not clash with another id_d in the database.
 This is mainly useful when dumping/restoring databases.
\end_layout

\begin_layout Standard
If no id_d is specified, a unique id_d is generated.
 This id_d is only guaranteed to be unique if no other objects are created
 with specific id_ds.
\end_layout

\begin_layout Standard
Note that when using WITH ID_D, it is not recommended to run several concurrent
 processes against the same database which issue CREATE OBJECT or CREATE
 OBJECTS statements.
 Doing so may cause the auto-generated object id_d sequence to become invalid.
 However, several concurrent processes may safely issue CREATE OBJECT(S)
 statements if none of them use WITH ID_D.
\end_layout

\begin_layout Standard
The feature-value assignments follow the same rules as for CREATE OBJECT
 FROM MONADS (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "CREATE_OBJECT_FROM_MONADS"

\end_inset

).
 If an object has a feature which is not assigned a value, the default value
 is used.
 The default value of a given feature can be specified when creating the
 object type, or when updating the object type (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "CREATE_OBJECT_TYPE"

\end_inset

 and section 
\begin_inset CommandInset ref
LatexCommand vref
reference "UPDATE_OBJECT_TYPE"

\end_inset

).
\end_layout

\begin_layout Standard
A table is returned showing the number of objects created successfully.
 This number is valid even if the process failed half way through.
 In other words, if the process did not run to completion due to a DB error,
 the value in the return type will show how many objects, if any, were created
 successfully.
 This means that there is no way of knowing which object got which object
 id_d, a difference from the regular CREATE OBJECT statement.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
A table with the following schema:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object_count: integer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
On both success and failure, the table contains one row showing the number
 of objects created successfully.
\end_layout

\begin_layout Subsection
UPDATE OBJECTS BY MONADS
\begin_inset CommandInset label
LatexCommand label
name "UPDATE_OBJECTS_BY_MONADS"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
update_objects_by_monads_statement : 
\begin_inset Quotes eld
\end_inset

UPDATE
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
    (
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

OBJECTS
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

BY
\begin_inset Quotes erd
\end_inset

   monad_specification 
\end_layout

\begin_layout LyX-Code
    object_update_specification
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/*
\end_layout

\begin_layout LyX-Code
 * object-update-specification
\end_layout

\begin_layout LyX-Code
 */
\end_layout

\begin_layout LyX-Code
object_update_specification : 
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes eld
\end_inset

   object_type_name 
\end_layout

\begin_layout LyX-Code
    list_of_feature_assignments
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
object_type_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
For the non-terminals 
\family typewriter
monad_specification
\family default
 and 
\family typewriter
list_of_feature_assignments
\family default
, please see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "CREATE_OBJECT_FROM_MONADS"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
UPDATE OBJECTS BY MONADS = { 1-2, 4-7, 8-20 }
\end_layout

\begin_layout LyX-Code
[Clause
\end_layout

\begin_layout LyX-Code
    clause_type := VC;
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement finds all the objects of type 
\family typewriter
object_type_name
\family default
 which are part_of
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
part
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

of
\end_layout

\end_inset

 the monads specified (i.e., they must be wholly contained within the monads
 specified), and updates their features according to the list of feature
 assignments.
\end_layout

\begin_layout Standard
Note that there is a syntactic sugar-choice of whether to say 
\begin_inset Quotes eld
\end_inset

OBJECTS
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset

.
 This is because the user may know that only one object is to be found within
 the monads, in which case having to write 
\begin_inset Quotes eld
\end_inset

OBJECTS
\begin_inset Quotes erd
\end_inset

 would be intellectually irritating.
\end_layout

\begin_layout Standard
Note that objects of the special object types all_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
all
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

, any_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
any
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

, and pow_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pow
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

 cannot be updated.
\end_layout

\begin_layout Standard
The feature 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
self
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 cannot be updated.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
A table with the following schema:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object_id_d: id_d
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
On success, the table contains one row for each updated object.
\end_layout

\begin_layout Standard
On failure, the table is empty.
\end_layout

\begin_layout Subsection
UPDATE OBJECTS BY ID_DS
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
update_objects_by_id_ds_statement : 
\begin_inset Quotes eld
\end_inset

UPDATE
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
    (
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

OBJECTS
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

BY
\begin_inset Quotes erd
\end_inset

   id_ds_specification 
\end_layout

\begin_layout LyX-Code
    object_update_specification
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
For a description of 
\family typewriter
id_ds_specification
\family default
, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "CREATE_OBEJCT_FROM_ID_DS"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "CREATE_OBEJCT_FROM_ID_DS"

\end_inset

.
 
\end_layout

\begin_layout Standard
For a description of 
\family typewriter
object_update_specification
\family default
, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "UPDATE_OBJECTS_BY_MONADS"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "UPDATE_OBJECTS_BY_MONADS"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
UPDATE OBJECTS BY ID_DS = 10028, 10029
\end_layout

\begin_layout LyX-Code
[Phrase
\end_layout

\begin_layout LyX-Code
    parent := 10034;
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement updates all the objects of the given type with the given
 id_ds.
\end_layout

\begin_layout Standard
The id_ds should point to objects which are really of the given type.
 Otherwise, an error is issued.
\end_layout

\begin_layout Standard
Note that there is a syntactic sugar-choice between 
\begin_inset Quotes eld
\end_inset

OBJECTS
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

OBJECT.
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Standard
Note that objects of the special object types all_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
all
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

, any_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
any
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

, and pow_m
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pow
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

m
\end_layout

\end_inset

 cannot be updated.
\end_layout

\begin_layout Standard
The feature 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
self
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 cannot be updated.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
The return type is the same as for UPDATE OBJECTS BY MONADS (section 
\begin_inset CommandInset ref
LatexCommand vref
reference "UPDATE_OBJECTS_BY_MONADS"

\end_inset

).
\end_layout

\begin_layout Subsection
DELETE OBJECTS BY MONADS
\begin_inset CommandInset label
LatexCommand label
name "DELETE_OBJECTS_WITH_MONADS"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
delete_objects_by_monads_statement : 
\begin_inset Quotes eld
\end_inset

DELETE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    (
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

OBJECTS
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

BY
\begin_inset Quotes erd
\end_inset

   monad_specification
\end_layout

\begin_layout LyX-Code
    object_deletion_specification
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/*
\end_layout

\begin_layout LyX-Code
 * object-deletion-specification
\end_layout

\begin_layout LyX-Code
 */
\end_layout

\begin_layout LyX-Code
object_deletion_specification : 
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    object_type_name_to_delete
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
object_type_name_to_delete : object_type_name 
\end_layout

\begin_layout LyX-Code
  | 
\begin_inset Quotes eld
\end_inset

ALL
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
object_type_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
For a description of 
\family typewriter
monad_specification
\family default
, see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "CREATE_OBJECT_FROM_MONADS"

\end_inset

.
 
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
DELETE OBJECTS BY MONADS = { 1-20 }
\end_layout

\begin_layout LyX-Code
[Clause]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Standard
If 
\begin_inset Quotes eld
\end_inset


\family typewriter
object_name_to_delete
\family default

\begin_inset Quotes erd
\end_inset

 is 
\begin_inset Quotes eld
\end_inset

ALL
\begin_inset Quotes erd
\end_inset

, then all objects of all types which are at these monads are deleted:
\end_layout

\begin_layout LyX-Code
DELETE OBJECTS BY MONADS = { 28901-52650 }
\end_layout

\begin_layout LyX-Code
[ALL]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This command deletes all the objects of type 
\family typewriter
object_type_name
\family default
 which are part_of
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
part
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

of
\end_layout

\end_inset

 the set of monads specified.
 
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
A table with the following schema:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object_id_d: id_d
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
On success, the table contains one row for each deleted object.
\end_layout

\begin_layout Standard
On failure, the table is empty.
\end_layout

\begin_layout Subsection
DELETE OBJECTS BY ID_DS
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
delete_objects_by_id_ds_statement : 
\begin_inset Quotes eld
\end_inset

DELETE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    (
\begin_inset Quotes eld
\end_inset

OBJECT
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

OBJECTS
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

BY
\begin_inset Quotes erd
\end_inset

   id_ds_specification
\end_layout

\begin_layout LyX-Code
    object_deletion_specification
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
For a description of 
\family typewriter
id_ds_specification
\family default
, please see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "CREATE_OBEJCT_FROM_ID_DS"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "CREATE_OBEJCT_FROM_ID_DS"

\end_inset

.
 
\end_layout

\begin_layout Standard
For a description of 
\family typewriter
object_deletion_specification
\family default
, please see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "DELETE_OBJECTS_WITH_MONADS"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "DELETE_OBJECTS_WITH_MONADS"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
DELETE OBJECTS BY ID_DS 10028, 10029
\end_layout

\begin_layout LyX-Code
[Phrase]
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement deletes objects by their specific id_ds.
 The id_ds given should point to objects of the type given.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
The return type is the same as for DELETE OBJECTS BY MONADS (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "DELETE_OBJECTS_WITH_MONADS"

\end_inset

).
\end_layout

\begin_layout Section
Monad manipulation
\end_layout

\begin_layout Subsection
MONAD SET CALCULATION
\begin_inset CommandInset label
LatexCommand label
name "MONAD-SET-CALCULATION"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
monad_set_calculation_statement : 
\begin_inset Quotes eld
\end_inset

MONAD
\begin_inset Quotes erd
\end_inset

  
\begin_inset Quotes eld
\end_inset

SET
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    
\begin_inset Quotes eld
\end_inset

CALCULATION
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
    monad_set_chain
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
monad_set_chain : monad_set 
\begin_inset Newline newline
\end_inset

                  { monad_set_operator  monad_set }
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
monad_set_operator : 
\begin_inset Quotes eld
\end_inset

UNION
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
  | 
\begin_inset Quotes eld
\end_inset

DIFFERENCE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
  | 
\begin_inset Quotes eld
\end_inset

INTERSECT
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
For a description of 
\family typewriter
monad_set
\family default
, please see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "SELECT_OBJECTS"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "SELECT_OBJECTS"

\end_inset

.
 
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
// Produces { 1-10 }
\end_layout

\begin_layout LyX-Code
MONAD SET CALCULATION
\end_layout

\begin_layout LyX-Code
{ 1-5, 7-8 }
\end_layout

\begin_layout LyX-Code
UNION
\end_layout

\begin_layout LyX-Code
{ 5-10 }
\end_layout

\begin_layout LyX-Code
GO
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

// Produces { 2-5, 22-24 }
\end_layout

\begin_layout LyX-Code
MONAD SET CALCULATION
\end_layout

\begin_layout LyX-Code
{ 1-10, 20-30, 50-60 }
\end_layout

\begin_layout LyX-Code
INTERSECT
\end_layout

\begin_layout LyX-Code
{ 2-5, 22-24 }
\end_layout

\begin_layout LyX-Code
GO
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

// Produces { 1-4, 8-10 }
\end_layout

\begin_layout LyX-Code
MONAD SET CALCULATION
\end_layout

\begin_layout LyX-Code
{ 1-10 }
\end_layout

\begin_layout LyX-Code
DIFFERENCE
\end_layout

\begin_layout LyX-Code
{ 5-7 }
\end_layout

\begin_layout LyX-Code
GO
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

// Produces { 2-3, 5-6, 10-12 }
\end_layout

\begin_layout LyX-Code
MONAD SET CALCULATION
\end_layout

\begin_layout LyX-Code
{ 1-3, 5-9 }
\end_layout

\begin_layout LyX-Code
INTERSECT
\end_layout

\begin_layout LyX-Code
{ 2-6 }
\end_layout

\begin_layout LyX-Code
UNION
\end_layout

\begin_layout LyX-Code
{ 10-12 }
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement is for performing set-operations on sets of monads.
 The three standard set operations 
\begin_inset Quotes eld
\end_inset

union,
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

intersect,
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

difference
\begin_inset Quotes erd
\end_inset

 are provided.
\end_layout

\begin_layout Standard
The return value is a representation of the resulting set of monads along
 the same lines as for the GET MONADS statement (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "Section:GET MONADS"

\end_inset

).
\end_layout

\begin_layout Standard
The MSEs (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "Section:GET MONADS"

\end_inset

) are listed in ascending order.
\end_layout

\begin_layout Standard
You can specify as many sets of monads as you want.
 The operations are done in succession from the first to the last set of
 monads.
 For example, in the last example above, the intersection is done first,
 and the union is done on the result of the intersection.
\end_layout

\begin_layout Standard
You can also specify only one set of monads, with no set operator.
 This is useful for creating a sorted, normalized set of monads from a number
 of different MSEs.
\end_layout

\begin_layout Standard
Note that this statement does not manipulate the stored arbitrary monad
 sets described in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Arbitrary-monad-sets"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
A table with the following schema:
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mse_first : monad_m
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mse_last : monad_m
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
CREATE MONAD SET
\begin_inset CommandInset label
LatexCommand label
name "CREATE-MONAD-SET"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
create_monad_set_statement : 
\begin_inset Quotes eld
\end_inset

CREATE
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MONAD
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

SET
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
            monad_set_name
\end_layout

\begin_layout LyX-Code
            
\begin_inset Quotes eld
\end_inset

WITH
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MONADS
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

 monad_set
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
monad_set_name : T_IDENTIFIER
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
For the 
\family typewriter
monad_set
\family default
 non-terminal, please see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "SELECT_OBJECTS"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
CREATE MONAD SET
\end_layout

\begin_layout LyX-Code
My_research_collection
\end_layout

\begin_layout LyX-Code
WITH MONADS = { 1-10394, 14524-29342, 309240-311925 }
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement creates an arbitrary monad set in the database.
 These monad sets are the ones described in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Arbitrary-monad-sets"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
There is no return value.
\end_layout

\begin_layout Subsection
UPDATE MONAD SET
\begin_inset CommandInset label
LatexCommand label
name "UPDATE-MONAD-SET"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
update_monad_set_statement : 
\begin_inset Quotes eld
\end_inset

UPDATE
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MONAD
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

SET
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
     monad_set_name
\end_layout

\begin_layout LyX-Code
     (
\begin_inset Quotes eld
\end_inset

UNION
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

INTERSECT
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

DIFFERENCE
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

REPLACE
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
     (monad_set | monad_set_name)
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
monad_set_name : T_IDENTIFIER
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
For the monad_set non-terminal, please see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "SELECT_OBJECTS"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Examples
\end_layout

\begin_layout LyX-Code
// Adds the specified monad set to 
\begin_inset Quotes eld
\end_inset

Historical_books
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
UPDATE MONAD SET
\end_layout

\begin_layout LyX-Code
Historical_books
\end_layout

\begin_layout LyX-Code
UNION
\end_layout

\begin_layout LyX-Code
{ 310320-329457 }
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
// Remove the specified monad set from 
\begin_inset Quotes eld
\end_inset

Historical_books
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
UPDATE MONAD SET
\end_layout

\begin_layout LyX-Code
Historical_books
\end_layout

\begin_layout LyX-Code
DIFFERENCE
\end_layout

\begin_layout LyX-Code
{ 310320-329457 }
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
// Intersects the monad set 
\begin_inset Quotes eld
\end_inset

My_research_collection
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
// with the monad set 
\begin_inset Quotes eld
\end_inset

My_experimental_collection
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
UPDATE MONAD SET
\end_layout

\begin_layout LyX-Code
My_research_collection
\end_layout

\begin_layout LyX-Code
INTERSECT
\end_layout

\begin_layout LyX-Code
My_experimental_collection
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
// Replaces the monad set 
\begin_inset Quotes eld
\end_inset

Lamentations
\begin_inset Quotes erd
\end_inset

 with 
\end_layout

\begin_layout LyX-Code
// the specified monad set
\end_layout

\begin_layout LyX-Code
UPDATE MONAD SET
\end_layout

\begin_layout LyX-Code
Lamentations
\end_layout

\begin_layout LyX-Code
REPLACE
\end_layout

\begin_layout LyX-Code
{ 380300-383840 }
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement is used to update an already-existing arbitrary monad set
 (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Arbitrary-monad-sets"

\end_inset

).
 Four operations are provided: set union, set intersection, set difference,
 and replacement.
 In all cases, the operation is done using two monad sets.
 The first set is the named set that is updated.
 The second set is either a set described in terms of monads, or the name
 of another arbitrary monad set.
\end_layout

\begin_layout Standard
The replacement operator effectively deletes the old set, replacing it with
 the new.
 Note, however, that this does not imply that the new is deleted â€“ if you
 update one named monad set, replacing it with another named monad set,
 that other monad set is not deleted, but simply copied into the old monad
 set.
\end_layout

\begin_layout Standard
The other three operators are standard set-theoretic operators.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
There is no return value.
\end_layout

\begin_layout Subsection
DROP MONAD SET
\begin_inset CommandInset label
LatexCommand label
name "DROP-MONAD-SET"

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
drop_monad_set_statement : 
\begin_inset Quotes eld
\end_inset

DROP
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

MONAD
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

SET
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
                           monad_set_name
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
monad_set_name : T_IDENTIFIER
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
DROP MONAD SET Historical_books
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This statement drops an arbitrary monad set (i.e., deletes it) from the database.
 These are the arbitrary monad sets described in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Arbitrary-monad-sets"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
There is no return value.
\end_layout

\begin_layout Section
Meta-statements
\end_layout

\begin_layout Subsection
QUIT
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
QUIT|bold
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
quit_statement : 
\begin_inset Quotes eld
\end_inset

QUIT
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout LyX-Code
QUIT
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
This causes the rest of the MQL stream not to be interpreted.
 It also causes the mql(1) program
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mql(1) program
\end_layout

\end_inset

 to quit after having executed this statement.
\end_layout

\begin_layout Standard
The QUIT statement can be used, e.g., if running the mql(1) program
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mql(1) program
\end_layout

\end_inset

 as a daemon through xinetd(8) or inetd(8), to end the connection.
\end_layout

\begin_layout Standard
The QUIT statement is special in that it does not need a 
\begin_inset Quotes eld
\end_inset

GO
\begin_inset Quotes erd
\end_inset

 keyword after it.
 You may supply the 
\begin_inset Quotes eld
\end_inset

GO
\begin_inset Quotes erd
\end_inset

 keyword if you wish, but it is not required.
\end_layout

\begin_layout Standard
If a transaction was in progress (see BEGIN TRANSACTION statement, section
 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:BEGIN-TRANSACTION"

\end_inset

), the transaction is automatically committed before the QUIT statement
 is executed.
\end_layout

\begin_layout Subsubsection
Return type
\end_layout

\begin_layout Standard
There is no return value.
\end_layout

\begin_layout Chapter
MQL Query subset
\begin_inset CommandInset label
LatexCommand label
name "chapter:MQL Query Subset"

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This chapter is an introduction to the query-subset of MQL for programmers.
 That is, it introduces the important subset of MQL in which you can express
 queries that find objects and gaps in interesting environments, with specified
 interrelations, and with specified feature-values.
\end_layout

\begin_layout Standard
An easier-to-read MQL Query Guide is available from the Emdros website,
 or with the Emdros sourcecode in the doc/ directory (see 
\begin_inset CommandInset citation
LatexCommand cite
key "MQL-Query-Guide"
literal "true"

\end_inset

).
\end_layout

\begin_layout Standard
First, we give an informal introduction to MQL by means of some examples
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Informal-introduction-to"

\end_inset

).
 Then we give a complete overview of the syntax of the MQL query-subset
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "mql_query:Syntax"

\end_inset

).
 Then we explain the sheaf, which is the data-structure that an MQL query-query
 returns (
\begin_inset CommandInset ref
LatexCommand ref
reference "sheaf"

\end_inset

).
 Then we explain what a Universe and a Substrate are, since they are important
 in understanding how a query works (
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Universe-and-substrate"

\end_inset

).
 After that, we explain two important properties of mql queries, namely
 consecutiveness and embedding (
\begin_inset CommandInset ref
LatexCommand ref
reference "mql-query:Consecutiveness-and-embedding"

\end_inset

).
 After that, we give detailed explanations of the blocks of the MQL query-subset
, which are the 
\begin_inset Quotes eld
\end_inset

building blocks
\begin_inset Quotes erd
\end_inset

 out of which a query is made (
\begin_inset CommandInset ref
LatexCommand ref
reference "Blocks"

\end_inset

).
 Finally, we explain how strings of blocks are written, and what they mean
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Strings-of-blocks"

\end_inset

).
\end_layout

\begin_layout Section
Informal introduction to MQL by means of some examples
\begin_inset CommandInset label
LatexCommand label
name "sec:Informal-introduction-to"

\end_inset


\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
This section informally introduces the query-part of MQL by way of a number
 of examples.
 The example database which we will use is the same as in Doedens
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Doedens, Crist-Jan
\end_layout

\end_inset

' book, namely part of Melville's 
\begin_inset Quotes eld
\end_inset

Moby Dick
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

CALL me Ishmael.
 Some years ago - never mind how long precisely - having little or no money
 in my purse, and nothing particular to interest me on shore, I thought
 I would sail about a little and see the watery part of the world.
 It is a way I have of driving off the spleen, and regulating the circulation.
 Whenever I find myself growing grim about the mouth; whenever it is damp,
 drizzly November in my soul; whenever I find myself involuntarily pausing
 before coffin warehouses, and bringing up the rear of every funeral I meet;
 and especially whenever my hypos get such an upper hand of me, that it
 requires a strong moral principle to prevent me from deliberately stepping
 into the street, and methodically knocking people's hats off - then, I
 account it high time to get to sea as soon as I can.
 [...]
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

[...] By reason of these things, then, the whaling voyage was welcome; the
 great flood-gates of the wonder-world swung open, and in the wild conceits
 that swayed me to my purpose, two and two there floated into my inmost
 soul, endless processions of the whale, and, mid most of them all, one
 grand hoofed phantom, like a snow hill in the air.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Suppose that we have in this EMdF database the domain-dependent object types
 
\begin_inset Quotes eld
\end_inset

paragraph
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

sentence
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

word
\begin_inset Quotes erd
\end_inset

, which correspond to paragraphs, sentences, and words of the text.
 And suppose that we add to the object type 
\begin_inset Quotes eld
\end_inset

sentence
\begin_inset Quotes erd
\end_inset

 the feature 
\begin_inset Quotes eld
\end_inset

mood,
\begin_inset Quotes erd
\end_inset

 which draws its values from the enumeration type { imperative, declarative
 }.
 And suppose that we add to the object type 
\begin_inset Quotes eld
\end_inset

word
\begin_inset Quotes erd
\end_inset

 the features 
\begin_inset Quotes eld
\end_inset

surface
\begin_inset Quotes erd
\end_inset

 (which gives the surface text of the word) and 
\begin_inset Quotes eld
\end_inset

part_of_speech
\begin_inset Quotes erd
\end_inset

 (which gives the part of speech of the word).
 The codomain of the feature 
\begin_inset Quotes eld
\end_inset

part_of_speech
\begin_inset Quotes erd
\end_inset

 on the object type 
\begin_inset Quotes eld
\end_inset

word
\begin_inset Quotes erd
\end_inset

 draws its values from the enumeration type { adjective, adverb, conjunction,
 determiner, noun, numeral, particle, preposition, pronoun, verb }.
 This hypothetical database will give the background for most of the examples
 in our informal introduction to MQL.
\end_layout

\begin_layout Standard
In the following, when we refer to an 
\begin_inset Quotes eld
\end_inset

MQL query
\begin_inset Quotes erd
\end_inset

, we will mean the query-subset of MQL.
 That is, we abstract away from the database-manipulation-part of MQL and
 concentrate on the query-queries.
 In addition, we will abstract away from the required 
\begin_inset Quotes eld
\end_inset

SELECT (FOCUS|ALL) OBJECTS
\begin_inset Quotes erd
\end_inset

 syntax that must precede an MQL query-query.
\end_layout

\begin_layout Subsection
topograph
\end_layout

\begin_layout Standard
An MQL query is called a topograph.
 Consider the following topograph:
\end_layout

\begin_layout LyX-Code
[sentence]
\end_layout

\begin_layout Standard
This topograph retrieves a list of all sentence objects in the database.
 
\end_layout

\begin_layout Subsection
features
\end_layout

\begin_layout Standard
A query can specify which features an object must have for it to be retrieved.
 For example, consider the following topograph:
\end_layout

\begin_layout LyX-Code
[word
\end_layout

\begin_layout LyX-Code
   surface = "Ishmael" or part_of_speech = verb;
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout Standard
This topograph retrieves a list of all words which either have the surface
 
\begin_inset Quotes eld
\end_inset

Ishmael
\begin_inset Quotes erd
\end_inset

, or whose part of speech is 
\begin_inset Quotes eld
\end_inset

verb.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsection
object_block, object_block_first
\end_layout

\begin_layout Standard
There are several types of blocks.
 They are meant to come in a string of blocks, where each block in the string
 must match some part of the database in order for the whole string to match.
 Two such blocks are the 
\family typewriter
object_block
\family default
 and the 
\family typewriter
object_block_first
\family default
.
\end_layout

\begin_layout Standard
Object blocks are the heart and soul of MQL queries.
 They are used to match objects and objects nested in other objects.
 An object block (be it an 
\family typewriter
object_block
\family default
 or an 
\family typewriter
object_block_first
\family default
) consists of the following parts:
\end_layout

\begin_layout Enumerate
The opening square bracket, `
\family typewriter
[
\family default
'.
\end_layout

\begin_layout Enumerate
An identifier indicating the object type of the objects which we wish to
 match (e.g., 
\begin_inset Quotes eld
\end_inset

phrase
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Enumerate
An optional T_MARKS
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

MARKS
\end_layout

\end_inset

 (e.g., 
\begin_inset Quotes eld
\end_inset

`yellow
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

`red`context
\begin_inset Quotes erd
\end_inset

).
 This will be put into the result set (i.e., sheaf) unchanged, and can be
 used to pass information back into the application from the user.
 The meaning of the T_MARKS is wholly application-dependent, since Emdros
 does nothing special with it â€” it just passes the T_MARKS on into the sheaf.
 See page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "T_MARKS-definition"

\end_inset

 for the formal definition of T_MARKS.
\end_layout

\begin_layout Enumerate
An optional 
\begin_inset Quotes eld
\end_inset

object reference declaration.
\begin_inset Quotes erd
\end_inset

 A reference to this object can be declared with the 
\begin_inset Quotes eld
\end_inset


\family typewriter
as
\family default

\begin_inset Quotes erd
\end_inset

 keyword, like 
\begin_inset Quotes eld
\end_inset


\family typewriter
[word as w
\family default
 
\begin_inset Formula $\ldots$
\end_inset


\begin_inset Quotes erd
\end_inset

.
 Subsequent blocks can then refer to features of this object as 
\begin_inset Quotes eld
\end_inset


\family typewriter
w
\family default
.
\emph on
featurename
\emph default

\begin_inset Quotes erd
\end_inset

 (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "Object references"

\end_inset

).
\end_layout

\begin_layout Enumerate
An optional keyword which can be either of 
\begin_inset Quotes eld
\end_inset


\family typewriter
noretrieve
\family default

\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset


\family typewriter
retrieve
\family default

\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset


\family typewriter
focus
\family default

\begin_inset Quotes erd
\end_inset

.
 The default, when it is not specified, is 
\begin_inset Quotes eld
\end_inset


\family typewriter
retrieve
\family default

\begin_inset Quotes erd
\end_inset

.
 The keyword 
\begin_inset Quotes eld
\end_inset


\family typewriter
noretrieve
\family default

\begin_inset Quotes erd
\end_inset

 says as much as 
\begin_inset Quotes eld
\end_inset

I do not wish to retrieve this object, even if matched
\begin_inset Quotes erd
\end_inset

.
 It is useful for specifying the context of what we really wish to retrieve.
 The keyword 
\begin_inset Quotes eld
\end_inset


\family typewriter
focus
\family default

\begin_inset Quotes erd
\end_inset

 specifies that this object is to be retrieved (it implies 
\begin_inset Quotes eld
\end_inset


\family typewriter
retrieve
\family default

\begin_inset Quotes erd
\end_inset

), and also that, when sifting the sheaf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sheaf
\end_layout

\end_inset

 for focus objects, this object must go into the result (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "Retrieval"

\end_inset

).
\end_layout

\begin_layout Enumerate
An optional keyword, 
\begin_inset Quotes eld
\end_inset


\family typewriter
first
\family default

\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset


\family typewriter
last
\family default

\begin_inset Quotes erd
\end_inset

, which says as much as 
\begin_inset Quotes eld
\end_inset

this object must be first/last in the universe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
universe
\end_layout

\end_inset

 against which we are matching (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "First and last"

\end_inset

).
\end_layout

\begin_layout Enumerate
An optional Boolean expression giving what features need to hold true for
 this object for it to be retrieved (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "Feature specifications"

\end_inset

).
 This boolean expression must be prefixed by one of the words 
\begin_inset Quotes eld
\end_inset


\family typewriter
feature
\family default

\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset


\family typewriter
features
\family default

\begin_inset Quotes erd
\end_inset

.
 It makes no difference which is used â€“ it is merely syntactic sugar.
\end_layout

\begin_layout Enumerate
An optional inner 
\family typewriter
blocks
\family default
 which matches objects inside the object (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "Block strings: blocks"

\end_inset

).
\end_layout

\begin_layout Enumerate
The closing square bracket, `
\family typewriter
]
\family default
'.
\end_layout

\begin_layout Standard
Note that only the first object block in a string of blocks can have the
 
\begin_inset Quotes eld
\end_inset


\family typewriter
first
\family default

\begin_inset Quotes erd
\end_inset

 keyword, and only the last 
\family typewriter
object_block
\family default
 in a string of 
\family typewriter
block
\family default
s can have the 
\begin_inset Quotes eld
\end_inset


\family typewriter
last
\family default

\begin_inset Quotes erd
\end_inset

 keyword.
 
\end_layout

\begin_layout Standard
Consider the following 
\family typewriter
topograph
\family default
:
\end_layout

\begin_layout LyX-Code
[sentence`yellow
\end_layout

\begin_layout LyX-Code
    mood = imperative;
\end_layout

\begin_layout LyX-Code
    [word noretrieve first
\end_layout

\begin_layout LyX-Code
         surface = "CALL";
\end_layout

\begin_layout LyX-Code
    ]
\end_layout

\begin_layout LyX-Code
    [word`red]
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout Standard
This 
\family typewriter
topograph
\family default
 retrieves the set of sentences which are imperative, and whose first word
 is 
\begin_inset Quotes eld
\end_inset

CALL
\begin_inset Quotes erd
\end_inset

.
 Within each sentence in that set, we retrieve the second word, but not
 the first.
 The only sentence in our example database which qualifies is the first
 sentence.
\end_layout

\begin_layout Subsection
power
\end_layout

\begin_layout Standard
The power construct is used to indicate that we allow some distance in between
 two blocks.
 A power construct must always stand between two other blocks, and can thus
 never be first or last in a query.
 It comes in three varieties: 
\end_layout

\begin_layout Itemize
A 
\begin_inset Quotes eld
\end_inset

plain vanilla
\begin_inset Quotes erd
\end_inset

 power construct, syntactically denoted by two dots, 
\begin_inset Quotes eld
\end_inset


\family typewriter
..
\family default

\begin_inset Quotes erd
\end_inset

, and 
\end_layout

\begin_layout Itemize
A power construct with a single, upper limit.
 The limit specifies the maximum monads that can intervene between the two
 surrounding blocks.
 It is denoted as e.g., 
\begin_inset Quotes eld
\end_inset


\family typewriter
..
\begin_inset space ~
\end_inset

<
\begin_inset space ~
\end_inset

5
\family default

\begin_inset Quotes erd
\end_inset

, or 
\begin_inset Quotes eld
\end_inset


\family typewriter
..
\begin_inset space ~
\end_inset

<=
\begin_inset space ~
\end_inset

5
\family default

\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
A power construct with a compound min/max limit.
 The limit specifies the minimum and maximum monads that can intervene.
 It is denoted as, e.g., 
\begin_inset Quotes eld
\end_inset


\family typewriter
..
 BETWEEN 1 AND 5
\family default

\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Consider the following topograph:
\end_layout

\begin_layout LyX-Code
[sentence
\end_layout

\begin_layout LyX-Code
    [word
\end_layout

\begin_layout LyX-Code
        part_of_speech = preposition]
\end_layout

\begin_layout LyX-Code
    ..
 < 4
\end_layout

\begin_layout LyX-Code
    [word
\end_layout

\begin_layout LyX-Code
        part_of_speech = noun]
\end_layout

\begin_layout LyX-Code
    ..
\end_layout

\begin_layout LyX-Code
    [word last
\end_layout

\begin_layout LyX-Code
        surface = "world"]
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout Standard
This topograph retrieves a list of sentences which have a word that has
 part of speech preposition, followed by a word which has part of speech
 noun, and which is within 4 monads of the preposition, followed by the
 last word of the sentence, which must be 
\begin_inset Quotes eld
\end_inset

world
\begin_inset Quotes erd
\end_inset

.
 Within that sentence, retrieve all the three words.
 The only sentence which qualifies is the second.
\end_layout

\begin_layout Subsection
opt_gap_block
\end_layout

\begin_layout Standard
An 
\family typewriter
opt_gap_block
\family default
 is used to match an optional gap in the text.
 It consists of:
\end_layout

\begin_layout Enumerate
The opening square bracket, `
\family typewriter
[
\family default
'.
\end_layout

\begin_layout Enumerate
The keyword 
\begin_inset Quotes eld
\end_inset


\family typewriter
gap?
\family default

\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
An optional T_MARKS
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

MARKS
\end_layout

\end_inset

 (e.g., 
\begin_inset Quotes eld
\end_inset

`yellow
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

`red`context
\begin_inset Quotes erd
\end_inset

).
 This will be put into the result set (i.e., sheaf) unchanged, and can be
 used to pass information back into the application from the user.
 The meaning of the T_MARKS is wholly application-dependent, since Emdros
 does nothing special with it â€” it just passes the T_MARKS on into the sheaf.
 See page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "T_MARKS-definition"

\end_inset

 for the formal definition of T_MARKS.
\end_layout

\begin_layout Enumerate
An optional 
\begin_inset Quotes eld
\end_inset


\family typewriter
noretrieve
\family default
,
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset


\family typewriter
retrieve
\family default

\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset


\family typewriter
focus
\family default
.
\begin_inset Quotes erd
\end_inset

 The default is 
\begin_inset Quotes eld
\end_inset


\family typewriter
noretrieve
\family default

\begin_inset Quotes erd
\end_inset

.
 (See section 
\begin_inset CommandInset ref
LatexCommand vref
reference "Retrieval"

\end_inset

)
\end_layout

\begin_layout Enumerate
An optional 
\family typewriter
blocks
\family default
 (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "Block strings: blocks"

\end_inset

).
\end_layout

\begin_layout Enumerate
The closing square bracket, `
\family typewriter
]
\family default
'.
\end_layout

\begin_layout Standard
The 
\family typewriter
opt_gap_block
\family default
 matches gaps
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 in the 
\emph on
substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset


\emph default
 against which we are matching.
 Thus if we look at the example in figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "TheDoor"

\end_inset

, we can construct the following topograph:
\end_layout

\begin_layout LyX-Code
[clause
\end_layout

\begin_layout LyX-Code
    [clause_atom
\end_layout

\begin_layout LyX-Code
        [word
\end_layout

\begin_layout LyX-Code
             surface = "door,"
\end_layout

\begin_layout LyX-Code
        ]
\end_layout

\begin_layout LyX-Code
    ]
\end_layout

\begin_layout LyX-Code
    [gap? noretrieve]
\end_layout

\begin_layout LyX-Code
    [clause_atom noretrieve]
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout Standard
This retrieves all clauses which happen to have inside them a clause_atom
 which contains the word 
\begin_inset Quotes eld
\end_inset

door,
\begin_inset Quotes erd
\end_inset

, followed by a gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

, followed by a clause_atom.
 The gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 and the second clause_atom are not retrieved.
 This would retrieve clause-1.
 The gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 need not be there.
\end_layout

\begin_layout Standard
The default is for the result of an 
\family typewriter
opt_gap_block
\family default
 not to be retrieved.
 Thus one needs to explicitly write 
\begin_inset Quotes eld
\end_inset


\family typewriter
retrieve
\family default

\begin_inset Quotes erd
\end_inset

 if one wishes to retrieve the gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
gap_block
\end_layout

\begin_layout Standard
A 
\family typewriter
gap_block
\family default
 is used to match a gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 in the text.
 It consists of:
\end_layout

\begin_layout Enumerate
The opening square bracket, `
\family typewriter
[
\family default
'.
\end_layout

\begin_layout Enumerate
The keyword 
\begin_inset Quotes eld
\end_inset


\family typewriter
gap
\family default

\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
An optional T_MARKS
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

MARKS
\end_layout

\end_inset

 (e.g., 
\begin_inset Quotes eld
\end_inset

`yellow
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

`red`context
\begin_inset Quotes erd
\end_inset

).
 This will be put into the result set (i.e., sheaf) unchanged, and can be
 used to pass information back into the application from the user.
 The meaning of the T_MARKS is wholly application-dependent, since Emdros
 does nothing special with it â€” it just passes the T_MARKS on into the sheaf.
 See page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "T_MARKS-definition"

\end_inset

 for the formal definition of T_MARKS.
\end_layout

\begin_layout Enumerate
An optional 
\begin_inset Quotes eld
\end_inset


\family typewriter
noretrieve
\family default
,
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset


\family typewriter
retrieve
\family default

\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset


\family typewriter
focus
\family default
.
\begin_inset Quotes erd
\end_inset

 The default is 
\begin_inset Quotes eld
\end_inset


\family typewriter
noretrieve
\family default

\begin_inset Quotes erd
\end_inset

.
 (See section 
\begin_inset CommandInset ref
LatexCommand vref
reference "Retrieval"

\end_inset

).
\end_layout

\begin_layout Enumerate
An optional 
\family typewriter
blocks
\family default
.
 (See section 
\begin_inset CommandInset ref
LatexCommand vref
reference "Block strings: blocks"

\end_inset

).
\end_layout

\begin_layout Enumerate
The closing square bracket, `
\family typewriter
]
\family default
'.
\end_layout

\begin_layout Standard
The 
\family typewriter
gap_block
\family default
 is analogous to the 
\family typewriter
opt_gap_block
\family default
 in all respects except that there 
\emph on
must
\emph default
 be a gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 in order for the query to match.
\end_layout

\begin_layout Subsection
object references
\end_layout

\begin_layout Standard
An object reference is a name given to a previously retrieved object with
 the 
\begin_inset Quotes eld
\end_inset


\family typewriter
as
\family default
 
\emph on
identifier
\emph default

\begin_inset Quotes erd
\end_inset

 declaration.
 An object reference can then be used in subsequent comparisons with features
 of other objects.
 This is done by selecting the desired feature from the object reference
 by using dot-notation, as in the example below:
\end_layout

\begin_layout LyX-Code
[word as w
\end_layout

\begin_layout LyX-Code
    part_of_speech = article;
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout LyX-Code
[word`myhit
\end_layout

\begin_layout LyX-Code
   (part_of_speech = noun 
\end_layout

\begin_layout LyX-Code
    or part_of_speech = adjective)
\end_layout

\begin_layout LyX-Code
    and case = w.case 
\end_layout

\begin_layout LyX-Code
    and number = w.number 
\end_layout

\begin_layout LyX-Code
    and gender = w.gender;
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout Standard
Assuming that the 
\family typewriter
word
\family default
 object type has features part_of_speech, case, number, and gender, this
 topograph retrieves all pairs of words which satisfy the following conditions:
 
\end_layout

\begin_layout Itemize
The first word has part of speech 
\begin_inset Quotes eld
\end_inset

article
\begin_inset Quotes erd
\end_inset

,
\end_layout

\begin_layout Itemize
The second word has part of speech 
\begin_inset Quotes eld
\end_inset

noun
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

adjective
\begin_inset Quotes erd
\end_inset

, and
\end_layout

\begin_layout Itemize
Both words have the same case, number, and gender.
\end_layout

\begin_layout Standard
This concludes our gentle, informal introduction to MQL.
\end_layout

\begin_layout Section
Syntax of mql_query 
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "mql_query:Syntax"

\end_inset


\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
The 
\family typewriter
mql_query
\family default
 non-terminal is the entry-point for the MQL query-subset.
 It is used in the WHERE clause of the SELECT (FOCUS|ALL) OBJECTS statement
 (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "SELECT_OBJECTS"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "SELECT_OBJECTS"

\end_inset

).
 In this section, we give the full grammar of the MQL query-subset.
 It is important that you take some time to read through the grammar.
 Subsequent sections will build on the bird's-eye view given in this section.
\end_layout

\begin_layout Subsection
Syntax
\end_layout

\begin_layout LyX-Code
mql_query : topograph
\end_layout

\begin_layout LyX-Code
; 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
topograph : blocks 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
blocks : block_string
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
block_string : block_string2 
\end_layout

\begin_layout LyX-Code
             | block_string2 
\begin_inset Quotes eld
\end_inset

OR
\begin_inset Quotes erd
\end_inset

 block_string
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
block_string2 : block_string1
\end_layout

\begin_layout LyX-Code
              | block_string1 block_string2
\end_layout

\begin_layout LyX-Code
              | block_string1 
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset

 block_string2
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
block_string1 : block_string0
\end_layout

\begin_layout LyX-Code
              | block_string0 
\begin_inset Quotes eld
\end_inset

*
\begin_inset Quotes erd
\end_inset

 [monad_set]
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
block_string0 : block
\end_layout

\begin_layout LyX-Code
              | 
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes eld
\end_inset

 block_string 
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
block : opt_gap_block 
\end_layout

\begin_layout LyX-Code
      | gap_block 
\end_layout

\begin_layout LyX-Code
      | power_block
\end_layout

\begin_layout LyX-Code
      | object_block
\end_layout

\begin_layout LyX-Code
      | (
\begin_inset Quotes eld
\end_inset

NOTEXIST
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

NOTEXISTS
\begin_inset Quotes erd
\end_inset

 ) object_block
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
opt_gap_block : 
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

GAP?
\begin_inset Quotes erd
\end_inset

   
\end_layout

\begin_layout LyX-Code
                      [ marks_declaration ]
\end_layout

\begin_layout LyX-Code
                      [ gap_retrieval ]   
\end_layout

\begin_layout LyX-Code
                      [ blocks ]  
\end_layout

\begin_layout LyX-Code
                
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
marks_declaration : T_MARKS
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

MARKS
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
gap_retrieval : 
\begin_inset Quotes eld
\end_inset

NORETRIEVE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
              | 
\begin_inset Quotes eld
\end_inset

RETRIEVE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
              | 
\begin_inset Quotes eld
\end_inset

FOCUS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
gap_block : 
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

GAP
\begin_inset Quotes erd
\end_inset

   
\end_layout

\begin_layout LyX-Code
                  [ marks_declaration ]
\end_layout

\begin_layout LyX-Code
                  [ gap_retrieval ]   
\end_layout

\begin_layout LyX-Code
                  [ blocks ]   
\end_layout

\begin_layout LyX-Code
            
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object_block :  
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

   object_type_name
\end_layout

\begin_layout LyX-Code
                     [ marks_declaration ]
\end_layout

\begin_layout LyX-Code
                     [ object_reference_declaration ]
\end_layout

\begin_layout LyX-Code
                     [ retrieval ]  
\end_layout

\begin_layout LyX-Code
                     [ firstlast ]
\end_layout

\begin_layout LyX-Code
                     [ monad_set_relation_clause ]
\end_layout

\begin_layout LyX-Code
                     [ feature_constraints ]
\end_layout

\begin_layout LyX-Code
                     [ feature_retrieval ]
\end_layout

\begin_layout LyX-Code
                     [ blocks ]   
\end_layout

\begin_layout LyX-Code
               
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object_reference_declaration : 
\begin_inset Quotes eld
\end_inset

AS
\begin_inset Quotes erd
\end_inset

 object_reference 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object_reference : T_IDENTIFIER 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
retrieval : 
\begin_inset Quotes eld
\end_inset

NORETRIEVE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
          | 
\begin_inset Quotes eld
\end_inset

RETRIEVE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
          | 
\begin_inset Quotes eld
\end_inset

FOCUS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
firstlast : 
\begin_inset Quotes eld
\end_inset

FIRST
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
          | 
\begin_inset Quotes eld
\end_inset

LAST
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
          | 
\begin_inset Quotes eld
\end_inset

FIRST
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

AND
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

LAST
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
feature_constraints  : ffeatures 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
ffeatures : fterm 
\end_layout

\begin_layout LyX-Code
          |  ffeatures   
\begin_inset Quotes eld
\end_inset

OR
\begin_inset Quotes erd
\end_inset

   fterm 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
fterm : ffactor
\end_layout

\begin_layout LyX-Code
      | ffactor   
\begin_inset Quotes eld
\end_inset

AND
\begin_inset Quotes erd
\end_inset

   fterm 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
ffactor : 
\begin_inset Quotes eld
\end_inset

NOT
\begin_inset Quotes erd
\end_inset

   ffactor
\end_layout

\begin_layout LyX-Code
        | 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Quotes erd
\end_inset

   ffeatures   
\begin_inset Quotes eld
\end_inset

)
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
        | feature_comparison 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
feature_comparison : 
\end_layout

\begin_layout LyX-Code
    feature_name  comparison_operator   value
\end_layout

\begin_layout LyX-Code
  | feature_name  
\begin_inset Quotes eld
\end_inset

IN
\begin_inset Quotes erd
\end_inset

   enum_const_set
\end_layout

\begin_layout LyX-Code
  | feature_name  
\begin_inset Quotes eld
\end_inset

IN
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

(
\begin_inset Quotes eld
\end_inset

 list_of_integer 
\begin_inset Quotes eld
\end_inset

)
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
  | feature_name  
\begin_inset Quotes eld
\end_inset

IN
\begin_inset Quotes erd
\end_inset

   object_reference_usage
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
comparison_operator : 
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
                    | 
\begin_inset Quotes eld
\end_inset

<
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
                    | 
\begin_inset Quotes eld
\end_inset

>
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
                    | 
\begin_inset Quotes eld
\end_inset

<>
\begin_inset Quotes erd
\end_inset

  /* not equal */
\end_layout

\begin_layout LyX-Code
                    | 
\begin_inset Quotes eld
\end_inset

<=
\begin_inset Quotes erd
\end_inset

  /* less than or equal */
\end_layout

\begin_layout LyX-Code
                    | 
\begin_inset Quotes eld
\end_inset

=<
\begin_inset Quotes erd
\end_inset

  /* less than or equal */
\end_layout

\begin_layout LyX-Code
                    | 
\begin_inset Quotes eld
\end_inset

>=
\begin_inset Quotes erd
\end_inset

  /* greater than or equal */
\end_layout

\begin_layout LyX-Code
                    | 
\begin_inset Quotes eld
\end_inset

=>
\begin_inset Quotes erd
\end_inset

  /* greater than or equal */
\end_layout

\begin_layout LyX-Code
                    | 
\begin_inset Quotes eld
\end_inset

~
\begin_inset Quotes erd
\end_inset

   /* regular expression
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
regular expressions!syntax
\end_layout

\end_inset

 */
\end_layout

\begin_layout LyX-Code
                    | 
\begin_inset Quotes eld
\end_inset

!~
\begin_inset Quotes erd
\end_inset

  /* inverted regular expression */
\end_layout

\begin_layout LyX-Code
                    | 
\begin_inset Quotes eld
\end_inset

HAS
\begin_inset Quotes erd
\end_inset

 /* lhs: list; rhs: atomic value.
\end_layout

\begin_layout LyX-Code
                                 signifies list membership.
 */
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
list_of_integer : T_INTEGER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

INTEGER
\end_layout

\end_inset

 { 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

 T_INTEGER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

INTEGER
\end_layout

\end_inset

 }*
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
value : enum_const
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
      | signed_integer
\end_layout

\begin_layout LyX-Code
      | T_STRING
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

STRING
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
      | object_reference_usage
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset

enum_const : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object_reference_usage : object_reference   
\end_layout

\begin_layout LyX-Code
                         
\begin_inset Quotes eld
\end_inset

.
\begin_inset Quotes erd
\end_inset

   feature_name 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
enum_const_set : 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Quotes eld
\end_inset

 enum_const_list 
\begin_inset Quotes eld
\end_inset

)
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
enum_const_list : enum_const { 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

 enum_const_list }
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
power : 
\begin_inset Quotes eld
\end_inset

..
\begin_inset Quotes erd
\end_inset

   [ restrictor ]
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
restrictor : 
\begin_inset Quotes eld
\end_inset

<
\begin_inset Quotes erd
\end_inset

 limit 
\end_layout

\begin_layout LyX-Code
           | 
\begin_inset Quotes eld
\end_inset

<=
\begin_inset Quotes erd
\end_inset

 limit
\end_layout

\begin_layout LyX-Code
           | 
\begin_inset Quotes eld
\end_inset

BETWEEN
\begin_inset Quotes erd
\end_inset

 limit 
\begin_inset Quotes eld
\end_inset

AND
\begin_inset Quotes erd
\end_inset

 limit
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
limit : T_INTEGER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

INTEGER
\end_layout

\end_inset

 /* non-negative integer, may be 0.
 */
\end_layout

\begin_layout LyX-Code
; 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
feature_retrieval : 
\begin_inset Quotes eld
\end_inset

GET
\begin_inset Quotes erd
\end_inset

 feature_list
\end_layout

\begin_layout LyX-Code
  | /* empty: Don't retrieve any features */
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
monad_set_relation_clause : 
\end_layout

\begin_layout LyX-Code
             /* empty; which means: part_of(substrate) */
\end_layout

\begin_layout LyX-Code
           | monad_set_relation_operation 
\end_layout

\begin_layout LyX-Code
             
\begin_inset Quotes eld
\end_inset

(
\begin_inset Quotes eld
\end_inset

 universe_or_substrate 
\begin_inset Quotes eld
\end_inset

)
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
           | monad_set_relation_operation 
\end_layout

\begin_layout LyX-Code
             
\begin_inset Quotes eld
\end_inset

(
\begin_inset Quotes eld
\end_inset

 monad_set_or_monads 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
             universe_or_substrate 
\begin_inset Quotes eld
\end_inset

)
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
monad_set_relation_operation : 
\begin_inset Quotes eld
\end_inset

part_of
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

overlap
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
universe_or_substrate : 
\begin_inset Quotes eld
\end_inset

universe
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

substrate
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
monad_set_or_monads : 
\begin_inset Quotes eld
\end_inset

monads
\begin_inset Quotes erd
\end_inset

 | T_IDENTIFIER 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsection
References
\end_layout

\begin_layout Standard
For the 
\family typewriter
signed_integer
\family default
 non-terminal, please see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "CREATE_OBJECT_TYPE"

\end_inset

.
 For 
\family typewriter
feature_name
\family default
, see 
\begin_inset CommandInset ref
LatexCommand vref
reference "UPDATE_OBJECT_TYPE"

\end_inset

.
 For 
\family typewriter
feature_list
\family default
, see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:GET-FEATURES"

\end_inset

.
 For 
\family typewriter
monad_set
\family default
, see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "SELECT_OBJECTS"

\end_inset

.
\end_layout

\begin_layout Section
The sheaf
\begin_inset CommandInset label
LatexCommand label
name "sheaf"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sheaf|bold
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
The sheaf is the data structure that is returned from an MQL query-query.
 The structure of the sheaf closely reflects the structure of the query
 on which it is based.
 This section is meant as reading for implementors of Emdros-systems, not
 for end-users.
\end_layout

\begin_layout Standard
The sheaf has a specific structure, which we will look at next.
 After that, we will take a look at the meaning of the structures of the
 sheaf.
\end_layout

\begin_layout Subsection
Structure of the sheaf
\end_layout

\begin_layout Standard
A sheaf consists of the following element types:
\end_layout

\begin_layout Enumerate
Sheaf
\end_layout

\begin_layout Enumerate
Straw
\end_layout

\begin_layout Enumerate
Matched_object
\end_layout

\begin_layout Subsubsection
What is a sheaf?
\end_layout

\begin_layout Standard
A sheaf 
\emph on
is
\emph default
 a list of straws.
\end_layout

\begin_layout Subsubsection
What is a straw?
\end_layout

\begin_layout Standard
A straw 
\emph on
is
\emph default
 a list of matched_objects.
\end_layout

\begin_layout Subsubsection
What is a matched_object?
\end_layout

\begin_layout Standard
A matched_object 
\emph on
is
\emph default
 one of the following:
\end_layout

\begin_layout Enumerate
(object id_d, focus boolean, marks, sheaf, object type, set of monads, list
 of feature-values)
\end_layout

\begin_layout Enumerate
(object id_m, focus boolean, marks, sheaf)
\end_layout

\begin_layout Standard
That is, a matched_object is an object id (either id_d or id_m), coupled
 with a boolean indicating whether the block that gave rise to the matched_objec
t had the 
\begin_inset Quotes eld
\end_inset

FOCUS
\begin_inset Quotes erd
\end_inset

 modifier, coupled with a 
\begin_inset Quotes eld
\end_inset

marks
\begin_inset Quotes erd
\end_inset

 string, coupled with a sheaf.
 If the matched_object is of the first kind, then additionally, the object
 type and the object's set of monads are also available, and there is a
 (possibly empty) list of feature-values.
\end_layout

\begin_layout Subsection
MQL is topographic
\end_layout

\begin_layout Standard
There is a correspondence between the way an MQL query is structured and
 the structure of the resulting sheaf.
 In fact, the two are isomorphic to some extent.
 Doedens, in 
\begin_inset CommandInset citation
LatexCommand cite
key "Doedens94"
literal "true"

\end_inset

, called this property 
\begin_inset Quotes eld
\end_inset

topographicity.
\begin_inset Quotes erd
\end_inset

 Thus a 
\family typewriter
blocks
\family default
 gives rise to a sheaf, a 
\family typewriter
block_str
\family default
 gives rise to a straw, and a 
\family typewriter
block
\family default
 gives rise to a matched_object.
 Inside a 
\family typewriter
block
\family default
, there is an optional inner 
\family typewriter
blocks
\family default
, which again gives rise to an inner sheaf.
 Hence a matched_object contains a sheaf.
 The origin of this sheaf is the optional inner 
\family typewriter
blocks
\family default
 in the 
\family typewriter
block
\family default
 which gave rise to the matched_object.
 
\end_layout

\begin_layout Standard
Note that this description applies to 
\begin_inset Quotes eld
\end_inset

full sheaves.
\begin_inset Quotes erd
\end_inset

 Flat sheaves are a different matter.
 See section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Flat-sheaf"

\end_inset

 for a description of flat sheaves.
\end_layout

\begin_layout Subsection
Meaning of matched_object
\end_layout

\begin_layout Standard
A matched_object is the result of one of the following matches:
\end_layout

\begin_layout Enumerate
An 
\family typewriter
object_block
\family default
 against an object in the database.
\end_layout

\begin_layout Enumerate
An 
\family typewriter
opt_gap_block
\family default
 against a gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
A 
\family typewriter
gap_block
\family default
 against a gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
A matched_object's first component is either an id_d or an id_m.
 If the matched_object is the result of a match against an object_block
 or an object_block_first, then the id will be an id_d.
 If the matched_object is the result of a match against a 
\family typewriter
gap_block
\family default
 or an 
\family typewriter
opt_gap_block
\family default
, the id is an id_m.
\end_layout

\begin_layout Standard
The second component is a boolean indicating whether the 
\begin_inset Quotes eld
\end_inset

FOCUS
\begin_inset Quotes erd
\end_inset

 keyword was present on the block.
\end_layout

\begin_layout Standard
The third component is a sheaf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sheaf
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
As we will see later, a sheaf is the result of matching against a 
\family typewriter
blocks
\family default
.
 It so happens that there is an optional 
\family typewriter
blocks
\family default
 inside each of the four kinds of block (in the list above).
 The sheaf inside the matched_object is the result of a match against this
 
\family typewriter
blocks
\family default
, if present.
 If the 
\family typewriter
blocks
\family default
 is not present, then the sheaf is simply an empty sheaf.
\end_layout

\begin_layout Standard
For example, the following topograph:
\end_layout

\begin_layout LyX-Code
[word FOCUS]
\end_layout

\begin_layout Standard
will contain one matched_object for each word-object within the substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

 of the topograph.
 The sheaf of each of these matched_objects will be empty, and the FOCUS
 boolean will be 
\begin_inset Quotes eld
\end_inset

true
\begin_inset Quotes erd
\end_inset

 because we specified the FOCUS keyword.
\end_layout

\begin_layout Subsection
Meaning of straw
\end_layout

\begin_layout Standard
A straw is the result of one complete match of a 
\family typewriter
block_str
\family default
.
 That is, a straw is a 
\begin_inset Quotes eld
\end_inset

string
\begin_inset Quotes erd
\end_inset

 of matched_objects corresponding to the blocks in the 
\family typewriter
block_str
\family default
 which we should retrieve (which we can specify with the (
\begin_inset Quotes eld
\end_inset

FOCUS
\begin_inset Quotes erd
\end_inset

|
\begin_inset Quotes erd
\end_inset

RETRIEVE
\begin_inset Quotes erd
\end_inset

|
\begin_inset Quotes erd
\end_inset

NORETRIEVE
\begin_inset Quotes erd
\end_inset

) keyword triad).
\end_layout

\begin_layout Standard
For example, consider the following topograph:
\end_layout

\begin_layout LyX-Code
[word
\end_layout

\begin_layout LyX-Code
   surface = "the";
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout LyX-Code
[word
\end_layout

\begin_layout LyX-Code
   part_of_speech = noun;
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout Standard
This will return a sheaf with as many straws as there are pairs of adjacent
 words where the first is the word 
\begin_inset Quotes eld
\end_inset

the
\begin_inset Quotes erd
\end_inset

 and the second is a noun.
 Each straw will contain two matched_objects, one for each word.
\end_layout

\begin_layout Subsection
Meaning of the sheaf
\end_layout

\begin_layout Standard
A sheaf is the result of gathering all the matchings of a 
\family typewriter
blocks
\family default
 non-terminal.
 There are four places in the MQL grammar where a 
\family typewriter
blocks
\family default
 non-terminal shows up:
\end_layout

\begin_layout Enumerate
In the 
\family typewriter
topograph
\family default
,
\end_layout

\begin_layout Enumerate
In the 
\family typewriter
object_block
\family default
,
\end_layout

\begin_layout Enumerate
In the 
\family typewriter
opt_gap_block
\family default
, and
\end_layout

\begin_layout Enumerate
In the 
\family typewriter
gap_block
\family default
.
\end_layout

\begin_layout Standard
The first is the top-level non-terminal of the MQL query-query grammar.
 Thus the result of an MQL query-query is a sheaf.
\end_layout

\begin_layout Standard
Each of the last three is some kind of block.
 Inside each of these, there is an optional 
\family typewriter
blocks
\family default
.
 The result of matching this 
\family typewriter
blocks
\family default
 is a sheaf.
\end_layout

\begin_layout Standard
But a sheaf is a list of straws.
 What does that mean?
\end_layout

\begin_layout Standard
It means that a sheaf contains as many matches of the strings of blocks
 (technically, block_string2) making up the 
\family typewriter
blocks
\family default
 as are available within the substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

 and universe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
universe
\end_layout

\end_inset

 that governed the matching of the 
\family typewriter
blocks
\family default
.
\end_layout

\begin_layout Standard
A straw constitutes one matching of the 
\family typewriter
block_str
\family default
ing2.
 A sheaf, on the other hand, constitutes all the matchings.
\end_layout

\begin_layout Subsection
Flat sheaf
\begin_inset CommandInset label
LatexCommand label
name "subsec:Flat-sheaf"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
flat sheaf|bold
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sheaf!flat|see
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

flat sheaf
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the above description has applied to 
\begin_inset Quotes eld
\end_inset

full sheaves.
\begin_inset Quotes erd
\end_inset

 We now describe flat sheaves.
\end_layout

\begin_layout Standard
A 
\begin_inset Quotes eld
\end_inset

flat sheaf,
\begin_inset Quotes erd
\end_inset

 like a 
\begin_inset Quotes eld
\end_inset

full sheaf,
\begin_inset Quotes erd
\end_inset

 consists of the datatypes 
\begin_inset Quotes eld
\end_inset

sheaf,
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

straw,
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

matched_object.
\begin_inset Quotes erd
\end_inset

 The difference is that a 
\begin_inset Quotes eld
\end_inset

matched_object
\begin_inset Quotes erd
\end_inset

 in a flat sheaf cannot have an embedded sheaf.
 This makes a flat sheaf a non-recursive datastructure.
\end_layout

\begin_layout Standard
A flat sheaf arises from a full sheaf by means of the 
\begin_inset Quotes eld
\end_inset

flatten
\begin_inset Quotes erd
\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
flatten operator|bold
\end_layout

\end_inset

 operator.
\end_layout

\begin_layout Standard
If 
\begin_inset Quotes eld
\end_inset

FullSheaf
\begin_inset Quotes erd
\end_inset

 is a full sheaf, then 
\begin_inset Quotes eld
\end_inset

flatten(FullSheaf)
\begin_inset Quotes erd
\end_inset

 returns a flat sheaf that corresponds to the full sheaf.
\end_layout

\begin_layout Standard
A flat sheaf contains the same matched_objects as its originating full sheaf.
 However, they are structured such that each straw in the flat sheaf contains
 only matched_objects of one object type.
 Each object type that is represented in the full sheaf results in one straw
 in the flat sheaf.
\end_layout

\begin_layout Standard
Thus a straw in a flat sheaf does not correspond to the matching of a block_stri
ng.
 Instead, it is a list of all the matched_objects of one particular object
 type in the originating full sheaf.
 All of the matched_objects in the full sheaf are represented in the flat
 sheaf, regardless of whether they represent the same object in the database.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

flatten
\begin_inset Quotes erd
\end_inset

 operator is only applied to the output of an MQL query if the 
\begin_inset Quotes eld
\end_inset

RETURNING FLAT SHEAF
\begin_inset Quotes erd
\end_inset

 clause is given (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "SELECT_OBJECTS"

\end_inset

).
 The programmer of an Emdros application can also apply it programmatically.
\end_layout

\begin_layout Standard
There is a variant of the flatten operator which also takes a list of object
 type names, in addition to the full sheaf.
 Then only those object types which are in the list are put into the flat
 sheaf.
 If L is a list of object type names, and FullSheaf is a full sheaf, then
 flatten(FullSheaf, L) returns a flat sheaf with straws for only those object
 types which are in L.
 If L is empty, then this is interpreted as meaning that all object types
 in FullSheaf must go into the flat sheaf.
 In the this light, the single-argument flatten operator may be seen as
 being a special case of the two-argument flatten operator, with L being
 empty.
 That is, flatten(FullSheaf) is the same as flatten(FullSheaf, []).
\end_layout

\begin_layout Section
Universe and substrate
\begin_inset CommandInset label
LatexCommand label
name "sec:Universe-and-substrate"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate|bold
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
universe|bold
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
Two concepts which we shall need when explaining the blocks in MQL are 
\begin_inset Quotes eld
\end_inset

Universe
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

Substrate.
\begin_inset Quotes erd
\end_inset

 In this section, we define and explain them.
\end_layout

\begin_layout Subsection
Universe and substrate
\end_layout

\begin_layout Standard
A Universe is a contiguous set of monads.
 It always starts at a particular monad 
\begin_inset Formula $a$
\end_inset

 and ends at another monad 
\begin_inset Formula $b$
\end_inset

, where 
\begin_inset Formula $a\leq b$
\end_inset

.
 In more everyday language, a Universe is a stretch of monads that starts
 at one monad and ends at another monad later in the database.
 The ending monad may be the same as the starting monad.
\end_layout

\begin_layout Standard
A Substrate, on the other hand, is an arbitrary set of monads.
 It may have gaps
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "gaps"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "gaps"

\end_inset

).
 That is, while a Substrate always begins at a certain monad 
\begin_inset Formula $a$
\end_inset

 and always ends at another monad 
\begin_inset Formula $b$
\end_inset

, where 
\begin_inset Formula $a\leq b$
\end_inset

, it need not contain all of the monads in between.
\end_layout

\begin_layout Standard
A Universe always has an accompanying Substrate, and a Substrate always
 has an accompanying Universe.
 Their starting- and ending-monads are the same.
 That is, the first monad of the Universe is always the same as the first
 monad of the accompanying Substrate.
 And the last monad of the Universe is always the same as the last monad
 of the Substrate.
 So a Universe is a Substrate with all the gaps
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 (if any) filled in.
\end_layout

\begin_layout Standard
See section 
\begin_inset CommandInset ref
LatexCommand vref
reference "SELECT OBJECTS: Explanation"

\end_inset

 for an explanation of how the initial substrate and universe are calculated
 for the query.
\end_layout

\begin_layout Standard
With that definition out of the way, let us proceed to describing, exemplifying,
 and explaining 
\emph on
blocks
\emph default
.
\end_layout

\begin_layout Section
Consecutiveness and embedding
\begin_inset CommandInset label
LatexCommand label
name "mql-query:Consecutiveness-and-embedding"

\end_inset


\end_layout

\begin_layout Standard
Two important notions in the MQL query-subset are embedding and consecutiveness.
 If two blocks (be they object blocks or gap blocks) are consecutive in
 a query, it means that they will only match two objects or gaps which are
 consecutive with respect to the substrate.
 Likewise, a string of blocks (i.e., a 
\family typewriter
blocks
\family default
) which is embedded inside of a block of some sort will only match within
 the confines of the monads of the surrounding block.
\end_layout

\begin_layout Standard
For example, the following topograph:
\end_layout

\begin_layout LyX-Code
[Word psp=article]
\end_layout

\begin_layout LyX-Code
[Word psp=noun]
\end_layout

\begin_layout Standard
will match two adjacent (or consecutive) words where the first is an article
 and the second is a noun.
 The consecutiveness is calculated with respect to the current substrate
 (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "consecutive"

\end_inset

).
\end_layout

\begin_layout Standard
Likewise, the following topograph:
\end_layout

\begin_layout LyX-Code
[Clause
\end_layout

\begin_layout LyX-Code
  [Phrase phrase_type = NP]
\end_layout

\begin_layout LyX-Code
  [Phrase phrase_type = VP]
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout Standard
will match only if the two (adjacent) phrases are found 
\emph on
within the confines of
\emph default
 the monads of the surrounding Clause.
 In fact the monads of the surrounding clause serve as the substrate when
 matching the inner 
\family typewriter
blocks
\family default
.
\end_layout

\begin_layout Standard
You can specify the kind of containment you want: Either part_of or overlap.
 Part_of means that the inner object must be a subset (proper or not) of
 the outer object.
\end_layout

\begin_layout Standard
You can also specify whether the containment should be relative to the substrate
 or the universe.
 The universe is always the universe coming out the of the substrate that
 is the surrounding object or gap.
\end_layout

\begin_layout Standard
This is done as follows:
\end_layout

\begin_layout LyX-Code
[Clause
\end_layout

\begin_layout LyX-Code
  // Phrase is part_of the monads of the clause
\end_layout

\begin_layout LyX-Code
  [Phrase part_of(substrate) phrase_type=NP]
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
  // Phrase is part_of the monads of the clause, including any gaps
\end_layout

\begin_layout LyX-Code
  // in the clause
\end_layout

\begin_layout LyX-Code
  [Phrase part_of(universe) phrase_type=VP]
\end_layout

\begin_layout LyX-Code
  
\end_layout

\begin_layout LyX-Code
  // Phrase has non-empty intersection with the monads of the clause
\end_layout

\begin_layout LyX-Code
  [Phrase overlaps(substrate) phrase_type=AdvP]
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
  // Phrase is non-empty intersection with the monads of the clause, 
\end_layout

\begin_layout LyX-Code
  // including any gaps in the clause
\end_layout

\begin_layout LyX-Code
  [Phrase overlaps(universe) phrase_type=PP]
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout Standard
The default is to use 
\family typewriter
part_of(substrate)
\family default
.
\end_layout

\begin_layout Section
Blocks
\begin_inset CommandInset label
LatexCommand label
name "Blocks"

\end_inset


\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
Blocks are the heart and soul of MQL query-queries.
 They specify which objects and which gaps
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 in those objects should be matched and/or retrieved.
 With object blocks, you specify which objects should be matched.
 With gap blocks, you specify whether a gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 should be looked for.
\end_layout

\begin_layout Standard
In this section, we treat the four kinds of blocks in MQL in some detail.
 First, we describe and explain the two kinds of object block (Object blocks,
 
\begin_inset CommandInset ref
LatexCommand ref
reference "Object blocks"

\end_inset

).
 Then we treat the two kinds of gap blocks (Gap blocks, 
\begin_inset CommandInset ref
LatexCommand ref
reference "Gap blocks"

\end_inset

).
 Then we describe how to specify whether to retrieve a block's contents
 (Retrieval, 
\begin_inset CommandInset ref
LatexCommand ref
reference "Retrieval"

\end_inset

).
 After that we describe how to specify that an object block should be either
 first or last in its enclosing 
\family typewriter
blocks
\family default
 (First and last, 
\begin_inset CommandInset ref
LatexCommand ref
reference "First and last"

\end_inset

).
 Then we describe and explain how to specify constraints on features (Feature
 constraints, 
\begin_inset CommandInset ref
LatexCommand ref
reference "Feature specifications"

\end_inset

).
 Then we describe object references, which are a way of referring to other
 objects in a query (Object references, 
\begin_inset CommandInset ref
LatexCommand ref
reference "Object references"

\end_inset

).
 Finally, we wrap up the syntactic non-terminals dealing with blocks by
 describing the 
\family typewriter
block
\family default
 (Block, 
\begin_inset CommandInset ref
LatexCommand ref
reference "Blocks: block"

\end_inset

) 
\end_layout

\begin_layout Subsection
Object blocks
\begin_inset CommandInset label
LatexCommand label
name "Object blocks"

\end_inset


\end_layout

\begin_layout Subsubsection
Introduction
\end_layout

\begin_layout Standard
Object blocks specify which objects should be matched.
 Therefore, they are quite important in MQL.
 With object blocks, it is also possible to specify whether or not matched
 objects should be retrieved.
 You can also specify constraints on the features of the objects which should
 be matched; You can specify whether you want objects matched against a
 certain object block to be first or last in the string of blocks we are
 looking for at the moment; And finally, you can label objects matched in
 a query with object reference labels, so that those objects can be referred
 to later in the query (i.e., further down in the MQL query, and thus further
 on in the string of monads).
 In this subsection, we deal with the object blocks themselves, deferring
 the treatment of feature-constraints, first/last-specifications, and object
 references to later subsections.
 
\end_layout

\begin_layout Standard
First, we describe the syntax of object blocks, then we give some examples,
 and finally we give some explanatory information.
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
object_block :  
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

   object_type_name
\end_layout

\begin_layout LyX-Code
                     [ marks_declaration ]
\end_layout

\begin_layout LyX-Code
                     [ object_reference_declaration ]
\end_layout

\begin_layout LyX-Code
                     [ retrieval ]  
\end_layout

\begin_layout LyX-Code
                     [ firstlast ]
\end_layout

\begin_layout LyX-Code
                     [ monad_set_relation_clause ]
\end_layout

\begin_layout LyX-Code
                     [ feature_constraints ]
\end_layout

\begin_layout LyX-Code
                     [ feature_retrieval ]
\end_layout

\begin_layout LyX-Code
                     [ blocks ]   
\end_layout

\begin_layout LyX-Code
               
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object_type_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
marks_declaration : T_MARKS
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

MARKS
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
retrieval : 
\begin_inset Quotes eld
\end_inset

NORETRIEVE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
          | 
\begin_inset Quotes eld
\end_inset

RETRIEVE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
          | 
\begin_inset Quotes eld
\end_inset

FOCUS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
firstlast : 
\begin_inset Quotes eld
\end_inset

FIRST
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
          |  
\begin_inset Quotes eld
\end_inset

LAST
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
          |  
\begin_inset Quotes eld
\end_inset

FIRST
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

AND
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

LAST
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
last : 
\begin_inset Quotes eld
\end_inset

LAST
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
feature_retrieval : 
\begin_inset Quotes eld
\end_inset

GET
\begin_inset Quotes erd
\end_inset

 feature_list
\end_layout

\begin_layout LyX-Code
  | /* empty: Don't retrieve any features */
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
monad_set_relation_clause : 
\end_layout

\begin_layout LyX-Code
             /* empty; which means: part_of(substrate) */
\end_layout

\begin_layout LyX-Code
           | monad_set_relation_operation 
\end_layout

\begin_layout LyX-Code
             
\begin_inset Quotes eld
\end_inset

(
\begin_inset Quotes eld
\end_inset

 universe_or_substrate 
\begin_inset Quotes eld
\end_inset

)
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
           | monad_set_relation_operation 
\end_layout

\begin_layout LyX-Code
             
\begin_inset Quotes eld
\end_inset

(
\begin_inset Quotes eld
\end_inset

 monad_set_or_monads 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
             universe_or_substrate 
\begin_inset Quotes eld
\end_inset

)
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
monad_set_relation_operation : 
\begin_inset Quotes eld
\end_inset

part_of
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

overlap
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
universe_or_substrate : 
\begin_inset Quotes eld
\end_inset

universe
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

substrate
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
monad_set_or_monads : 
\begin_inset Quotes eld
\end_inset

monads
\begin_inset Quotes erd
\end_inset

 | T_IDENTIFIER 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
For 
\family typewriter
object_reference_declaration
\family default
, see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "Object references"

\end_inset

.
 For 
\family typewriter
feature_constraints
\family default
, see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "Feature specifications"

\end_inset

.
 For 
\family typewriter
blocks
\family default
, see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "Block strings: blocks"

\end_inset

.
 For 
\family typewriter
feature_list
\family default
, please see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:GET-FEATURES"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Examples
\end_layout

\begin_layout LyX-Code
1.
 [Clause]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

2.
 [Phrase noretrieve first
\end_layout

\begin_layout LyX-Code
      phrase_type = NP
\end_layout

\begin_layout LyX-Code
   ]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

3.
 [Clause first and last]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

4.
 [Word as w focus last 
\end_layout

\begin_layout LyX-Code
      psp = noun and number = pl
\end_layout

\begin_layout LyX-Code
      GET surface, lexeme
\end_layout

\begin_layout LyX-Code
   ]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

5.
 [Clause`context
\end_layout

\begin_layout LyX-Code
     [Phrase`red first
\end_layout

\begin_layout LyX-Code
       phrase_type = NP and phrase_function = Subj
\end_layout

\begin_layout LyX-Code
     ]
\end_layout

\begin_layout LyX-Code
     [Phrase`green
\end_layout

\begin_layout LyX-Code
       phrase_type = VP
\end_layout

\begin_layout LyX-Code
       [Word
\end_layout

\begin_layout LyX-Code
         psp = V
\end_layout

\begin_layout LyX-Code
       ]
\end_layout

\begin_layout LyX-Code
       [Phrase`blue
\end_layout

\begin_layout LyX-Code
         phrase_type = NP and phrase_function = Obj
\end_layout

\begin_layout LyX-Code
       ]
\end_layout

\begin_layout LyX-Code
     ]
\end_layout

\begin_layout LyX-Code
   ]
\begin_inset Newline newline
\end_inset

 
\begin_inset Newline newline
\end_inset

6.
 [Sentence
\end_layout

\begin_layout LyX-Code
      NOTEXIST [Word surface = "saw"]
\end_layout

\begin_layout LyX-Code
   ]
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
Firstly, it will be noticed that the first item after the opening bracket
 must always be an object type name.
 This is in keeping with all other parts of MQL where object type names
 are used.
\end_layout

\begin_layout Standard
Secondly, it will be noticed that all of the other syntactic non-terminals
 in the definition of the object blocks are optional.
\end_layout

\begin_layout Standard
The marks declaration comes after the object type name.
 The query-writer can use it to pass information back into the application
 that sits on top of Emdros.
 Emdros does nothing special with the T_MARKS
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

MARKS
\end_layout

\end_inset

, other than passing it on into the sheaf, that is, into the matched_object
 that arises because of the object_block.
 In particular, there is no semantics associated with the marks_declaration.
 See page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "T_MARKS-definition"

\end_inset

 for the formal definition of T_MARKS.
\end_layout

\begin_layout Standard
The object reference declaration comes after the marks declaration, and
 will be dealt with below (
\begin_inset CommandInset ref
LatexCommand ref
reference "Object references"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "Object references"

\end_inset

).
 
\end_layout

\begin_layout Standard
The specification of the retrieval comes after the object reference declaration
 and will be dealt with in another section (
\begin_inset CommandInset ref
LatexCommand ref
reference "Retrieval"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "Retrieval"

\end_inset

).
 
\end_layout

\begin_layout Standard
The specification of the monad set relation clause has an impact on how
 the containment is calculated, and was dealt with above (
\begin_inset CommandInset ref
LatexCommand ref
reference "mql-query:Consecutiveness-and-embedding"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "mql-query:Consecutiveness-and-embedding"

\end_inset

).
\end_layout

\begin_layout Standard
The specification of first/last-constraints comes after the specification
 of retrieval, and will also be dealt with in another section (
\begin_inset CommandInset ref
LatexCommand ref
reference "First and last"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "First and last"

\end_inset

).
 
\end_layout

\begin_layout Standard
The specification of the monad set relation determines four things: 
\end_layout

\begin_layout Enumerate
It determines which monad set will be used to match against the Substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

 or Universe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
universe
\end_layout

\end_inset

 that accompanies the surrounding 
\family typewriter
blocks
\family default
.
 If the 
\begin_inset Quotes eld
\end_inset


\family typewriter
monad_set_or_monads
\family default

\begin_inset Quotes erd
\end_inset

 specification is left out, the constituting monad set is used (i.e., the
 monad set which makes up the object).
 The same is true if the monad_set_or_monads specification is 
\begin_inset Quotes eld
\end_inset


\family typewriter
monads
\family default

\begin_inset Quotes erd
\end_inset

.
 If the 
\family typewriter
monad_set_or_monads
\family default
 specification is not left out, it must be a feature which must exist on
 the object type and be of the type 
\begin_inset Quotes eld
\end_inset

set of monads
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
It determines which monad set to use as the Substrate of the inner 
\family typewriter
blocks
\family default
.
 The monad set used for the Substrate of the inner 
\family typewriter
blocks
\family default
 is currently the same as the monad set used to match against the Universe
 or Substrate of the outer 
\family typewriter
blocks
\family default
.
 This may change in future releases of Emdros.
\end_layout

\begin_layout Enumerate
It determines whether to match against the Universe or Substrate of the
 outer bl
\family typewriter
ocks
\family default
.
 This is done by the mention of 
\begin_inset Quotes eld
\end_inset


\family typewriter
universe
\family default

\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset


\family typewriter
substrate
\family default

\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
It determines which operation to use when matching against the Universe
 or Substrate of the surrounding 
\family typewriter
blocks
\family default
.
 This can be either 
\begin_inset Quotes eld
\end_inset


\family typewriter
part_of
\family default

\begin_inset Quotes erd
\end_inset

 (the monad set of the object must be a subset of the Universe or Substrate)
 or 
\begin_inset Quotes eld
\end_inset


\family typewriter
overlap
\family default

\begin_inset Quotes erd
\end_inset

 (non-empty set intersection).
 See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "part_of"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "part_of"

\end_inset

 for details of the part_of
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
part
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

of
\end_layout

\end_inset

 relation.
\end_layout

\begin_layout Standard
It is possible to specify constraints on the features of objects.
 This is done in the 
\family typewriter
feature_constraints
\family default
 non-terminal, which comes after the first/last-constraints.
 These constraints will be dealt with in a section below (
\begin_inset CommandInset ref
LatexCommand ref
reference "Feature specifications"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "Feature specifications"

\end_inset

).
\end_layout

\begin_layout Standard
A list of features can be given in the 
\family typewriter
feature_retrieval
\family default
 clause.
 Their values for a given object are placed on the list of features in the
 matched_object in the sheaf.
\end_layout

\begin_layout Standard
The inner 
\family typewriter
blocks
\family default
 syntactic non-terminal allows the writer of MQL queries the possibility
 of matching objects nested inside objects.
 Example 5 above shows several examples of this.
 Example 5 finds those clauses which have inside them first a phrase which
 is a Subject NP, then followed by a Phrase which is a VP, the first word
 inside of which is a verb, followed by an Object NP.
 Thus we have an object block (
\begin_inset Quotes eld
\end_inset

Clause
\begin_inset Quotes erd
\end_inset

) with an inner 
\family typewriter
blocks
\family default
 (
\begin_inset Quotes eld
\end_inset

NP followed by VP
\begin_inset Quotes erd
\end_inset

), where inside the VP we have another 
\family typewriter
blocks
\family default
 (V followed by NP).
\end_layout

\begin_layout Standard
The inner blocks, if present, must match if the object block is to match.
 When entering the inner 
\family typewriter
blocks
\family default
, the Substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

 for that 
\family typewriter
blocks
\family default
 becomes the monads of the enclosing object.
 Let us call that object O.
 The Universe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
universe
\end_layout

\end_inset

 for the inner 
\family typewriter
blocks
\family default
 becomes the set of monads between and including the borders
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
borders
\end_layout

\end_inset

 of the enclosing object (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "borders, first, last"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "borders, first, last"

\end_inset

), i.e., the stretch of monads between (and including) O.first and O.last.
 This is the same as the substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

, except with any gaps
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 filled in.
\end_layout

\begin_layout Standard
If you want any objects or gaps
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 inside the object block to be retrieved, then the retrieval of the enclosing
 object block must be either retrieve or focus.
 Since the default retrieval for object blocks is to retrieve them, this
 condition is satisfied if you write nothing for the retrieval.
\end_layout

\begin_layout Standard
An object, if it is to match against a given object block, must meet all
 of the following criteria:
\end_layout

\begin_layout Enumerate
The first/last constraints must be met.
\end_layout

\begin_layout Enumerate
The operation (
\begin_inset Quotes eld
\end_inset

part_of
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

overlap
\begin_inset Quotes erd
\end_inset

) of the monad_set_relation_clause must be true on the given monad set and
 the Substrate or Universe.
\end_layout

\begin_layout Enumerate
The feature constraints must hold.
 See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "Feature specifications"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "Feature specifications"

\end_inset

 for details.
\end_layout

\begin_layout Enumerate
The inner blocks must not return a failed sheaf.
\end_layout

\begin_layout Standard
You can optionally place the keyword 
\begin_inset Quotes eld
\end_inset

NOTEXIST
\begin_inset Quotes erd
\end_inset

 before the object block.
 This will result in matching those cases where the object block does not
 occur, and will result in a failed match where the object block does occur.
 This is most useful if you have some context, i.e., a surrounding context
 (e.g., a sentence which does not contain such and such a word, see example
 6 above).
 You are allowed to have blocks before and after a NOTEXIST block.
 Let us say that there is a block before the NOTEXIST block.
 Then the Substrate within which the NOTEXIST block will be matched is the
 Substrate of the context, minus the monads from the beginning of the Substrate
 to the end of the MatchedObject matching the previous block.
 The Universe of the NOTEXIST block will be defined analogously on the Universe
 of the context.
 
\end_layout

\begin_layout Standard
The NOTEXIST block will have 
\begin_inset Quotes eld
\end_inset

zero width
\begin_inset Quotes erd
\end_inset

 with respect to consecutiveness: If it matches anything, the entire block_strin
g fails.
 If it does not match, it is as though the NOTEXIST block had not been there,
 and any block after the NOTEXIST block will be attempted matched starting
 at the previous block's last monad plus 1.
\end_layout

\begin_layout Standard
The NOTEXIST keyword acts as an 
\begin_inset Quotes eld
\end_inset

upwards export barrier
\begin_inset Quotes erd
\end_inset

 of object reference declarations.
 That is, you cannot 
\begin_inset Quotes eld
\end_inset

see
\begin_inset Quotes erd
\end_inset

 an object reference declaration outside of the NOTEXIST, only inside of
 it.
\end_layout

\begin_layout Subsection
Gap blocks
\begin_inset CommandInset label
LatexCommand label
name "Gap blocks"

\end_inset


\end_layout

\begin_layout Subsubsection
Introduction
\end_layout

\begin_layout Standard
Gap blocks are used to match gaps
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 in the substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

 we are currently matching against.
 There are two kinds of blocks: plain gap blocks and optional gap blocks.
 
\end_layout

\begin_layout Standard
We start by defining the syntax related to gap blocks.
 We then give some examples of gap blocks.
 And finally, we provide some explanation.
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
gap_block : 
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

GAP
\begin_inset Quotes erd
\end_inset

   
\end_layout

\begin_layout LyX-Code
                  [ marks_declaration ]
\end_layout

\begin_layout LyX-Code
                  [ gap_retrieval ]   
\end_layout

\begin_layout LyX-Code
                  [ blocks ]   
\end_layout

\begin_layout LyX-Code
            
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
opt_gap_block : 
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

GAP?
\begin_inset Quotes erd
\end_inset

   
\end_layout

\begin_layout LyX-Code
                      [ marks_declaration ]
\end_layout

\begin_layout LyX-Code
                      [ gap_retrieval ]   
\end_layout

\begin_layout LyX-Code
                      [ blocks ]  
\end_layout

\begin_layout LyX-Code
                
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
marks_declaration : T_MARKS
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

MARKS
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
gap_retrieval : 
\begin_inset Quotes eld
\end_inset

NORETRIEVE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
              | 
\begin_inset Quotes eld
\end_inset

RETRIEVE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
              | 
\begin_inset Quotes eld
\end_inset

FOCUS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Examples
\end_layout

\begin_layout LyX-Code
1.
 [gap]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

2.
 [gap?]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

3.
 [gap noretrieve]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

4.
 [gap?`yellow focus]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

5.
 [gap`context`red retrieve
\end_layout

\begin_layout LyX-Code
     [Word retrieve
\end_layout

\begin_layout LyX-Code
       psp = particle
\end_layout

\begin_layout LyX-Code
     ]
\end_layout

\begin_layout LyX-Code
   ]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

6.
 [gap`yellow
\end_layout

\begin_layout LyX-Code
   ]
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
There are two differences between the two types of gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 block: One is that the 
\family typewriter
gap_block
\family default
 
\emph on
must
\emph default
 match a gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 in the substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

 for the whole query to match, while the 
\family typewriter
opt_gap_block
\family default
 
\emph on
may
\emph default
 (but need not) match a gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 in the substrate.
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

 The other is that the default retrieval of an opt_gap_block is NORETRIEVE,
 whereas the default retrieval of a gap_block is RETRIEVE.
 Otherwise, they are identical in semantics.
\end_layout

\begin_layout Standard
The retrieval will be dealt with more fully in the next section.
\end_layout

\begin_layout Standard
The inner 
\family typewriter
blocks
\family default
, if present, must match if the gap block is to match.
 When trying to match the inner 
\family typewriter
blocks
\family default
, both the Universe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
universe
\end_layout

\end_inset

 and the Substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

 are set to the monads of the gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

.
 So if the gap matches the monad-stretch 
\begin_inset Formula $[a..b]$
\end_inset

, then both the Universe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
universe
\end_layout

\end_inset

 and the Substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

 for the inner 
\family typewriter
blocks
\family default
 will be this stretch of monads.
\end_layout

\begin_layout Standard
The last point is important in example 5.
 Here the Word which we are looking for inside the gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 will be looked for within the monads which made up the gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
If you want any objects or gaps
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 to be retrieved inside the gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 (as in example 5 above, where we want to retrieve the Word), then the retrieval
 of the gap block must be either 
\begin_inset Quotes eld
\end_inset

retrieve
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

focus
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
You can optionally specify a T_MARKS
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

MARKS
\end_layout

\end_inset

 after the 
\family typewriter
gap
\family default
 or 
\family typewriter
gap?
\family default
 keyword.
 If you do, the MatchedObjects that arise because of this (opt_)gap_block
 will contain the same T_MARKS as you specified here.
 The query-writer can use it to pass information back into the application
 that sits on top of Emdros.
 Emdros does nothing special with the T_MARKS, other than passing it on
 into the sheaf, that is, into the matched_object that arises because of
 the (opt_)gap_block.
 In particular, there is no semantics associated with the marks_declaration.
 See page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "T_MARKS-definition"

\end_inset

 for the formal definition of T_MARKS.
\end_layout

\begin_layout Subsection
Power block
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
power : 
\begin_inset Quotes eld
\end_inset

..
\begin_inset Quotes erd
\end_inset

   [ restrictor ]
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
restrictor : 
\begin_inset Quotes eld
\end_inset

<
\begin_inset Quotes erd
\end_inset

 limit 
\end_layout

\begin_layout LyX-Code
           | 
\begin_inset Quotes eld
\end_inset

<=
\begin_inset Quotes erd
\end_inset

 limit
\end_layout

\begin_layout LyX-Code
           | 
\begin_inset Quotes eld
\end_inset

BETWEEN
\begin_inset Quotes erd
\end_inset

 limit 
\begin_inset Quotes eld
\end_inset

AND
\begin_inset Quotes erd
\end_inset

 limit
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
limit : T_INTEGER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

INTEGER
\end_layout

\end_inset

 /* non-negative integer, may be 0.
 */
\end_layout

\begin_layout LyX-Code
; 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
Examples
\end_layout

\begin_layout LyX-Code
1.
 [Word]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

2.
 [Word psp=article]
\end_layout

\begin_layout LyX-Code
   [Word psp=noun]
\end_layout

\begin_layout LyX-Code
   ..
 <= 5
\end_layout

\begin_layout LyX-Code
   [Word psp=verb]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

3.
 [Phrase phrase_type = NP]
\end_layout

\begin_layout LyX-Code
   ..
\end_layout

\begin_layout LyX-Code
   [Phrase phrase_type = AdvP]
\end_layout

\begin_layout LyX-Code
   ..
 BETWEEN 1 AND 5
\end_layout

\begin_layout LyX-Code
   [Phrase phrase_type = VP]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

4.
 [Chapter
\end_layout

\begin_layout LyX-Code
     topic = "Noun classes in Bantu"
\end_layout

\begin_layout LyX-Code
   ]
\end_layout

\begin_layout LyX-Code
   [Chapter 
\end_layout

\begin_layout LyX-Code
     topic = "Causatives in Setswana"
\end_layout

\begin_layout LyX-Code
   ]
\end_layout

\begin_layout LyX-Code
   ..
\end_layout

\begin_layout LyX-Code
   [Chapter
\end_layout

\begin_layout LyX-Code
     topic = "Verb-forms in Sesotho"
\end_layout

\begin_layout LyX-Code
   ]
\end_layout

\begin_layout Subsubsection
power
\end_layout

\begin_layout Standard
The power block means 
\begin_inset Quotes eld
\end_inset

before the start of the next block, there must come a stretch of monads
 of arbitrary length, which can also be no monads (0 length)
\begin_inset Quotes erd
\end_inset

.
 In its basic form, it is simply two dots, 
\begin_inset Quotes eld
\end_inset


\family typewriter
..
\family default

\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
The stretch of monads is calculated from the monad after the last monad
 of the previous block.
 If the previous block ended at monad 7, then the power block starts counting
 monads from monad 8.
\end_layout

\begin_layout Standard
One can optionally place a 
\family typewriter
restrictor
\family default
 after the two dots, thus making the power block look like this, e.g., 
\begin_inset Quotes eld
\end_inset


\family typewriter
..
 < 5
\family default

\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset


\family typewriter
..
 <= 5
\family default

\begin_inset Quotes erd
\end_inset

, or 
\begin_inset Quotes eld
\end_inset


\family typewriter
..
 BETWEEN 1 AND 5
\family default

\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
The first two kinds of restrictor mean 
\begin_inset Quotes eld
\end_inset

although the stretch of monads is of arbitrary length, the length must be
 less than (or equal to) the number of monads given in the restrictor
\begin_inset Quotes erd
\end_inset

.
 Thus 
\begin_inset Quotes eld
\end_inset


\family typewriter
..
 < 5
\family default

\begin_inset Quotes erd
\end_inset

 means 
\begin_inset Quotes eld
\end_inset

from 0 to 4 monads after the end of the previous block
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset


\family typewriter
..
 <= 5
\family default

\begin_inset Quotes erd
\end_inset

 means 
\begin_inset Quotes eld
\end_inset

from 0 to 5 monads after the end of the previous block
\begin_inset Quotes erd
\end_inset

.
 That is, if the previous block ended at monad 7, then 
\begin_inset Quotes eld
\end_inset


\family typewriter
..
 < 5
\family default

\begin_inset Quotes erd
\end_inset

 means 
\begin_inset Quotes eld
\end_inset

the next block must start within the monads 8 to 12
\begin_inset Quotes erd
\end_inset

, while 
\begin_inset Quotes eld
\end_inset


\family typewriter
..
 <= 5
\family default

\begin_inset Quotes erd
\end_inset

 means 
\begin_inset Quotes eld
\end_inset

the next block must start within the monads 8 to 13
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
Similarly, the third kind, 
\begin_inset Quotes eld
\end_inset


\family typewriter
..
 BETWEEN
\family default
 
\family typewriter
\emph on
min
\family default
\emph default
 
\family typewriter
AND
\family default
 
\family typewriter
\emph on
max
\family default
\emph default

\begin_inset Quotes erd
\end_inset

 means 
\begin_inset Quotes eld
\end_inset

there must be at least 
\family typewriter
\emph on
min
\family default
\emph default
 monads in between, and at most 
\family typewriter
\emph on
max
\family default
\emph default
 monads.
 This is construed as 
\begin_inset Quotes eld
\end_inset


\family typewriter
>=
\family default
 
\family typewriter
\emph on
min
\family default
\emph default
 
\family typewriter
AND <=
\family default
 
\family typewriter
\emph on
max
\family default
\emph default

\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
Retrieval
\begin_inset CommandInset label
LatexCommand label
name "Retrieval"

\end_inset


\end_layout

\begin_layout Subsubsection
Introduction
\end_layout

\begin_layout Standard
Retrieval is used in four places in the MQL grammar.
 Once for each of the two object blocks and once for each of the two gap
 blocks.
 In this section we describe the three kinds of retrieval, specify the default
 behavior, and provide a bit of explanation.
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
retrieval : 
\begin_inset Quotes eld
\end_inset

NORETRIEVE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
          | 
\begin_inset Quotes eld
\end_inset

RETRIEVE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
          | 
\begin_inset Quotes eld
\end_inset

FOCUS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
gap_retrieval : 
\begin_inset Quotes eld
\end_inset

NORETRIEVE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
              | 
\begin_inset Quotes eld
\end_inset

RETRIEVE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
              | 
\begin_inset Quotes eld
\end_inset

FOCUS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Examples
\end_layout

\begin_layout LyX-Code
1.
 [Word focus
\end_layout

\begin_layout LyX-Code
     psp = verb
\end_layout

\begin_layout LyX-Code
   ]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

2.
 [gap? retrieve]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

3.
 [Phrase noretrieve]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

4.
 [gap focus]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

5.
 [Phrase retrieve
\end_layout

\begin_layout LyX-Code
     [Word focus
\end_layout

\begin_layout LyX-Code
       psp = article
\end_layout

\begin_layout LyX-Code
     ]
\end_layout

\begin_layout LyX-Code
     [gap retrieve
\end_layout

\begin_layout LyX-Code
       [Word focus
\end_layout

\begin_layout LyX-Code
         psp=conjunction
\end_layout

\begin_layout LyX-Code
       ]
\end_layout

\begin_layout LyX-Code
     ]
\end_layout

\begin_layout LyX-Code
     [Word focus
\end_layout

\begin_layout LyX-Code
       psp = noun
\end_layout

\begin_layout LyX-Code
     ]
\end_layout

\begin_layout LyX-Code
   ]
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
Retrieval has to do with two domains pertaining to objects and gaps
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

:
\end_layout

\begin_layout Enumerate
Whether to retrieve the objects or gaps
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

, and
\end_layout

\begin_layout Enumerate
Whether those objects or gaps
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 should be in 
\emph on
focus
\emph default
.
\end_layout

\begin_layout Standard
Whether to retrieve is straightforward to understand.
 If we don't retrieve, then the object or gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 doesn't get into the sheaf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sheaf
\end_layout

\end_inset

.
 The sheaf is the data-structure returned by an MQL query.
 The object or gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 (if the gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 is not optional) must still match for the overall match to be successful,
 but the object or gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 won't get into the sheaf if we don't retrieve.
\end_layout

\begin_layout Standard
When an object is in focus, that means your application has the opportunity
 to filter this object out specifically from among all the objects retrieved.
 Exactly how this feature is used (or not used) will depend on your application.
 When is this useful?
\end_layout

\begin_layout Standard
Recall that, for objects in an inner 
\family typewriter
blocks
\family default
 to be retrieved (in an object block or a gap block), the enclosing object
 or gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 must also be retrieved.
 Thus you might end up with objects in the sheaf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sheaf
\end_layout

\end_inset

 which you don't really care about.
 The focus-modifier is a way of signaling special interest in certain objects
 or gaps
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

.
 Thus you can specify exactly which objects should be of special interest
 to the application.
 In example 5 above,
\begin_inset Foot
status open

\begin_layout Plain Layout
This construction actually does occur in at least one language, namely ancient
 Greek.
 It is due to post-positive particles and conjunctions such as 
\begin_inset Quotes eld
\end_inset

de
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

gar
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

men
\begin_inset Quotes erd
\end_inset

, and the like.
\end_layout

\end_inset

 the outer Phrase must be retrieved, because we wish to retrieve the inner
 objects and gaps
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

.
 The inner gap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 must also be retrieved because we wish to retrieve the inner Word.
 The three Words are what we are really interested in, however, so we mark
 their retrieval as 
\begin_inset Quotes eld
\end_inset

focus
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
If we specify 
\begin_inset Quotes eld
\end_inset

focus
\begin_inset Quotes erd
\end_inset

 as the retrieval, then that implies 
\begin_inset Quotes eld
\end_inset

retrieve
\begin_inset Quotes erd
\end_inset

.
 Thus we can't not retrieve an object which is in 
\begin_inset Quotes eld
\end_inset

focus
\begin_inset Quotes erd
\end_inset

.
 This makes sense.
 If you have registered a special interest in an object, that means you
 want to retrieve it as well.
\end_layout

\begin_layout Standard
The default for object blocks of both kinds, when no retrieval is specified,
 is to assume 
\begin_inset Quotes eld
\end_inset

retrieve
\begin_inset Quotes erd
\end_inset

.
 The default for gap blocks of both kinds, on the other hand, is 
\begin_inset Quotes eld
\end_inset

noretrieve
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
First and last
\begin_inset CommandInset label
LatexCommand label
name "First and last"

\end_inset


\end_layout

\begin_layout Subsubsection
Introduction
\end_layout

\begin_layout Standard
The object blocks have the option of specifying whether they should be first
 and/or last in their enclosing 
\family typewriter
blocks
\family default
.
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
firstlast : 
\begin_inset Quotes eld
\end_inset

FIRST
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
          | 
\begin_inset Quotes eld
\end_inset

LAST
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
          | 
\begin_inset Quotes eld
\end_inset

FIRST
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

AND
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

LAST
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Examples
\end_layout

\begin_layout LyX-Code
1.
 [Clause first and last]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

2.
 [Phrase first]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

3.
 [Clause
\end_layout

\begin_layout LyX-Code
     [Phrase first]
\end_layout

\begin_layout LyX-Code
     [Word last
\end_layout

\begin_layout LyX-Code
       psp = verb
\end_layout

\begin_layout LyX-Code
     ]
\end_layout

\begin_layout LyX-Code
   ]
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
In example 1, the clause must be both first and last in its surrounding
 
\family typewriter
blocks
\family default
.
 In the second example, the phrase must merely be the first.
 In the third example, the Phrase must be first in the clause, followed
 by a word, which must be a verb, and which must be last.
 This can be realized, e.g., in verb-final languages.
\end_layout

\begin_layout Standard
What does it mean to be 
\begin_inset Quotes eld
\end_inset

first
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

last
\begin_inset Quotes erd
\end_inset

 in the enclosing 
\family typewriter
blocks
\family default
?
\end_layout

\begin_layout Standard
Again we must appeal to the notion of Universe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
universe
\end_layout

\end_inset

 and Substrate.
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

 Each 
\family typewriter
blocks
\family default
 carries with it a Universe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
universe
\end_layout

\end_inset

 and a Substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

.
 Let us say that an object block must be first, and let us say that we are
 trying to match an object O against this object block.
 Let us call the substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

 of the enclosing blocks 
\begin_inset Quotes eld
\end_inset

Su
\begin_inset Quotes erd
\end_inset

.
 Then, for the object O to be first in the blocks means that O.first = Su.first.
 That is, the first monad of the object must be the same as the first monad
 of the Substrate.
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Conversely, for an object O to be last in a blocks, means that O.last = Su.last.
 That is, the last monad of the object must be the same as the last monad
 of the Substrate.
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Feature constraints
\begin_inset CommandInset label
LatexCommand label
name "Feature specifications"

\end_inset


\end_layout

\begin_layout Subsubsection
Introduction
\end_layout

\begin_layout Standard
Object blocks can optionally have feature constraints.
 The feature constraints are boolean (i.e., logical) expressions whose basic
 boolean building-blocks are 
\begin_inset Quotes eld
\end_inset

and
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

or
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

not
\begin_inset Quotes erd
\end_inset

.
 The things that are related logically are comparisons of features and values,
 i.e., a feature followed by a comparison-symbol (e.g., 
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

), followed by a value.
 Parentheses are allowed to make groupings explicit.
\end_layout

\begin_layout Standard
In the following, we first define the syntax of feature constraints.
 We then make refer to other parts of this manual for details of certain
 non-terminals.
 We then give some examples, followed by explanations of those examples.
 We then give some explanation and elucidation on feature-constraints.
 We then describe the constraints on type-compatibility between the feature
 and the value.
 Finally we elaborate on comparison-operators.
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
feature_constraints  : ffeatures 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
ffeatures : fterm 
\end_layout

\begin_layout LyX-Code
          |  ffeatures   
\begin_inset Quotes eld
\end_inset

OR
\begin_inset Quotes erd
\end_inset

   fterm 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
fterm : ffactor
\end_layout

\begin_layout LyX-Code
      | ffactor   
\begin_inset Quotes eld
\end_inset

AND
\begin_inset Quotes erd
\end_inset

   fterm 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
ffactor : 
\begin_inset Quotes eld
\end_inset

NOT
\begin_inset Quotes erd
\end_inset

   ffactor
\end_layout

\begin_layout LyX-Code
        | 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Quotes erd
\end_inset

   ffeatures   
\begin_inset Quotes eld
\end_inset

)
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
        | feature_comparison 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
feature_comparison : 
\end_layout

\begin_layout LyX-Code
    feature_name  comparison_operator   value
\end_layout

\begin_layout LyX-Code
  | feature_name  
\begin_inset Quotes eld
\end_inset

IN
\begin_inset Quotes erd
\end_inset

   enum_const_set
\end_layout

\begin_layout LyX-Code
  | feature_name  
\begin_inset Quotes eld
\end_inset

IN
\begin_inset Quotes erd
\end_inset

   
\begin_inset Quotes eld
\end_inset

(
\begin_inset Quotes eld
\end_inset

  list_of_integer  
\begin_inset Quotes eld
\end_inset

)
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
  | feature_name  
\begin_inset Quotes eld
\end_inset

IN
\begin_inset Quotes erd
\end_inset

   object_reference_usage
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
comparison_operator : 
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
                    | 
\begin_inset Quotes eld
\end_inset

<
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
                    | 
\begin_inset Quotes eld
\end_inset

>
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
                    | 
\begin_inset Quotes eld
\end_inset

<>
\begin_inset Quotes erd
\end_inset

  /* not equal */
\end_layout

\begin_layout LyX-Code
                    | 
\begin_inset Quotes eld
\end_inset

<=
\begin_inset Quotes erd
\end_inset

  /* less than or equal */
\end_layout

\begin_layout LyX-Code
                    | 
\begin_inset Quotes eld
\end_inset

>=
\begin_inset Quotes erd
\end_inset

  /* greater than or equal */
\end_layout

\begin_layout LyX-Code
                    | 
\begin_inset Quotes eld
\end_inset

~
\begin_inset Quotes erd
\end_inset

   /* regular expression
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
regular expressions!syntax
\end_layout

\end_inset

 */
\end_layout

\begin_layout LyX-Code
                    | 
\begin_inset Quotes eld
\end_inset

!~
\begin_inset Quotes erd
\end_inset

  /* inverted regular expression */
\end_layout

\begin_layout LyX-Code
                    | 
\begin_inset Quotes eld
\end_inset

HAS
\begin_inset Quotes erd
\end_inset

 /* lhs: list; rhs: atomic value.
\end_layout

\begin_layout LyX-Code
                                 signifies list membership.
 */
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
list_of_integer : T_INTEGER  { 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

 T_INTEGER }*
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
value : 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset

enum_const
\end_layout

\begin_layout LyX-Code
      | signed_integer
\end_layout

\begin_layout LyX-Code
      | T_STRING
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

STRING
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
      | object_reference_usage
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset

enum_const : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object_reference_usage : object_reference   
\end_layout

\begin_layout LyX-Code
                         
\begin_inset Quotes eld
\end_inset

.
\begin_inset Quotes erd
\end_inset

   feature_name 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
enum_const_set : 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Quotes eld
\end_inset

 enum_const_list 
\begin_inset Quotes eld
\end_inset

)
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
enum_const_list : enum_const { 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

 enum_const_list }
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
References
\end_layout

\begin_layout Standard
For 
\family typewriter
signed_integer
\family default
, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "CREATE_OBJECT_TYPE"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "CREATE_OBJECT_TYPE"

\end_inset

.
 For object references, see the next section.
 For 
\family typewriter
feature_name
\family default
, see 
\begin_inset CommandInset ref
LatexCommand ref
reference "UPDATE_OBJECT_TYPE"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "UPDATE_OBJECT_TYPE"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Examples
\end_layout

\begin_layout LyX-Code
1.
 [Word psp = noun]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

2.
 [Word gender = neut or gender = fem]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

3.
 [Word psp = adjective and not case = nominative]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

4.
 [Phrase (phrase_type = NP
\end_layout

\begin_layout LyX-Code
            and phrase_determination = indetermined)
\end_layout

\begin_layout LyX-Code
           or phrase_type = AP
\end_layout

\begin_layout LyX-Code
   ]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

5.
 [Word as w
\end_layout

\begin_layout LyX-Code
     psp = article
\end_layout

\begin_layout LyX-Code
   ]
\end_layout

\begin_layout LyX-Code
   [Word
\end_layout

\begin_layout LyX-Code
     psp = noun 
\end_layout

\begin_layout LyX-Code
     and case = w.case
\end_layout

\begin_layout LyX-Code
     and gender = w.gender
\end_layout

\begin_layout LyX-Code
     and number = w.number
\end_layout

\begin_layout LyX-Code
   ]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

6.
 [Word
\end_layout

\begin_layout LyX-Code
     surface > "Aa" and surface  Ìƒ "[A-D]orkin"
\end_layout

\begin_layout LyX-Code
   ]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

7.
 [Word psp IN (verb, participle, infinitive)]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

8.
 [Word psp = verb OR psp = participle OR psp = infinitive]
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
Explanation of Examples
\end_layout

\begin_layout Standard
Example 1 above is the simple case where a feature (
\begin_inset Quotes eld
\end_inset

psp
\begin_inset Quotes erd
\end_inset

) is being tested for equality with a value (
\begin_inset Quotes eld
\end_inset

noun
\begin_inset Quotes erd
\end_inset

).
 Example 2 is more of the same, except the gender can either be neuter or
 feminine, and the feature constraint would match in both cases.
 Example 3 finds those words which are adjectives 
\emph on
and
\emph default
 whose case is 
\emph on
not
\emph default
 nominative.
 Example 4 finds either adjectival phrases or NPs which are indetermined.
 
\end_layout

\begin_layout Standard
Example 5 is an example of usage of object references.
 The first Word is given the 
\begin_inset Quotes eld
\end_inset

label
\begin_inset Quotes erd
\end_inset

 (or 
\begin_inset Quotes eld
\end_inset

object reference
\begin_inset Quotes erd
\end_inset

) 
\begin_inset Quotes eld
\end_inset

w
\begin_inset Quotes erd
\end_inset

.
 Then the second Word's feature-constraints refer to the values of the features
 of the first Word, in this case making sure that case, number, and gender
 are the same.
\end_layout

\begin_layout Standard
Example 6 is an example of two different comparison-operators, 
\begin_inset Quotes eld
\end_inset

greater-than
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

regular expression-match
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
regular expressions!match
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Example 7 shows the comparison IN.
 It takes a comma-separated list of enumeration constant names in parentheses
 as its right-hand-side.
 The effect is the same as an OR-separated list of 
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

 feature-comparisons.
 So 7.
 and 8.
 are equilalent.
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
While the syntax may look daunting to the uninitiated, the system is quite
 straightforward.
 At the bottom, we have feature comparisons.
 These consist of a feature, followed by a comparison-operator (such as
 
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

), followed by a value.
 These feature-comparisons can be joined by the three standard boolean operators
 
\begin_inset Quotes eld
\end_inset

and
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

or
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

not
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
The precedence of the operators follows standard practice, i.e., 
\begin_inset Quotes eld
\end_inset

not
\begin_inset Quotes erd
\end_inset

 has highest precedence, followed by 
\begin_inset Quotes eld
\end_inset

and
\begin_inset Quotes erd
\end_inset

, followed by 
\begin_inset Quotes eld
\end_inset

or
\begin_inset Quotes erd
\end_inset

.
 Parentheses are allowed to make groupings explicit.
 That is, 
\begin_inset Quotes eld
\end_inset

and
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

binds
\begin_inset Quotes erd
\end_inset

 more closely than 
\begin_inset Quotes eld
\end_inset

or
\begin_inset Quotes erd
\end_inset

 so that the interpretation of this expression:
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
f_1 = val_1 
\begin_inset Quotes eld
\end_inset

and
\begin_inset Quotes erd
\end_inset

 f_2 = val_2 
\begin_inset Quotes eld
\end_inset

or
\begin_inset Quotes erd
\end_inset

 f_3 = val_3
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
is the following:
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
(f_1 = val_1 
\begin_inset Quotes eld
\end_inset

and
\begin_inset Quotes erd
\end_inset

 f_2 = val_2) 
\begin_inset Quotes eld
\end_inset

or
\begin_inset Quotes erd
\end_inset

 f_3 = val_3
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
Note that if you use 
\begin_inset Quotes eld
\end_inset

not
\begin_inset Quotes erd
\end_inset

 on a feature comparison, and if you have another feature comparison before
 it, then you must explicitly state whether the relationship between the
 two is 
\begin_inset Quotes eld
\end_inset

and
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

or
\begin_inset Quotes erd
\end_inset

.
 Thus the following is illegal:
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
f_1 = val_1 
\begin_inset Quotes eld
\end_inset

not
\begin_inset Quotes erd
\end_inset

 f_2 = val_2
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
The following, however, would be legal:
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
f_1 = val_1 
\begin_inset Quotes eld
\end_inset

and
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

not
\begin_inset Quotes erd
\end_inset

 f_2 = val_2
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

in
\begin_inset Quotes erd
\end_inset

 comparison-operator can only be used with a comma-separated list of enumeration
 constant names on the right-hand-side.
 The effect is the same as if all of the enumeration constants had been
 compared 
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

 to the feature, with 
\begin_inset Quotes eld
\end_inset

OR
\begin_inset Quotes erd
\end_inset

 between them.
\end_layout

\begin_layout Subsubsection
Type-compatibility
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
types!compatibility|bold
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The feature and the value with which we compare both have a 
\emph on
type
\emph default
.
 The type is, one of 
\begin_inset Quotes eld
\end_inset

integer
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

7-bit (ASCII) string
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

8-bit string
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset

enumeration constant
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

id_d
\begin_inset Quotes erd
\end_inset

.
 Thus a type tells us how to interpret a value.
 
\end_layout

\begin_layout Standard
The types of the two values being compared must be 
\emph on
compatible
\emph default
.
 Table 
\begin_inset CommandInset ref
LatexCommand vref
reference "Table: Type-compatibility-constraints"

\end_inset

 summarizes the type-compatibility-constraints.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Float table
placement htbp
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If value's type is...
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Then feature's type must be...
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset

enumeration constant
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The same enumeration as the value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(enumeration constant-list)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The same enumeration as all the values
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
signed_integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
integer or id_d
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7-bit or 8-bit string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7-bit or 8-bit string
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object reference usage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The same type as the feature in the object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reference usage, or a list of the same type
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Type-compatibility-constraints
\begin_inset CommandInset label
LatexCommand label
name "Table: Type-compatibility-constraints"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 8-bit strings need not be of the same encoding.
\end_layout

\begin_layout Subsubsection
Comparison-operators
\end_layout

\begin_layout Standard
Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "Table: Comparison-operators"

\end_inset

 summarizes the comparison-operators.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement htbp
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
op.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Equality
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Less-than
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Greater-than
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Inequality (different from)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Less-than-or-equal-to
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
>=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Greater-than-or-equal-to
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
 Ìƒ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Regular expression
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
regular expressions!syntax
\end_layout

\end_inset

-match
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
! Ìƒ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Negated regular-expression-match
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Member of a list of 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset

enum constants
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HAS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List on left-hand-side, atomic value on right-hand-side.
 Signifies list membership.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Comparison-operators
\begin_inset CommandInset label
LatexCommand label
name "Table: Comparison-operators"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Inequality
\end_layout

\begin_layout Standard
The inequality-operator 
\begin_inset Quotes eld
\end_inset

<>
\begin_inset Quotes erd
\end_inset

 is logically equivalent to 
\begin_inset Quotes eld
\end_inset

not ...
 = ...
\begin_inset Quotes erd
\end_inset

.
 The negated regular-expression
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
regular expressions!syntax
\end_layout

\end_inset

-match 
\begin_inset Quotes eld
\end_inset

! Ìƒ
\begin_inset Quotes erd
\end_inset

 is logically equivalent to 
\begin_inset Quotes eld
\end_inset

not ...
  Ìƒ ...
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Paragraph
Equality
\end_layout

\begin_layout Standard
Equality is defined as follows: If the type is id_d, then both must be the
 same id_d.
 If the type is integer, then both must be the same number.
 If the type is string, then both must be byte-for-byte identical, and of
 the same length.
 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant!equality
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant!querying
\end_layout

\end_inset

If the type is 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration
\end_layout

\end_inset

enumeration, then both must have the same numerical value.
 That is, the 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset

enumeration constants must be the same, since an enumeration is a one-to-one
 correspondence between a set of labels and a set of values.
 If the type is a list, the two lists must be identical, i.e., consist of
 the same sequence of values.
\end_layout

\begin_layout Paragraph
Less-than/greater-than
\end_layout

\begin_layout Standard
The four less-than/greater-than-operators use 8-bit scalar values for the
 comparison of strings.
 That is, it is the numerical value of the bytes in the strings that determine
 the comparison.
 In particular, the locale is not taken into consideration.
 For comparison of id_ds, the id_ds are treated as ordinary numbers, with
 nil being lower than everything else.
 For comparison of integers, the usual rules apply.
 For comparison of 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant!comparison
\end_layout

\end_inset

enumeration constants, it is the values of the enumeration constants that
 are compared, as integers.
\end_layout

\begin_layout Paragraph
Regular expressions
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
regular expressions|bold
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "par:Regular-expressions"

\end_inset


\end_layout

\begin_layout Standard
There are two regular expression-comparison-operators (
\begin_inset Quotes eld
\end_inset

 Ìƒ
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

! Ìƒ
\begin_inset Quotes erd
\end_inset

).
 They operate on 8-bit strings.
 That is, both the feature-type and the value against which the match is
 made must be 8-bit strings.
 The negated match matches everything that does not match the regular expression
 provided as the value.
\end_layout

\begin_layout Standard
The value that they are matched against must be a string.
\end_layout

\begin_layout Standard
The regular expressions are the same as in Perl 5
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Perl 5
\end_layout

\end_inset

.
 See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "PCRE"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "PCRE"

\end_inset

 for details of where regular expression-support comes from.
 See 
\family typewriter
http://www.perl.com/
\family default
 for details of Perl regular expressions.
\end_layout

\begin_layout Standard
Before version 1.2.0.pre46, regular expressions were anchored, meaning that
 they always started matching at the start of the string.
 As of 1.2.0.pre46, regular expressions are not anchored, meaning that they
 can start their match anywhere in the string.
\end_layout

\begin_layout Paragraph
IN
\end_layout

\begin_layout Standard
The IN comparison operator must have:
\end_layout

\begin_layout Enumerate
either an 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration
\end_layout

\end_inset

enumeration feature on the left hand side and a comma-separated list of
 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset

enumeration constants in parentheses on the right-hand-side (or an object
 refence usage resolving to a list-of-enum-constants of the same type),
\end_layout

\begin_layout Enumerate
or an INTEGER feature on the left hand side, and a list of integers on the
 right-hand-side (or an object reference usage resolving to this),
\end_layout

\begin_layout Enumerate
or an ID_D feature on the left hand side, and a list of integers on the
 right-hand-side (or an object reference usage resolving to a list of ID_Ds).
\end_layout

\begin_layout Standard
For the first case, all of the 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration!constant
\end_layout

\end_inset

enumeration constants must belong to the 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration
\end_layout

\end_inset

enumeration of the feature.
 The meaning is 
\begin_inset Quotes eld
\end_inset

feature must be in this list
\begin_inset Quotes erd
\end_inset

, and is equivalent to a string of 
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

 comparisons with 
\begin_inset Quotes eld
\end_inset

OR
\begin_inset Quotes erd
\end_inset

 in between, and with parentheses around the string of OR-separated comparisons.
\end_layout

\begin_layout Standard
For the second and third cases, the meaning is the same, but applied to
 integers and id_ds respectively.
\end_layout

\begin_layout Paragraph
HAS
\end_layout

\begin_layout Standard
The HAS comparison operator must have:
\end_layout

\begin_layout Enumerate
Either a list-of-
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
enumeration
\end_layout

\end_inset

enumeration constant on the left hand side and an enumeration constant belonging
 to the same enumeration on the left hand side (or an object reference usage
 resolving to this),
\end_layout

\begin_layout Enumerate
or a list-of-INTEGER feature on the left hand side, and an atomic integer
 value the right-hand-side (or an object reference usage resolving to this),
\end_layout

\begin_layout Enumerate
or a list-of-ID_D feature on the left hand side, and an atomic id_d value
 on the right-hand-side (or an object reference usage resolving to this).
\end_layout

\begin_layout Standard
This signifies list-membership of the right-hand-side in the list on the
 left-hand-side.
\end_layout

\begin_layout Subsection
Object references
\begin_inset CommandInset label
LatexCommand label
name "Object references"

\end_inset


\end_layout

\begin_layout Subsubsection
Introduction
\end_layout

\begin_layout Standard
Object references are a way of referring to objects in a query outside of
 the object block which they matched.
 This provides the possibility of matching objects on the basis of the features
 of other objects earlier in the query.
\end_layout

\begin_layout Standard
In this subsection, we first give the syntax of object references, their
 declaration and their usage.
 We then provide some examples, followed by an explanation of those examples.
 We then give some explanation of object references.
 Finally, we document some constraints that exist on object references.
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
object_reference_declaration : 
\begin_inset Quotes eld
\end_inset

AS
\begin_inset Quotes erd
\end_inset

 object_reference 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object_reference : T_IDENTIFIER 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object_reference_usage : object_reference   
\end_layout

\begin_layout LyX-Code
                         
\begin_inset Quotes eld
\end_inset

.
\begin_inset Quotes erd
\end_inset

   feature_name 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
feature_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Examples
\end_layout

\begin_layout LyX-Code
1.
 [Clause
\end_layout

\begin_layout LyX-Code
     [Phrase as p
\end_layout

\begin_layout LyX-Code
       phrase = NP
\end_layout

\begin_layout LyX-Code
     ]
\end_layout

\begin_layout LyX-Code
     ..
\end_layout

\begin_layout LyX-Code
     [Phrase
\end_layout

\begin_layout LyX-Code
       phrase = AP 
\end_layout

\begin_layout LyX-Code
       and case = p.case 
\end_layout

\begin_layout LyX-Code
       and number = p.number
\end_layout

\begin_layout LyX-Code
       and gender = p.gender
\end_layout

\begin_layout LyX-Code
     ]
\end_layout

\begin_layout LyX-Code
   ]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

2.
 [Clause as C
\end_layout

\begin_layout LyX-Code
     [Phrase
\end_layout

\begin_layout LyX-Code
       phrase_type = NP
\end_layout

\begin_layout LyX-Code
       parent = C.self
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
self!example using
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
     ]
\end_layout

\begin_layout LyX-Code
   ]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

3.
 [Sentence as S]
\end_layout

\begin_layout LyX-Code
   ..
\end_layout

\begin_layout LyX-Code
   [Sentence 
\end_layout

\begin_layout LyX-Code
     head = S.self
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
self!example using
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
   ]
\end_layout

\begin_layout Subsubsection
Explanation of examples
\end_layout

\begin_layout Standard
Example 1 finds, within a clause, first an NP, followed by an arbitrary
 stretch of text, followed by an AP.
 The AP's case, number, and gender-features must be the same as the NP's
 case, number, and gender-features respectively.
\end_layout

\begin_layout Standard
Example 2 finds a clause, and within the clause an NP which is a direct
 constituent of the clause.
 That is, its parent feature is an id_d which points to its parent in the
 tree.
 This id_d must be the same as the clause's 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Quotes erd
\end_inset

 feature.
 See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "self"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "self"

\end_inset

 for more information about the 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Quotes erd
\end_inset

 feature.
\end_layout

\begin_layout Standard
Example 3 finds a sentence and calls it S.
 Then follows an arbitrary stretch of text.
 Then follows another sentence whose head feature is an id_d which points
 to the first sentence.
 That is, the second sentence is dependent upon the first sentence.
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
The 
\family typewriter
object_reference_declaration
\family default
 non-terminal is invoked from the object blocks, right after the object
 type name.
 That is, the 
\family typewriter
object_reference_declaration
\family default
 must be the first item after the object type name, if it is to be there
 at all, as in all of the examples above.
 The object reference declaration says that the object that matched this
 object block must be called whatever the 
\family typewriter
object_reference
\family default
 is (e.g., 
\begin_inset Quotes eld
\end_inset

p
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

C
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

S
\begin_inset Quotes erd
\end_inset

 in the examples above).
 Then object blocks later in the query can refer to this object's features
 on the right-hand-side of feature comparisons.
 See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "Feature specifications"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "Feature specifications"

\end_inset

 for details of feature-comparisons.
\end_layout

\begin_layout Standard
The 
\family typewriter
object_reference_usage
\family default
 non-terminal shows up on the right-hand-side of feature comparisons, as
 in the examples above.
 It consists of an object reference followed by a dot followed by a feature
 name.
\end_layout

\begin_layout Subsubsection
Constraints on object references
\end_layout

\begin_layout Standard
The following are the constraints on object references:
\end_layout

\begin_layout Itemize
Object references must be declared before they can be used.
 That is, they must appear earlier in the query (i.e., further towards the
 top) in an
\family typewriter
 object_reference_declaration
\family default
.
\end_layout

\begin_layout Itemize
The feature name on an object reference usage must be a feature of the object
 type of the object that had the corresponding object reference declaration.
\end_layout

\begin_layout Itemize
The feature type of the object reference usage must be the same as the feature
 type of the feature with which it is compared (not just compatible with).
\end_layout

\begin_layout Itemize
An object reference must only be declared once in a query.
 That is, no two object references must have the same name.
\end_layout

\begin_layout Itemize
A 
\begin_inset Quotes eld
\end_inset

Kleene Star
\begin_inset Quotes erd
\end_inset

 construct (see Section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Block:KleeneStar(*)"

\end_inset

) acts as an 
\begin_inset Quotes eld
\end_inset

export barrier
\begin_inset Quotes erd
\end_inset

 upwards in the tree for object reference declarations.
 Thus any object reference usages which are separated from the object reference
 declaration by a Kleene Star cannot be 
\begin_inset Quotes eld
\end_inset

seen
\begin_inset Quotes erd
\end_inset

.
 For example, this is not allowed:
\end_layout

\begin_layout LyX-Code
[Clause
\end_layout

\begin_layout LyX-Code
   [Phrase
\end_layout

\begin_layout LyX-Code
      [Word as w1]
\end_layout

\begin_layout LyX-Code
   ]* // Kleene Star acts as an export barrier!
\end_layout

\begin_layout LyX-Code
   [Word surface=w1.surface] // So we can't see the declaration here...
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Itemize
You also cannot have an object reference declaration on an object block
 that itself bears the Kleene Star.
 Thus this is not allowed:
\end_layout

\begin_layout LyX-Code
[Clause
\end_layout

\begin_layout LyX-Code
   [Phrase as p1]* // This is NOT allowed!
\end_layout

\begin_layout LyX-Code
   [Phrase function=p1.function]
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout Itemize
It is not allowed to have an object reference declaration that is used 
\begin_inset Quotes eld
\end_inset

above
\begin_inset Quotes erd
\end_inset

 an OR.
 That is, all object reference declarations and usages should be within
 the same block_string2 (see Section 
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:block_string"

\end_inset

 and Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "Block strings: block_str's"

\end_inset

).
 
\begin_inset Quotes eld
\end_inset

OR
\begin_inset Quotes erd
\end_inset

 acts as an 
\begin_inset Quotes eld
\end_inset

export barrier
\begin_inset Quotes erd
\end_inset

 on object reference declarations, not allowing them to be 
\begin_inset Quotes eld
\end_inset

seen
\begin_inset Quotes erd
\end_inset

 beyond the 
\begin_inset Quotes eld
\end_inset

OR
\begin_inset Quotes erd
\end_inset

.
 Thus this is 
\emph on
not
\emph default
 allowed: 
\end_layout

\begin_layout LyX-Code
[Phrase as p1]
\end_layout

\begin_layout LyX-Code
OR
\end_layout

\begin_layout LyX-Code
[Phrase function=p1.function] // Oops! Can't see declaration from here!
\end_layout

\begin_layout LyX-Code
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\family roman
Whereas this
\family default
 
\family roman
\emph on
is
\family default
\emph default
 
\family roman
allowed:
\end_layout

\end_deeper
\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
[Phrase as p1 
\end_layout

\begin_layout LyX-Code
   [Phrase function=p1.function] // This is OK
\end_layout

\begin_layout LyX-Code
   OR
\end_layout

\begin_layout LyX-Code
   [Phrase function<>p1.function] // This is also OK
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout LyX-Code
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\family roman
The reason the second is allowed but the first is not is that it is the
 object reference
\family default
 
\family roman
\emph on
declaration
\family default
\emph default
 
\family roman
which is under embargo above (not below) an OR, whereas the object reference
\family default
 
\family roman
\emph on
usage
\family default
\emph default
 
\family roman
is free to see an object reference
\family default
 
\family roman
\emph on
declaration
\family default
\emph default
 
\family roman
that has been declared above an OR.
\end_layout

\end_deeper
\begin_layout Subsection
Block
\begin_inset CommandInset label
LatexCommand label
name "Blocks: block"

\end_inset


\end_layout

\begin_layout Subsubsection
Introduction
\end_layout

\begin_layout Standard
The non-terminal 
\family typewriter
block
\family default
 is a choice between three kinds of block: 
\family typewriter
opt_gap_block
\family default
s, 
\family typewriter
gap_block
\family default
s, and 
\family typewriter
object_block
\family default
s.
 It is used in the grammar of MQL queries in the definition of 
\family typewriter
block_string
\family default
s, that is, in when defining strings of blocks.
 See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "Block strings: block_str's"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "Block strings: block_str's"

\end_inset

 for more information on 
\family typewriter
block_string
\family default
s.
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
block : opt_gap_block 
\end_layout

\begin_layout LyX-Code
      | gap_block 
\end_layout

\begin_layout LyX-Code
      | power
\end_layout

\begin_layout LyX-Code
      | object_block
\end_layout

\begin_layout LyX-Code
      | (
\begin_inset Quotes eld
\end_inset

NOTEXIST
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

NOTEXISTS
\begin_inset Quotes erd
\end_inset

) object_block
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Section
Strings of blocks
\begin_inset CommandInset label
LatexCommand label
name "sec:Strings-of-blocks"

\end_inset


\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
Having now described all the syntax and semantics of individual blocks,
 we now go on to giving the bigger picture of MQL queries.
 This section describes strings of blocks, as well as the higher-level non-termi
nals in the MQL query-query subset.
\end_layout

\begin_layout Standard
We first describe the 
\family typewriter
topograph
\family default
, the top-level entry-point into the MQL query-query grammar (
\begin_inset CommandInset ref
LatexCommand ref
reference "topograph"

\end_inset

).
 We then describe the 
\family typewriter
blocks
\family default
 non-terminal, which shows up inside each of the three kinds of blocks as
 an inner 
\family typewriter
blocks
\family default
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "Block strings: blocks"

\end_inset

).
 We then describe the 
\family typewriter
block_str
\family default
 non-terminal, which provides for strings of blocks optionally connected
 by power blocks (the 
\begin_inset Quotes eld
\end_inset


\family typewriter
..
\family default

\begin_inset Quotes erd
\end_inset

 blocks which have been exemplified previously, and which mean 
\begin_inset Quotes eld
\end_inset

an arbitrary stretch of space
\begin_inset Quotes erd
\end_inset

) (
\begin_inset CommandInset ref
LatexCommand ref
reference "Block strings: block_str's"

\end_inset

).
\end_layout

\begin_layout Subsection
topograph
\begin_inset CommandInset label
LatexCommand label
name "topograph"

\end_inset


\end_layout

\begin_layout Subsubsection
Introduction
\end_layout

\begin_layout Standard
The 
\family typewriter
topograph
\family default
 non-terminal is the entry-point for the MQL query-query subset.
\begin_inset Foot
status open

\begin_layout Plain Layout
Even though 
\family typewriter
mql_query
\family default
 is really the proper entry-point for an MQL query-query, we may consider
 the topograph to be the top-level syntactic non-terminal in the MQL query-subse
t.
 The topograph has historical primacy, since it was defined first in Doedens
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Doedens, Crist-Jan
\end_layout

\end_inset

' QL (see 
\begin_inset CommandInset citation
LatexCommand cite
key "Doedens94"
literal "true"

\end_inset

).
 The 
\family typewriter
mql_query
\family default
 non-terminal simply acts as a proxy, passing control to the topograph immediate
ly.
\end_layout

\end_inset

 It simply consists of a 
\family typewriter
blocks
\family default
 non-terminal.
 The topograph passes on a Universe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
universe
\end_layout

\end_inset

 and a Substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

 to the 
\family typewriter
blocks
\family default
 non-terminal, and these will be described below.
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
topograph : blocks 
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsubsection
Examples
\end_layout

\begin_layout LyX-Code
1.
 [Word]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

2.
 [Word psp=article]
\end_layout

\begin_layout LyX-Code
   [Word psp=noun]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

3.
 [Clause
\end_layout

\begin_layout LyX-Code
     [Phrase phrase_type = NP]
\end_layout

\begin_layout LyX-Code
     ..
\end_layout

\begin_layout LyX-Code
     [Phrase phrase_type = VP]
\end_layout

\begin_layout LyX-Code
   ]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

4.
 [Book
\end_layout

\begin_layout LyX-Code
     title = "Moby Dick"
\end_layout

\begin_layout LyX-Code
     [Chapter chapter_no = 3
\end_layout

\begin_layout LyX-Code
       [Paragraph
\end_layout

\begin_layout LyX-Code
         [Word surface = "Ishmael"]
\end_layout

\begin_layout LyX-Code
       ]
\end_layout

\begin_layout LyX-Code
       ..
\end_layout

\begin_layout LyX-Code
       [Paragraph
\end_layout

\begin_layout LyX-Code
         [Word surface = "whaling"]
\end_layout

\begin_layout LyX-Code
       ]
\end_layout

\begin_layout LyX-Code
     ]
\end_layout

\begin_layout LyX-Code
   ]
\end_layout

\begin_layout Subsubsection
Explanation of examples
\end_layout

\begin_layout Standard
Example 1 simply finds all words within the topograph's Universe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
universe
\end_layout

\end_inset

 and Substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Example 2 finds all pairs of adjacent words in which the first word is an
 article and the second word is a noun, within the topograph's Universe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
universe
\end_layout

\end_inset

 and Substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Example 3 finds all clauses within which there are pairs of first an NP,
 followed by an arbitrary stretch of monads, then a VP.
 Within the topograph's Universe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
universe
\end_layout

\end_inset

 and Substrate,
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset

 of course.
\end_layout

\begin_layout Standard
Example 4 finds a book whose title is 
\begin_inset Quotes eld
\end_inset

Moby Dick
\begin_inset Quotes erd
\end_inset

, and within the book it finds chapter 3, and within this chapter it finds
 a Paragraph within which there is a word whose surface is 
\begin_inset Quotes eld
\end_inset

Ishmael
\begin_inset Quotes erd
\end_inset

.
 Then, still within the chapter, after an arbitrary stretch of monads, it
 finds a Paragraph within which there is a word whose surface is 
\begin_inset Quotes eld
\end_inset

whaling
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Universe and Substrate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substrate
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
universe
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In order to understand how the Universe and Substrate are calculated, it
 is necessary to refer back to the definition of the SELECT OBJECTS query.
 Please consult section 
\begin_inset CommandInset ref
LatexCommand ref
reference "SELECT OBJECTS: Explanation"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "SELECT OBJECTS: Explanation"

\end_inset

 for details.
\end_layout

\begin_layout Subsection
blocks
\begin_inset CommandInset label
LatexCommand label
name "Block strings: blocks"

\end_inset


\end_layout

\begin_layout Subsubsection
Introduction
\end_layout

\begin_layout Standard
The 
\family typewriter
blocks
\family default
 non-terminal is central in the MQL query-query subset.
 It shows up in five places:
\end_layout

\begin_layout Itemize
In the 
\family typewriter
topograph
\family default
,
\end_layout

\begin_layout Itemize
Inside the 
\family typewriter
object_block
\family default
 as the inner 
\family typewriter
blocks
\family default
,
\end_layout

\begin_layout Itemize
Inside the 
\family typewriter
gap_block
\family default
 and the 
\family typewriter
opt_gap_block
\family default
 as the inner 
\family typewriter
blocks
\family default
.
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
blocks : block_string
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Subsection
block_string
\begin_inset CommandInset label
LatexCommand label
name "subsec:block_string"

\end_inset


\end_layout

\begin_layout Subsubsection
Introduction
\end_layout

\begin_layout Standard
A 
\begin_inset Quotes eld
\end_inset

block_string
\begin_inset Quotes erd
\end_inset

 is basically either a 
\begin_inset Quotes eld
\end_inset

block_string2
\begin_inset Quotes erd
\end_inset

 or it is a block_string2 followed by the keyword 
\begin_inset Quotes eld
\end_inset

OR
\begin_inset Quotes erd
\end_inset

 followed by another block_string.
 Or, put another way, a block_string is a string (possibly 1 long) or block_stri
ng2's, separated by 
\begin_inset Quotes eld
\end_inset

OR
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Syntax
\end_layout

\begin_layout LyX-Code
block_string : block_string2 
\end_layout

\begin_layout LyX-Code
             | block_string2 
\begin_inset Quotes eld
\end_inset

OR
\begin_inset Quotes erd
\end_inset

 block_string
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
block_string2 : block_string1
\end_layout

\begin_layout LyX-Code
              | block_string1 block_string2
\end_layout

\begin_layout LyX-Code
              | block_string1 
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset

 block_string2
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
block_string1 : block_string0
\end_layout

\begin_layout LyX-Code
              | block_string0 
\begin_inset Quotes eld
\end_inset

*
\begin_inset Quotes erd
\end_inset

 [monad_set]
\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
block_string0 : block
\end_layout

\begin_layout LyX-Code
              | 
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes eld
\end_inset

 block_string 
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
Examples
\end_layout

\begin_layout LyX-Code
1.
 [Clause
\end_layout

\begin_layout LyX-Code
      [Phrase function = Predicate]  // This...
\end_layout

\begin_layout LyX-Code
      [Phrase function = Objc]       // ...
 is a block_string2
\end_layout

\begin_layout LyX-Code
      OR
\end_layout

\begin_layout LyX-Code
      [Phrase function = Predicate]  // And this...
\end_layout

\begin_layout LyX-Code
      [Phrase function = Complement] // is another block_string2
\end_layout

\begin_layout LyX-Code
   ]
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
2.
 [Sentence
\end_layout

\begin_layout LyX-Code
      [gap [Clause function = relative] // This is a block_string2
\end_layout

\begin_layout LyX-Code
      OR
\end_layout

\begin_layout LyX-Code
      [Clause AS c1 function = Subject] // And this...
\end_layout

\begin_layout LyX-Code
      ..
                                // ...
 is also ...
\end_layout

\begin_layout LyX-Code
      [Clause daughter = c1.self]       // ...
 a block_string2
\end_layout

\begin_layout LyX-Code
   ]
\end_layout

\begin_layout Subsubsection
Explanation
\end_layout

\begin_layout Standard
Block_strings are recursive in that the lowest level (Block_string0) can
 be either a Block, or a full BlockString in [square brackets].
\end_layout

\begin_layout Standard
Notice that Kleene Star (*) binds more tightly than concatenation.
 Thus if you wish to use Kleene Star with more than one block, you must
 wrap those blocks in a [square bracket group].
\end_layout

\begin_layout Standard
Notice also that OR binds less tightly than concatenation.
 Thus OR works between strings of blocks.
\end_layout

\begin_layout Standard
The first example finds all clauses in which it is either the case that
 there exist two phrases inside the clause where the first is a predicate
 and right next to it is an object, or the first is a predicate and right
 next to it is a complement (or both might be true, in which case you'll
 get two straws inside the inner sheaf of the clause).
\end_layout

\begin_layout Standard
The second example finds all clauses in which it is the case that there
 either is a gap with a relative clause inside it, or there are two clauses
 (possibly separated) where the first clause is a subject in the second.
 (This assumes a data model where mother clauses do not include the monads
 of their daughter clauses).
\end_layout

\begin_layout Standard
See Section 
\begin_inset CommandInset ref
LatexCommand vref
reference "Object references"

\end_inset

 for some restrictions on object references regarding OR.
\end_layout

\begin_layout Subsubsection
The 
\begin_inset Quotes eld
\end_inset

*
\begin_inset Quotes erd
\end_inset

 construct
\begin_inset CommandInset label
LatexCommand label
name "subsec:Block:KleeneStar(*)"

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

*
\begin_inset Quotes erd
\end_inset

 construct is a so-called 
\begin_inset Quotes eld
\end_inset

Kleene Star
\begin_inset Quotes erd
\end_inset

.
 It allows searching for object blocks or groups that are repeated.
 It has two forms: One with and one without a trailing set of integers (with
 the same syntax as a set of monads).
 For example:
\end_layout

\begin_layout LyX-Code
SELECT ALL OBJECTS 
\end_layout

\begin_layout LyX-Code
WHERE
\end_layout

\begin_layout LyX-Code
[Sentence 
\end_layout

\begin_layout LyX-Code
  [Phrase FIRST phrase_type = NP] 
\end_layout

\begin_layout LyX-Code
  [Phrase phrase_type IN (VP, NP, AP)]* 
\end_layout

\begin_layout LyX-Code
  [Phrase function = adjunct]* {1-3} 
\end_layout

\begin_layout LyX-Code
] 
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Standard
This finds sentences whose first phrase is an NP, followed by arbitrarily
 many phrases which can either be VPs, NPs, or APs (or any combination of
 those), followed by between 1 and 3 phrases whose function is adjunct.
\end_layout

\begin_layout Standard
A less contrived example:
\end_layout

\begin_layout LyX-Code
SELECT ALL OBJECTS
\end_layout

\begin_layout LyX-Code
WHERE 
\end_layout

\begin_layout LyX-Code
[Sentence 
\end_layout

\begin_layout LyX-Code
  [Word psp=verb] 
\end_layout

\begin_layout LyX-Code
  [Word psp=article or psp=noun 
\end_layout

\begin_layout LyX-Code
        or psp=adjective or psp=conjunction]*{1-5} 
\end_layout

\begin_layout LyX-Code
] 
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Standard
This finds sentences where there exists a word whose part of speech is verb,
 followed by 1 to 5 words whose parts of speech may be article, noun, adjective,
 or conjunction (or any combination of those).
 Presumably this would (in English) be a VP with (parts of) the object NP
 after the verb.
\end_layout

\begin_layout Standard
The Kleene-Star without a trailing set of integers means "from 0 to MAX_MONADS".
 Note, however, that there is no performance penalty involved in such a
 large end: The algorithm stops looking when getting getting one more fails.
\end_layout

\begin_layout Standard
If 0 is in the set of integers, then this means that the object need not
 be there.
 This means that the following:
\end_layout

\begin_layout LyX-Code
SELECT ALL OBJECTS 
\end_layout

\begin_layout LyX-Code
WHERE 
\end_layout

\begin_layout LyX-Code
[Sentence 
\end_layout

\begin_layout LyX-Code
  [Word psp=verb] 
\end_layout

\begin_layout LyX-Code
  [Word psp=article]*{0-1} 
\end_layout

\begin_layout LyX-Code
  [Word psp=noun] 
\end_layout

\begin_layout LyX-Code
] 
\end_layout

\begin_layout LyX-Code
GO
\end_layout

\begin_layout Standard
would find sentences where there exists a verb followed by 0 or 1 articles
 followed by a noun.
 Thus the case of "verb immediately followed by noun" would also be found
 by this query.
 Thus the "*{0-1}" is equivalent to "?" in regular expressions.
\end_layout

\begin_layout Standard
The set of integers has the same syntax as monad sets.
 Therefore, to obtain a 
\begin_inset Quotes eld
\end_inset

no upper bound
\begin_inset Quotes erd
\end_inset

 star-construct, use {<lower-bound>-}, e.g., {10-} to mean 
\begin_inset Quotes eld
\end_inset

from 10 times to (practically) infinitely many times.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
The following restrictions apply:
\end_layout

\begin_layout Itemize
You cannot have a Kleene Star on an object block which also has the 
\family typewriter
NOTEXIST
\family default
 keyword in front.
\end_layout

\begin_layout Itemize
You cannot have a Kleene Star on an object block which has the 
\family typewriter

\begin_inset Quotes eld
\end_inset

noretrieve
\family default
'' keyword.
 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
The bang (
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Standard
You can optionally place a bang (
\begin_inset Quotes eld
\end_inset


\family typewriter
!
\family default

\begin_inset Quotes erd
\end_inset

) between any of the 
\family typewriter
block
\family default
s in a 
\family typewriter
block_string2
\family default
.
 The bang indicates that there must be no gaps
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 between the two blocks.
 It is an implicit rule of MQL that there is a hidden 
\family typewriter
opt_gap_block
\family default
 between each pair of 
\family typewriter
block
\family default
s in a 
\family typewriter
block_string
\family default
 which are not mediated by a bang.
 
\end_layout

\begin_layout Standard
The reason for having the 
\family typewriter
opt_gap_block
\family default
 is the following: It protects you from what you do not know.
 In some languages, there can be gaps
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

 in clauses because of post-positive conjunctions 
\begin_inset Quotes eld
\end_inset

sticking out
\begin_inset Quotes erd
\end_inset

 at a higher level.
 One would not wish to have to specify all the time that one wanted to look
 for gaps
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gaps
\end_layout

\end_inset

, for one would invariably forget it sometimes, thus not getting all the
 results available.
 Thus MQL inserts an 
\family typewriter
opt_gap_block
\family default
 between each pair of blocks that are not mediated by a bang.
 The bang is a way of specifying that one does not wish the hidden 
\family typewriter
opt_gap_block
\family default
 to be inserted.
\end_layout

\begin_layout Standard
The 
\family typewriter
opt_gap_block
\family default
 that is inserted is not retrieved.
\end_layout

\begin_layout Chapter
\start_of_appendix
Copying
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Emdros is covered by two different licenses, both of which allow you freely
 to copy, use, and modify the sourcecode.
 The parts which were written by Ulrik Petersen are covered by the GNU GPL
 version 2.
 The pcre library, which provides regular expressions-capabilities, is covered
 by a different license.
 Some parts were contributed by Claus TÃ¸ndering, Kirk E.
 Lowery, Martin Petersen, or Chris Wilson; they are Copyright Sandborg-Petersen
 Holding ApS, and are also under the GNU GPL version 2.
\end_layout

\begin_layout Standard
SQLite is in the Public Domain.
 See 
\family typewriter
www.sqlite.org
\family default
 for details.
\end_layout

\begin_layout Standard
All Emdros documentation (including this document) is covered under the
 Creative Commons Attribution-Sharealike International license version 4.0.
 Please see this web page for more information on this license:
\begin_inset Newline newline
\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
https://creativecommons.org/licenses/by-sa/4.0/
\end_layout

\begin_layout Section
GNU General Public License
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Emdros!license
\end_layout

\end_inset


\end_layout

\begin_layout Standard
General Public License (GPL)
\end_layout

\begin_layout LyX-Code
                    GNU GENERAL PUBLIC LICENSE
\end_layout

\begin_layout LyX-Code
                       Version 2, June 1991
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
 Copyright (C) 1989, 1991 Free Software Foundation, Inc.
\end_layout

\begin_layout LyX-Code
     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
\end_layout

\begin_layout LyX-Code
 Everyone is permitted to copy and distribute verbatim copies
\end_layout

\begin_layout LyX-Code
 of this license document, but changing it is not allowed.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
                            Preamble
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  The licenses for most software are designed to take away your
\end_layout

\begin_layout LyX-Code
freedom to share and change it.
  By contrast, the GNU General Public
\end_layout

\begin_layout LyX-Code
License is intended to guarantee your freedom to share and change free
\end_layout

\begin_layout LyX-Code
software--to make sure the software is free for all its users.
  This
\end_layout

\begin_layout LyX-Code
General Public License applies to most of the Free Software
\end_layout

\begin_layout LyX-Code
Foundation's software and to any other program whose authors commit to
\end_layout

\begin_layout LyX-Code
using it.
  (Some other Free Software Foundation software is covered by
\end_layout

\begin_layout LyX-Code
the GNU Library General Public License instead.)  You can apply it to
\end_layout

\begin_layout LyX-Code
your programs, too.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  When we speak of free software, we are referring to freedom, not
\end_layout

\begin_layout LyX-Code
price.
  Our General Public Licenses are designed to make sure that you
\end_layout

\begin_layout LyX-Code
have the freedom to distribute copies of free software (and charge for
\end_layout

\begin_layout LyX-Code
this service if you wish), that you receive source code or can get it
\end_layout

\begin_layout LyX-Code
if you want it, that you can change the software or use pieces of it
\end_layout

\begin_layout LyX-Code
in new free programs; and that you know you can do these things.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  To protect your rights, we need to make restrictions that forbid
\end_layout

\begin_layout LyX-Code
anyone to deny you these rights or to ask you to surrender the rights.
\end_layout

\begin_layout LyX-Code
These restrictions translate to certain responsibilities for you if you
\end_layout

\begin_layout LyX-Code
distribute copies of the software, or if you modify it.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  For example, if you distribute copies of such a program, whether
\end_layout

\begin_layout LyX-Code
gratis or for a fee, you must give the recipients all the rights that
\end_layout

\begin_layout LyX-Code
you have.
  You must make sure that they, too, receive or can get the
\end_layout

\begin_layout LyX-Code
source code.
  And you must show them these terms so they know their
\end_layout

\begin_layout LyX-Code
rights.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  We protect your rights with two steps: (1) copyright the software, and
\end_layout

\begin_layout LyX-Code
(2) offer you this license which gives you legal permission to copy,
\end_layout

\begin_layout LyX-Code
distribute and/or modify the software.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  Also, for each author's protection and ours, we want to make certain
\end_layout

\begin_layout LyX-Code
that everyone understands that there is no warranty for this free
\end_layout

\begin_layout LyX-Code
software.
  If the software is modified by someone else and passed on, we
\end_layout

\begin_layout LyX-Code
want its recipients to know that what they have is not the original, so
\end_layout

\begin_layout LyX-Code
that any problems introduced by others will not reflect on the original
\end_layout

\begin_layout LyX-Code
authors' reputations.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  Finally, any free program is threatened constantly by software
\end_layout

\begin_layout LyX-Code
patents.
  We wish to avoid the danger that redistributors of a free
\end_layout

\begin_layout LyX-Code
program will individually obtain patent licenses, in effect making the
\end_layout

\begin_layout LyX-Code
program proprietary.
  To prevent this, we have made it clear that any
\end_layout

\begin_layout LyX-Code
patent must be licensed for everyone's free use or not licensed at all.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  The precise terms and conditions for copying, distribution and
\end_layout

\begin_layout LyX-Code
modification follow.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
                    GNU GENERAL PUBLIC LICENSE
\end_layout

\begin_layout LyX-Code
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  0.
 This License applies to any program or other work which contains
\end_layout

\begin_layout LyX-Code
a notice placed by the copyright holder saying it may be distributed
\end_layout

\begin_layout LyX-Code
under the terms of this General Public License.
  The "Program", below,
\end_layout

\begin_layout LyX-Code
refers to any such program or work, and a "work based on the Program"
\end_layout

\begin_layout LyX-Code
means either the Program or any derivative work under copyright law:
\end_layout

\begin_layout LyX-Code
that is to say, a work containing the Program or a portion of it,
\end_layout

\begin_layout LyX-Code
either verbatim or with modifications and/or translated into another
\end_layout

\begin_layout LyX-Code
language.
  (Hereinafter, translation is included without limitation in
\end_layout

\begin_layout LyX-Code
the term "modification".)  Each licensee is addressed as "you".
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
Activities other than copying, distribution and modification are not
\end_layout

\begin_layout LyX-Code
covered by this License; they are outside its scope.
  The act of
\end_layout

\begin_layout LyX-Code
running the Program is not restricted, and the output from the Program
\end_layout

\begin_layout LyX-Code
is covered only if its contents constitute a work based on the
\end_layout

\begin_layout LyX-Code
Program (independent of having been made by running the Program).
\end_layout

\begin_layout LyX-Code
Whether that is true depends on what the Program does.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  1.
 You may copy and distribute verbatim copies of the Program's
\end_layout

\begin_layout LyX-Code
source code as you receive it, in any medium, provided that you
\end_layout

\begin_layout LyX-Code
conspicuously and appropriately publish on each copy an appropriate
\end_layout

\begin_layout LyX-Code
copyright notice and disclaimer of warranty; keep intact all the
\end_layout

\begin_layout LyX-Code
notices that refer to this License and to the absence of any warranty;
\end_layout

\begin_layout LyX-Code
and give any other recipients of the Program a copy of this License
\end_layout

\begin_layout LyX-Code
along with the Program.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
You may charge a fee for the physical act of transferring a copy, and
\end_layout

\begin_layout LyX-Code
you may at your option offer warranty protection in exchange for a fee.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  2.
 You may modify your copy or copies of the Program or any portion
\end_layout

\begin_layout LyX-Code
of it, thus forming a work based on the Program, and copy and
\end_layout

\begin_layout LyX-Code
distribute such modifications or work under the terms of Section 1
\end_layout

\begin_layout LyX-Code
above, provided that you also meet all of these conditions:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
    a) You must cause the modified files to carry prominent notices
\end_layout

\begin_layout LyX-Code
    stating that you changed the files and the date of any change.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
    b) You must cause any work that you distribute or publish, that in
\end_layout

\begin_layout LyX-Code
    whole or in part contains or is derived from the Program or any
\end_layout

\begin_layout LyX-Code
    part thereof, to be licensed as a whole at no charge to all third
\end_layout

\begin_layout LyX-Code
    parties under the terms of this License.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
    c) If the modified program normally reads commands interactively
\end_layout

\begin_layout LyX-Code
    when run, you must cause it, when started running for such
\end_layout

\begin_layout LyX-Code
    interactive use in the most ordinary way, to print or display an
\end_layout

\begin_layout LyX-Code
    announcement including an appropriate copyright notice and a
\end_layout

\begin_layout LyX-Code
    notice that there is no warranty (or else, saying that you provide
\end_layout

\begin_layout LyX-Code
    a warranty) and that users may redistribute the program under
\end_layout

\begin_layout LyX-Code
    these conditions, and telling the user how to view a copy of this
\end_layout

\begin_layout LyX-Code
    License.
  (Exception: if the Program itself is interactive but
\end_layout

\begin_layout LyX-Code
    does not normally print such an announcement, your work based on
\end_layout

\begin_layout LyX-Code
    the Program is not required to print an announcement.)
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
These requirements apply to the modified work as a whole.
  If
\end_layout

\begin_layout LyX-Code
identifiable sections of that work are not derived from the Program,
\end_layout

\begin_layout LyX-Code
and can be reasonably considered independent and separate works in
\end_layout

\begin_layout LyX-Code
themselves, then this License, and its terms, do not apply to those
\end_layout

\begin_layout LyX-Code
sections when you distribute them as separate works.
  But when you
\end_layout

\begin_layout LyX-Code
distribute the same sections as part of a whole which is a work based
\end_layout

\begin_layout LyX-Code
on the Program, the distribution of the whole must be on the terms of
\end_layout

\begin_layout LyX-Code
this License, whose permissions for other licensees extend to the
\end_layout

\begin_layout LyX-Code
entire whole, and thus to each and every part regardless of who wrote it.
\end_layout

\begin_layout LyX-Code
Thus, it is not the intent of this section to claim rights or contest
\end_layout

\begin_layout LyX-Code
your rights to work written entirely by you; rather, the intent is to
\end_layout

\begin_layout LyX-Code
exercise the right to control the distribution of derivative or
\end_layout

\begin_layout LyX-Code
collective works based on the Program.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
In addition, mere aggregation of another work not based on the Program
\end_layout

\begin_layout LyX-Code
with the Program (or with a work based on the Program) on a volume of
\end_layout

\begin_layout LyX-Code
a storage or distribution medium does not bring the other work under
\end_layout

\begin_layout LyX-Code
the scope of this License.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  3.
 You may copy and distribute the Program (or a work based on it,
\end_layout

\begin_layout LyX-Code
under Section 2) in object code or executable form under the terms of
\end_layout

\begin_layout LyX-Code
Sections 1 and 2 above provided that you also do one of the following:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
    a) Accompany it with the complete corresponding machine-readable
\end_layout

\begin_layout LyX-Code
    source code, which must be distributed under the terms of Sections
\end_layout

\begin_layout LyX-Code
    1 and 2 above on a medium customarily used for software interchange;
 or,
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
    b) Accompany it with a written offer, valid for at least three
\end_layout

\begin_layout LyX-Code
    years, to give any third party, for a charge no more than your
\end_layout

\begin_layout LyX-Code
    cost of physically performing source distribution, a complete
\end_layout

\begin_layout LyX-Code
    machine-readable copy of the corresponding source code, to be
\end_layout

\begin_layout LyX-Code
    distributed under the terms of Sections 1 and 2 above on a medium
\end_layout

\begin_layout LyX-Code
    customarily used for software interchange; or,
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
    c) Accompany it with the information you received as to the offer
\end_layout

\begin_layout LyX-Code
    to distribute corresponding source code.
  (This alternative is
\end_layout

\begin_layout LyX-Code
    allowed only for noncommercial distribution and only if you
\end_layout

\begin_layout LyX-Code
    received the program in object code or executable form with such
\end_layout

\begin_layout LyX-Code
    an offer, in accord with Subsection b above.)
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
The source code for a work means the preferred form of the work for
\end_layout

\begin_layout LyX-Code
making modifications to it.
  For an executable work, complete source
\end_layout

\begin_layout LyX-Code
code means all the source code for all modules it contains, plus any
\end_layout

\begin_layout LyX-Code
associated interface definition files, plus the scripts used to
\end_layout

\begin_layout LyX-Code
control compilation and installation of the executable.
  However, as a
\end_layout

\begin_layout LyX-Code
special exception, the source code distributed need not include
\end_layout

\begin_layout LyX-Code
anything that is normally distributed (in either source or binary
\end_layout

\begin_layout LyX-Code
form) with the major components (compiler, kernel, and so on) of the
\end_layout

\begin_layout LyX-Code
operating system on which the executable runs, unless that component
\end_layout

\begin_layout LyX-Code
itself accompanies the executable.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
If distribution of executable or object code is made by offering
\end_layout

\begin_layout LyX-Code
access to copy from a designated place, then offering equivalent
\end_layout

\begin_layout LyX-Code
access to copy the source code from the same place counts as
\end_layout

\begin_layout LyX-Code
distribution of the source code, even though third parties are not
\end_layout

\begin_layout LyX-Code
compelled to copy the source along with the object code.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  4.
 You may not copy, modify, sublicense, or distribute the Program
\end_layout

\begin_layout LyX-Code
except as expressly provided under this License.
  Any attempt
\end_layout

\begin_layout LyX-Code
otherwise to copy, modify, sublicense or distribute the Program is
\end_layout

\begin_layout LyX-Code
void, and will automatically terminate your rights under this License.
\end_layout

\begin_layout LyX-Code
However, parties who have received copies, or rights, from you under
\end_layout

\begin_layout LyX-Code
this License will not have their licenses terminated so long as such
\end_layout

\begin_layout LyX-Code
parties remain in full compliance.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  5.
 You are not required to accept this License, since you have not
\end_layout

\begin_layout LyX-Code
signed it.
  However, nothing else grants you permission to modify or
\end_layout

\begin_layout LyX-Code
distribute the Program or its derivative works.
  These actions are
\end_layout

\begin_layout LyX-Code
prohibited by law if you do not accept this License.
  Therefore, by
\end_layout

\begin_layout LyX-Code
modifying or distributing the Program (or any work based on the
\end_layout

\begin_layout LyX-Code
Program), you indicate your acceptance of this License to do so, and
\end_layout

\begin_layout LyX-Code
all its terms and conditions for copying, distributing or modifying
\end_layout

\begin_layout LyX-Code
the Program or works based on it.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  6.
 Each time you redistribute the Program (or any work based on the
\end_layout

\begin_layout LyX-Code
Program), the recipient automatically receives a license from the
\end_layout

\begin_layout LyX-Code
original licensor to copy, distribute or modify the Program subject to
\end_layout

\begin_layout LyX-Code
these terms and conditions.
  You may not impose any further
\end_layout

\begin_layout LyX-Code
restrictions on the recipients' exercise of the rights granted herein.
\end_layout

\begin_layout LyX-Code
You are not responsible for enforcing compliance by third parties to
\end_layout

\begin_layout LyX-Code
this License.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  7.
 If, as a consequence of a court judgment or allegation of patent
\end_layout

\begin_layout LyX-Code
infringement or for any other reason (not limited to patent issues),
\end_layout

\begin_layout LyX-Code
conditions are imposed on you (whether by court order, agreement or
\end_layout

\begin_layout LyX-Code
otherwise) that contradict the conditions of this License, they do not
\end_layout

\begin_layout LyX-Code
excuse you from the conditions of this License.
  If you cannot
\end_layout

\begin_layout LyX-Code
distribute so as to satisfy simultaneously your obligations under this
\end_layout

\begin_layout LyX-Code
License and any other pertinent obligations, then as a consequence you
\end_layout

\begin_layout LyX-Code
may not distribute the Program at all.
  For example, if a patent
\end_layout

\begin_layout LyX-Code
license would not permit royalty-free redistribution of the Program by
\end_layout

\begin_layout LyX-Code
all those who receive copies directly or indirectly through you, then
\end_layout

\begin_layout LyX-Code
the only way you could satisfy both it and this License would be to
\end_layout

\begin_layout LyX-Code
refrain entirely from distribution of the Program.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
If any portion of this section is held invalid or unenforceable under
\end_layout

\begin_layout LyX-Code
any particular circumstance, the balance of the section is intended to
\end_layout

\begin_layout LyX-Code
apply and the section as a whole is intended to apply in other
\end_layout

\begin_layout LyX-Code
circumstances.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
It is not the purpose of this section to induce you to infringe any
\end_layout

\begin_layout LyX-Code
patents or other property right claims or to contest validity of any
\end_layout

\begin_layout LyX-Code
such claims; this section has the sole purpose of protecting the
\end_layout

\begin_layout LyX-Code
integrity of the free software distribution system, which is
\end_layout

\begin_layout LyX-Code
implemented by public license practices.
  Many people have made
\end_layout

\begin_layout LyX-Code
generous contributions to the wide range of software distributed
\end_layout

\begin_layout LyX-Code
through that system in reliance on consistent application of that
\end_layout

\begin_layout LyX-Code
system; it is up to the author/donor to decide if he or she is willing
\end_layout

\begin_layout LyX-Code
to distribute software through any other system and a licensee cannot
\end_layout

\begin_layout LyX-Code
impose that choice.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
This section is intended to make thoroughly clear what is believed to
\end_layout

\begin_layout LyX-Code
be a consequence of the rest of this License.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  8.
 If the distribution and/or use of the Program is restricted in
\end_layout

\begin_layout LyX-Code
certain countries either by patents or by copyrighted interfaces, the
\end_layout

\begin_layout LyX-Code
original copyright holder who places the Program under this License
\end_layout

\begin_layout LyX-Code
may add an explicit geographical distribution limitation excluding
\end_layout

\begin_layout LyX-Code
those countries, so that distribution is permitted only in or among
\end_layout

\begin_layout LyX-Code
countries not thus excluded.
  In such case, this License incorporates
\end_layout

\begin_layout LyX-Code
the limitation as if written in the body of this License.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  9.
 The Free Software Foundation may publish revised and/or new versions
\end_layout

\begin_layout LyX-Code
of the General Public License from time to time.
  Such new versions will
\end_layout

\begin_layout LyX-Code
be similar in spirit to the present version, but may differ in detail to
\end_layout

\begin_layout LyX-Code
address new problems or concerns.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
Each version is given a distinguishing version number.
  If the Program
\end_layout

\begin_layout LyX-Code
specifies a version number of this License which applies to it and "any
\end_layout

\begin_layout LyX-Code
later version", you have the option of following the terms and conditions
\end_layout

\begin_layout LyX-Code
either of that version or of any later version published by the Free
\end_layout

\begin_layout LyX-Code
Software Foundation.
  If the Program does not specify a version number of
\end_layout

\begin_layout LyX-Code
this License, you may choose any version ever published by the Free Software
\end_layout

\begin_layout LyX-Code
Foundation.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  10.
 If you wish to incorporate parts of the Program into other free
\end_layout

\begin_layout LyX-Code
programs whose distribution conditions are different, write to the author
\end_layout

\begin_layout LyX-Code
to ask for permission.
  For software which is copyrighted by the Free
\end_layout

\begin_layout LyX-Code
Software Foundation, write to the Free Software Foundation; we sometimes
\end_layout

\begin_layout LyX-Code
make exceptions for this.
  Our decision will be guided by the two goals
\end_layout

\begin_layout LyX-Code
of preserving the free status of all derivatives of our free software and
\end_layout

\begin_layout LyX-Code
of promoting the sharing and reuse of software generally.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
                            NO WARRANTY
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  11.
 BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
\end_layout

\begin_layout LyX-Code
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
  EXCEPT WHEN
\end_layout

\begin_layout LyX-Code
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
\end_layout

\begin_layout LyX-Code
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
\end_layout

\begin_layout LyX-Code
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
\end_layout

\begin_layout LyX-Code
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  THE ENTIRE RISK AS
\end_layout

\begin_layout LyX-Code
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
  SHOULD THE
\end_layout

\begin_layout LyX-Code
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
\end_layout

\begin_layout LyX-Code
REPAIR OR CORRECTION.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  12.
 IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
\end_layout

\begin_layout LyX-Code
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
\end_layout

\begin_layout LyX-Code
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
\end_layout

\begin_layout LyX-Code
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
\end_layout

\begin_layout LyX-Code
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
\end_layout

\begin_layout LyX-Code
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
\end_layout

\begin_layout LyX-Code
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
\end_layout

\begin_layout LyX-Code
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
\end_layout

\begin_layout LyX-Code
POSSIBILITY OF SUCH DAMAGES.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
                     END OF TERMS AND CONDITIONS
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
            How to Apply These Terms to Your New Programs
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  If you develop a new program, and you want it to be of the greatest
\end_layout

\begin_layout LyX-Code
possible use to the public, the best way to achieve this is to make it
\end_layout

\begin_layout LyX-Code
free software which everyone can redistribute and change under these terms.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  To do so, attach the following notices to the program.
  It is safest
\end_layout

\begin_layout LyX-Code
to attach them to the start of each source file to most effectively
\end_layout

\begin_layout LyX-Code
convey the exclusion of warranty; and each file should have at least
\end_layout

\begin_layout LyX-Code
the "copyright" line and a pointer to where the full notice is found.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
    <one line to give the program's name and a brief idea of what it does.>
\end_layout

\begin_layout LyX-Code
    Copyright (C) <year>  <name of author>
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
    This program is free software; you can redistribute it and/or modify
\end_layout

\begin_layout LyX-Code
    it under the terms of the GNU General Public License as published by
\end_layout

\begin_layout LyX-Code
    the Free Software Foundation; either version 2 of the License, or
\end_layout

\begin_layout LyX-Code
    (at your option) any later version.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
    This program is distributed in the hope that it will be useful,
\end_layout

\begin_layout LyX-Code
    but WITHOUT ANY WARRANTY; without even the implied warranty of
\end_layout

\begin_layout LyX-Code
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the
\end_layout

\begin_layout LyX-Code
    GNU General Public License for more details.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
    You should have received a copy of the GNU General Public License
\end_layout

\begin_layout LyX-Code
    along with this program; if not, write to the Free Software
\end_layout

\begin_layout LyX-Code
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
  USA
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Also add information on how to contact you by electronic and paper mail.
\end_layout

\begin_layout LyX-Code
If the program is interactive, make it output a short notice like this
\end_layout

\begin_layout LyX-Code
when it starts in an interactive mode:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
    Gnomovision version 69, Copyright (C) year  name of author
\end_layout

\begin_layout LyX-Code
    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show
 w'.
\end_layout

\begin_layout LyX-Code
    This is free software, and you are welcome to redistribute it
\end_layout

\begin_layout LyX-Code
    under certain conditions; type `show c' for details.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
The hypothetical commands `show w' and `show c' should show the appropriate
\end_layout

\begin_layout LyX-Code
parts of the General Public License.
  Of course, the commands you use may
\end_layout

\begin_layout LyX-Code
be called something other than `show w' and `show c'; they could even be
\end_layout

\begin_layout LyX-Code
mouse-clicks or menu items--whatever suits your program.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
You should also get your employer (if you work as a programmer) or your
\end_layout

\begin_layout LyX-Code
school, if any, to sign a "copyright disclaimer" for the program, if
\end_layout

\begin_layout LyX-Code
necessary.
  Here is a sample; alter the names:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
\end_layout

\begin_layout LyX-Code
  `Gnomovision' (which makes passes at compilers) written by James Hacker.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
  <signature of Ty Coon>, 1 April 1989
\begin_inset Newline newline
\end_inset

  Ty Coon, President of Vice
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
This General Public License does not permit incorporating your program into
\end_layout

\begin_layout LyX-Code
proprietary programs.
  If your program is a subroutine library, you may
\end_layout

\begin_layout LyX-Code
consider it more useful to permit linking proprietary applications with
 the
\end_layout

\begin_layout LyX-Code
library.
  If this is what you want to do, use the GNU Library General
\end_layout

\begin_layout LyX-Code
Public License instead of this License.
\end_layout

\begin_layout Section
PCRE license
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
PCRE!license
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
PCRE!library
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:PCRE-license"

\end_inset


\end_layout

\begin_layout Standard
CRE is a library of functions to support regular expressions whose syntax
 and semantics are as close as possible to those of the Perl 5 language.
\end_layout

\begin_layout Standard
Release 8 of PCRE is distributed under the terms of the "BSD" licence, as
 specified below.
 The documentation for PCRE, supplied in the "doc" directory, is distributed
 under the same terms as the software itself.
 The data in the testdata directory is not copyrighted and is in the public
 domain.
\end_layout

\begin_layout Standard
The basic library functions are written in C and are freestanding.
 Also included in the distribution is a set of C++ wrapper functions, and
 a just-in-time compiler that can be used to optimize pattern matching.
 These are both optional features that can be omitted when the library is
 built.
\begin_inset Foot
status open

\begin_layout Plain Layout
None of these optional features are enabled when compiling PCRE as it appears
 in the Emdros source code.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
THE BASIC LIBRARY FUNCTIONS
\end_layout

\begin_layout Standard
Written by: Philip Hazel 
\end_layout

\begin_layout Standard
Email local part: ph10 
\end_layout

\begin_layout Standard
Email domain: cam.ac.uk
\end_layout

\begin_layout Standard
University of Cambridge Computing Service, Cambridge, England.
\end_layout

\begin_layout Standard
Copyright (c) 1997-2017 University of Cambridge All rights reserved.
\end_layout

\begin_layout Subsection
The 
\begin_inset Quotes eld
\end_inset

BSD
\begin_inset Quotes erd
\end_inset

 license
\end_layout

\begin_layout Standard
Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:
\end_layout

\begin_layout Itemize
Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
\end_layout

\begin_layout Itemize
Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.
\end_layout

\begin_layout Itemize
Neither the name of the University of Cambridge nor the name of Google Inc.
 nor the names of their contributors may be used to endorse or promote products
 derived from this software without specific prior written permission.
\end_layout

\begin_layout Standard
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
\end_layout

\begin_layout Chapter
Console sheaf grammar
\begin_inset CommandInset label
LatexCommand label
name "Appendix:Console-sheaf-grammar"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
output!console
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
console!sheaf
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
console!output
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The sheaf's contents were explained in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sheaf"

\end_inset

.
 In this appendix, we give the grammar for the sheaf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sheaf
\end_layout

\end_inset

 as it is output with console output (as opposed to XML output
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
XML!output
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
output!XML
\end_layout

\end_inset

).
\end_layout

\begin_layout Section
Sheaf grammar
\end_layout

\begin_layout LyX-Code
/* Sheaf */
\end_layout

\begin_layout LyX-Code
sheaf : failed_sheaf | successful_sheaf
\end_layout

\begin_layout LyX-Code
;
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
failed_sheaf : 
\begin_inset Quotes eld
\end_inset

//
\begin_inset Quotes erd
\end_inset

  /* A failed sheaf means 
\end_layout

\begin_layout LyX-Code
                          that the query failed
\end_layout

\begin_layout LyX-Code
                          in some way.
 */
\end_layout

\begin_layout LyX-Code
;
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
successful_sheaf : 
\begin_inset Quotes eld
\end_inset

//
\begin_inset Quotes erd
\end_inset

 straws /* A successful sheaf
\end_layout

\begin_layout LyX-Code
                                    means that the query
\end_layout

\begin_layout LyX-Code
                                    did not fail.
 It may
\end_layout

\begin_layout LyX-Code
                                    however, be empty,
\end_layout

\begin_layout LyX-Code
                                    in which case the
\end_layout

\begin_layout LyX-Code
                                    list_of_straws will
\end_layout

\begin_layout LyX-Code
                                    not be there, and the
\end_layout

\begin_layout LyX-Code
                                    sheaf will look like
\end_layout

\begin_layout LyX-Code
                                    this: 
\begin_inset Quotes eld
\end_inset

// < >
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout LyX-Code
                                 */
\end_layout

\begin_layout LyX-Code
;
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
straws : 
\begin_inset Quotes eld
\end_inset

<
\begin_inset Quotes erd
\end_inset

 list_of_straws 
\begin_inset Quotes eld
\end_inset

>
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
list_of_straws : { straw }
\end_layout

\begin_layout LyX-Code
;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

/* Straw */
\end_layout

\begin_layout LyX-Code
straw : 
\begin_inset Quotes eld
\end_inset

<
\begin_inset Quotes erd
\end_inset

 list_of_matched_objects 
\begin_inset Quotes eld
\end_inset

>
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
list_of_matched_objects : { matched_object }
\end_layout

\begin_layout LyX-Code
;
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
/* Matched object */
\end_layout

\begin_layout LyX-Code
matched_object : mo_id_d | mo_id_m
\end_layout

\begin_layout LyX-Code
;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

/* Matched object with id_d */
\end_layout

\begin_layout LyX-Code
mo_id_d : 
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

 object_type_name
\end_layout

\begin_layout LyX-Code
          id_d_of_object
\end_layout

\begin_layout LyX-Code
          monad_set
\end_layout

\begin_layout LyX-Code
          is_focus
\end_layout

\begin_layout LyX-Code
          [marks]
\end_layout

\begin_layout LyX-Code
          inner_sheaf
\end_layout

\begin_layout LyX-Code
          
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
object_type_name : T_IDENTIFIER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

IDENTIFIER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
id_d_of_object : T_INTEGER
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

INTEGER
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
;
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
is_focus : 
\begin_inset Quotes eld
\end_inset

true
\begin_inset Quotes erd
\end_inset

 | 
\begin_inset Quotes eld
\end_inset

false
\begin_inset Quotes erd
\end_inset

 /* Was the block against 
\end_layout

\begin_layout LyX-Code
                                   which this matched_object
\end_layout

\begin_layout LyX-Code
                                   was matched a 
\begin_inset Quotes eld
\end_inset

focus
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
                                   block or not? I.e., was
\end_layout

\begin_layout LyX-Code
                                   they keyword 
\begin_inset Quotes eld
\end_inset

focus
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout LyX-Code
                                   present in the block?
\end_layout

\begin_layout LyX-Code
                                */
\end_layout

\begin_layout LyX-Code
;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

marks : T_MARKS
\begin_inset Newline newline
\end_inset

;
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
inner_sheaf : sheaf
\end_layout

\begin_layout LyX-Code
;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

/* Matched object with id_m (see 
\begin_inset CommandInset citation
LatexCommand cite
key "Standard-MDF"
literal "true"

\end_inset

) */
\end_layout

\begin_layout LyX-Code
mo_id_d : 
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

pow_m
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
          monad_set
\end_layout

\begin_layout LyX-Code
          is_focus
\end_layout

\begin_layout LyX-Code
          [marks]
\end_layout

\begin_layout LyX-Code
          inner_sheaf
\end_layout

\begin_layout LyX-Code
          
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
;
\end_layout

\begin_layout Section
References
\end_layout

\begin_layout Standard
For the 
\family typewriter
monad_set
\family default
 non-terminal, please see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "SELECT_OBJECTS"

\end_inset

.
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Bibliography
\labelwidthstring Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "Doedens94"
key "Doedens94"
literal "true"

\end_inset

Doedens
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Doedens, Crist-Jan
\end_layout

\end_inset

, Crist-Jan.
 1994: 
\emph on
Text Databases, One Database Model and Several Retrieval Languages.

\emph default
 `Language and Computers,' Volume 14.
 Editions Rodopi Amsterdam, Atlanta, GA.
 ISBN 90-5183-729-1.
\end_layout

\begin_layout Bibliography
\labelwidthstring Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "Standard-MdF"
key "Standard-MDF"
literal "true"

\end_inset

Petersen, Ulrik.
 2002: 
\emph on
The Standard MdF Model
\emph default
.
 Unpublished article.
 Obtainable from URL: 
\family typewriter
https://emdros.org/
\end_layout

\begin_layout Bibliography
\labelwidthstring Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "Relational-EMdF"
key "Rel-EMdF"
literal "true"

\end_inset

Petersen, Ulrik.
 2007: 
\emph on
Relational Implementation of EMdF and MQL.

\emph default
 Unpublished working-paper.
 Obtainable from URL: 
\family typewriter
https://emdros.org/
\end_layout

\begin_layout Bibliography
\labelwidthstring Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "MQLQueryGuide"
key "MQL-Query-Guide"
literal "true"

\end_inset

Sandborg-Petersen, Ulrik.
 2014: 
\emph on
MQL Query Guide
\emph default
.
 Obtainable from URL: 
\family typewriter
https://emdros.org/
\end_layout

\begin_layout Bibliography
\labelwidthstring Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "Monad Sets"
key "Monad-Sets"
literal "true"

\end_inset

Petersen, Ulrik.
 2002: 
\emph on
Monad Sets â€“ Implementation and Mathematical Foundations
\emph default
.
 Unpublished article.
 Obtainable from URL: 
\family typewriter
https://emdros.org/
\end_layout

\begin_layout Bibliography
\labelwidthstring Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "Petersen2004"
key "COLING2004"
literal "false"

\end_inset

 Petersen, Ulrik.
 2004a: 
\emph on
Emdros â€“ a text database engine for analyzed or annotated text
\emph default
.
 In Proceedings of COLING 2004.
 Obtainable from URL: 
\family typewriter
https://emdros.org/
\end_layout

\begin_layout Bibliography
\labelwidthstring Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "MA2004"
key "MA2004"
literal "false"

\end_inset

 Petersen, Ulrik.
 2004b: 
\emph on
Creation in Graphs: Extracting Conceptual Structures from Old Testament
 Texts
\emph default
.
 MA thesis, University of Aalborg, Department of Communication.
 Published in: Impact -- an Electronic Journal on Formalisation in Media,
 Text and Language.
 Also available from URL: 
\family typewriter
http://ulrikp.org/
\end_layout

\begin_layout Bibliography
\labelwidthstring Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "RANLP2005"
key "RANLP2005"
literal "false"

\end_inset

 Petersen, Ulrik.
 2005: 
\emph on
Evaluating corpus query systems on functionality and speed: TIGERSearch
 and Emdros.

\emph default
 In: Angelova, G., Bontcheva, K., Mitkov, R., Nicolov, N.
 and Nikolov, N.
 (eds): 
\emph on
International Conference Recent Advances in Natural Language Processing
 2005, Proceedings, Borovets, Bulgaria, 21-23 September 2005
\emph default
, pp.
 387--391.
\end_layout

\begin_layout Bibliography
\labelwidthstring Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "LREC2006"
key "LREC2006"
literal "false"

\end_inset

 Petersen, Ulrik.
 2006a: 
\emph on
Querying both Parallel and Treebank Corpora: Evaluation of a Corpus Query
 System
\emph default
.
 In: Proceedings of LREC 2006.
\end_layout

\begin_layout Bibliography
\labelwidthstring Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "FSMNLP"
key "FSMNLP"
literal "false"

\end_inset

 Petersen, Ulrik.
 2006b: 
\emph on
Principles, Implementation Strategies, and Evaluation of a Corpus Query
 System
\emph default
.
 In: Yli-JyrÃ¤, Anssi; Karttunen, Lauri; KarhumÃ¤ki, Juhani (eds), 
\emph on
Finite-State Methods and Natural Language Processing 5th International Workshop,
 FSMNLP 2005, Helsinki, Finland, September 1-2, 2005, Revised Papers
\emph default
, Lecture Notes in Computer Science, Volume 4002/2006, Springer Verlag,
 Heidelberg, New York, pp.
 215-226.
 DOI: 10.1007/11780885_21.
\end_layout

\begin_layout Bibliography
\labelwidthstring Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "PhD2008"
key "PhD2008"
literal "false"

\end_inset

 Sandborg-Petersen, Ulrik.
 2008: 
\emph on
Annotated text databases in the context of the Kaj Munk archive: One database
 model, one query language, and several applications.

\emph default
 PhD dissertation, Department of Communication and Psychology, Aalborg Universit
y, Denmark.
 Obtainable from URL: 
\family typewriter
http://ulrikp.org/PhD/
\end_layout

\begin_layout Bibliography
\labelwidthstring Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "BRILL2011"
key "BRILL2011"
literal "false"

\end_inset

 Sandborg-Petersen, Ulrik.
 2011.
 
\emph on
On Biblical Hebrew and Computer Science: Inspiration, Models, Tools, And
 Cross-fertilization
\emph default
.
 In W.
 Th.
 van Peursen, J.
 Dyk (eds.) 
\emph on
Tradition and Innovation in Biblical Interpretation: Studies Presented to
 Professor Eep Talstra on the Occasion of his Sixty-Fifth Birthday
\emph default
.
 Brill Academic Publishers, Incorporated, 2011.
 s.
 261-276 (Studia Semitica Neerlandica - SSN; Nr.
 57).
\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"
name "Index"
literal "true"

\end_inset


\end_layout

\end_body
\end_document
